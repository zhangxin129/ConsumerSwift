// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ImHxconn.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImHxconnRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImHxconnRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImHxcommonRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface LoginReq ()
@property (strong) NSString* sCustId;
@property (strong) NSString* sLoginToken;
@property UInt32 nChannelType;
@property (strong) NSString* sEntResNo;
@property BOOL bForceLogin;
@property UInt32 nDeviceType;
@property (strong) NSString* sDeviceVersion;
@property (strong) NSString* sDeviceToken;
@end

@implementation LoginReq

- (BOOL) hasSCustId {
  return !!hasSCustId_;
}
- (void) setHasSCustId:(BOOL) _value_ {
  hasSCustId_ = !!_value_;
}
@synthesize sCustId;
- (BOOL) hasSLoginToken {
  return !!hasSLoginToken_;
}
- (void) setHasSLoginToken:(BOOL) _value_ {
  hasSLoginToken_ = !!_value_;
}
@synthesize sLoginToken;
- (BOOL) hasNChannelType {
  return !!hasNChannelType_;
}
- (void) setHasNChannelType:(BOOL) _value_ {
  hasNChannelType_ = !!_value_;
}
@synthesize nChannelType;
- (BOOL) hasSEntResNo {
  return !!hasSEntResNo_;
}
- (void) setHasSEntResNo:(BOOL) _value_ {
  hasSEntResNo_ = !!_value_;
}
@synthesize sEntResNo;
- (BOOL) hasBForceLogin {
  return !!hasBForceLogin_;
}
- (void) setHasBForceLogin:(BOOL) _value_ {
  hasBForceLogin_ = !!_value_;
}
- (BOOL) bForceLogin {
  return !!bForceLogin_;
}
- (void) setBForceLogin:(BOOL) _value_ {
  bForceLogin_ = !!_value_;
}
- (BOOL) hasNDeviceType {
  return !!hasNDeviceType_;
}
- (void) setHasNDeviceType:(BOOL) _value_ {
  hasNDeviceType_ = !!_value_;
}
@synthesize nDeviceType;
- (BOOL) hasSDeviceVersion {
  return !!hasSDeviceVersion_;
}
- (void) setHasSDeviceVersion:(BOOL) _value_ {
  hasSDeviceVersion_ = !!_value_;
}
@synthesize sDeviceVersion;
- (BOOL) hasSDeviceToken {
  return !!hasSDeviceToken_;
}
- (void) setHasSDeviceToken:(BOOL) _value_ {
  hasSDeviceToken_ = !!_value_;
}
@synthesize sDeviceToken;
- (instancetype) init {
  if ((self = [super init])) {
    self.sCustId = @"";
    self.sLoginToken = @"";
    self.nChannelType = 0;
    self.sEntResNo = @"";
    self.bForceLogin = NO;
    self.nDeviceType = 0;
    self.sDeviceVersion = @"";
    self.sDeviceToken = @"";
  }
  return self;
}
static LoginReq* defaultLoginReqInstance = nil;
+ (void) initialize {
  if (self == [LoginReq class]) {
    defaultLoginReqInstance = [[LoginReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginReqInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSCustId) {
    return NO;
  }
  if (!self.hasSLoginToken) {
    return NO;
  }
  if (!self.hasNChannelType) {
    return NO;
  }
  if (!self.hasBForceLogin) {
    return NO;
  }
  if (!self.hasNDeviceType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSCustId) {
    [output writeString:1 value:self.sCustId];
  }
  if (self.hasSLoginToken) {
    [output writeString:2 value:self.sLoginToken];
  }
  if (self.hasNChannelType) {
    [output writeUInt32:3 value:self.nChannelType];
  }
  if (self.hasSEntResNo) {
    [output writeString:4 value:self.sEntResNo];
  }
  if (self.hasBForceLogin) {
    [output writeBool:5 value:self.bForceLogin];
  }
  if (self.hasNDeviceType) {
    [output writeUInt32:6 value:self.nDeviceType];
  }
  if (self.hasSDeviceVersion) {
    [output writeString:7 value:self.sDeviceVersion];
  }
  if (self.hasSDeviceToken) {
    [output writeString:8 value:self.sDeviceToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSCustId) {
    size_ += computeStringSize(1, self.sCustId);
  }
  if (self.hasSLoginToken) {
    size_ += computeStringSize(2, self.sLoginToken);
  }
  if (self.hasNChannelType) {
    size_ += computeUInt32Size(3, self.nChannelType);
  }
  if (self.hasSEntResNo) {
    size_ += computeStringSize(4, self.sEntResNo);
  }
  if (self.hasBForceLogin) {
    size_ += computeBoolSize(5, self.bForceLogin);
  }
  if (self.hasNDeviceType) {
    size_ += computeUInt32Size(6, self.nDeviceType);
  }
  if (self.hasSDeviceVersion) {
    size_ += computeStringSize(7, self.sDeviceVersion);
  }
  if (self.hasSDeviceToken) {
    size_ += computeStringSize(8, self.sDeviceToken);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginReq*) parseFromData:(NSData*) data {
  return (LoginReq*)[[[LoginReq builder] mergeFromData:data] build];
}
+ (LoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (LoginReq*)[[[LoginReq builder] mergeFromInputStream:input] build];
}
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginReq*)[[[LoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginReq*)[[[LoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginReqBuilder*) builder {
  return [[LoginReqBuilder alloc] init];
}
+ (LoginReqBuilder*) builderWithPrototype:(LoginReq*) prototype {
  return [[LoginReq builder] mergeFrom:prototype];
}
- (LoginReqBuilder*) builder {
  return [LoginReq builder];
}
- (LoginReqBuilder*) toBuilder {
  return [LoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSCustId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sCustId", self.sCustId];
  }
  if (self.hasSLoginToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sLoginToken", self.sLoginToken];
  }
  if (self.hasNChannelType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nChannelType", [NSNumber numberWithInteger:self.nChannelType]];
  }
  if (self.hasSEntResNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sEntResNo", self.sEntResNo];
  }
  if (self.hasBForceLogin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bForceLogin", [NSNumber numberWithBool:self.bForceLogin]];
  }
  if (self.hasNDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nDeviceType", [NSNumber numberWithInteger:self.nDeviceType]];
  }
  if (self.hasSDeviceVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sDeviceVersion", self.sDeviceVersion];
  }
  if (self.hasSDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sDeviceToken", self.sDeviceToken];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSCustId) {
    [dictionary setObject: self.sCustId forKey: @"sCustId"];
  }
  if (self.hasSLoginToken) {
    [dictionary setObject: self.sLoginToken forKey: @"sLoginToken"];
  }
  if (self.hasNChannelType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nChannelType] forKey: @"nChannelType"];
  }
  if (self.hasSEntResNo) {
    [dictionary setObject: self.sEntResNo forKey: @"sEntResNo"];
  }
  if (self.hasBForceLogin) {
    [dictionary setObject: [NSNumber numberWithBool:self.bForceLogin] forKey: @"bForceLogin"];
  }
  if (self.hasNDeviceType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nDeviceType] forKey: @"nDeviceType"];
  }
  if (self.hasSDeviceVersion) {
    [dictionary setObject: self.sDeviceVersion forKey: @"sDeviceVersion"];
  }
  if (self.hasSDeviceToken) {
    [dictionary setObject: self.sDeviceToken forKey: @"sDeviceToken"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginReq class]]) {
    return NO;
  }
  LoginReq *otherMessage = other;
  return
      self.hasSCustId == otherMessage.hasSCustId &&
      (!self.hasSCustId || [self.sCustId isEqual:otherMessage.sCustId]) &&
      self.hasSLoginToken == otherMessage.hasSLoginToken &&
      (!self.hasSLoginToken || [self.sLoginToken isEqual:otherMessage.sLoginToken]) &&
      self.hasNChannelType == otherMessage.hasNChannelType &&
      (!self.hasNChannelType || self.nChannelType == otherMessage.nChannelType) &&
      self.hasSEntResNo == otherMessage.hasSEntResNo &&
      (!self.hasSEntResNo || [self.sEntResNo isEqual:otherMessage.sEntResNo]) &&
      self.hasBForceLogin == otherMessage.hasBForceLogin &&
      (!self.hasBForceLogin || self.bForceLogin == otherMessage.bForceLogin) &&
      self.hasNDeviceType == otherMessage.hasNDeviceType &&
      (!self.hasNDeviceType || self.nDeviceType == otherMessage.nDeviceType) &&
      self.hasSDeviceVersion == otherMessage.hasSDeviceVersion &&
      (!self.hasSDeviceVersion || [self.sDeviceVersion isEqual:otherMessage.sDeviceVersion]) &&
      self.hasSDeviceToken == otherMessage.hasSDeviceToken &&
      (!self.hasSDeviceToken || [self.sDeviceToken isEqual:otherMessage.sDeviceToken]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSCustId) {
    hashCode = hashCode * 31 + [self.sCustId hash];
  }
  if (self.hasSLoginToken) {
    hashCode = hashCode * 31 + [self.sLoginToken hash];
  }
  if (self.hasNChannelType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nChannelType] hash];
  }
  if (self.hasSEntResNo) {
    hashCode = hashCode * 31 + [self.sEntResNo hash];
  }
  if (self.hasBForceLogin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.bForceLogin] hash];
  }
  if (self.hasNDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nDeviceType] hash];
  }
  if (self.hasSDeviceVersion) {
    hashCode = hashCode * 31 + [self.sDeviceVersion hash];
  }
  if (self.hasSDeviceToken) {
    hashCode = hashCode * 31 + [self.sDeviceToken hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginReqBuilder()
@property (strong) LoginReq* resultLoginReq;
@end

@implementation LoginReqBuilder
@synthesize resultLoginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginReq = [[LoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginReq;
}
- (LoginReqBuilder*) clear {
  self.resultLoginReq = [[LoginReq alloc] init];
  return self;
}
- (LoginReqBuilder*) clone {
  return [LoginReq builderWithPrototype:resultLoginReq];
}
- (LoginReq*) defaultInstance {
  return [LoginReq defaultInstance];
}
- (LoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginReq*) buildPartial {
  LoginReq* returnMe = resultLoginReq;
  self.resultLoginReq = nil;
  return returnMe;
}
- (LoginReqBuilder*) mergeFrom:(LoginReq*) other {
  if (other == [LoginReq defaultInstance]) {
    return self;
  }
  if (other.hasSCustId) {
    [self setSCustId:other.sCustId];
  }
  if (other.hasSLoginToken) {
    [self setSLoginToken:other.sLoginToken];
  }
  if (other.hasNChannelType) {
    [self setNChannelType:other.nChannelType];
  }
  if (other.hasSEntResNo) {
    [self setSEntResNo:other.sEntResNo];
  }
  if (other.hasBForceLogin) {
    [self setBForceLogin:other.bForceLogin];
  }
  if (other.hasNDeviceType) {
    [self setNDeviceType:other.nDeviceType];
  }
  if (other.hasSDeviceVersion) {
    [self setSDeviceVersion:other.sDeviceVersion];
  }
  if (other.hasSDeviceToken) {
    [self setSDeviceToken:other.sDeviceToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSCustId:[input readString]];
        break;
      }
      case 18: {
        [self setSLoginToken:[input readString]];
        break;
      }
      case 24: {
        [self setNChannelType:[input readUInt32]];
        break;
      }
      case 34: {
        [self setSEntResNo:[input readString]];
        break;
      }
      case 40: {
        [self setBForceLogin:[input readBool]];
        break;
      }
      case 48: {
        [self setNDeviceType:[input readUInt32]];
        break;
      }
      case 58: {
        [self setSDeviceVersion:[input readString]];
        break;
      }
      case 66: {
        [self setSDeviceToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSCustId {
  return resultLoginReq.hasSCustId;
}
- (NSString*) sCustId {
  return resultLoginReq.sCustId;
}
- (LoginReqBuilder*) setSCustId:(NSString*) value {
  resultLoginReq.hasSCustId = YES;
  resultLoginReq.sCustId = value;
  return self;
}
- (LoginReqBuilder*) clearSCustId {
  resultLoginReq.hasSCustId = NO;
  resultLoginReq.sCustId = @"";
  return self;
}
- (BOOL) hasSLoginToken {
  return resultLoginReq.hasSLoginToken;
}
- (NSString*) sLoginToken {
  return resultLoginReq.sLoginToken;
}
- (LoginReqBuilder*) setSLoginToken:(NSString*) value {
  resultLoginReq.hasSLoginToken = YES;
  resultLoginReq.sLoginToken = value;
  return self;
}
- (LoginReqBuilder*) clearSLoginToken {
  resultLoginReq.hasSLoginToken = NO;
  resultLoginReq.sLoginToken = @"";
  return self;
}
- (BOOL) hasNChannelType {
  return resultLoginReq.hasNChannelType;
}
- (UInt32) nChannelType {
  return resultLoginReq.nChannelType;
}
- (LoginReqBuilder*) setNChannelType:(UInt32) value {
  resultLoginReq.hasNChannelType = YES;
  resultLoginReq.nChannelType = value;
  return self;
}
- (LoginReqBuilder*) clearNChannelType {
  resultLoginReq.hasNChannelType = NO;
  resultLoginReq.nChannelType = 0;
  return self;
}
- (BOOL) hasSEntResNo {
  return resultLoginReq.hasSEntResNo;
}
- (NSString*) sEntResNo {
  return resultLoginReq.sEntResNo;
}
- (LoginReqBuilder*) setSEntResNo:(NSString*) value {
  resultLoginReq.hasSEntResNo = YES;
  resultLoginReq.sEntResNo = value;
  return self;
}
- (LoginReqBuilder*) clearSEntResNo {
  resultLoginReq.hasSEntResNo = NO;
  resultLoginReq.sEntResNo = @"";
  return self;
}
- (BOOL) hasBForceLogin {
  return resultLoginReq.hasBForceLogin;
}
- (BOOL) bForceLogin {
  return resultLoginReq.bForceLogin;
}
- (LoginReqBuilder*) setBForceLogin:(BOOL) value {
  resultLoginReq.hasBForceLogin = YES;
  resultLoginReq.bForceLogin = value;
  return self;
}
- (LoginReqBuilder*) clearBForceLogin {
  resultLoginReq.hasBForceLogin = NO;
  resultLoginReq.bForceLogin = NO;
  return self;
}
- (BOOL) hasNDeviceType {
  return resultLoginReq.hasNDeviceType;
}
- (UInt32) nDeviceType {
  return resultLoginReq.nDeviceType;
}
- (LoginReqBuilder*) setNDeviceType:(UInt32) value {
  resultLoginReq.hasNDeviceType = YES;
  resultLoginReq.nDeviceType = value;
  return self;
}
- (LoginReqBuilder*) clearNDeviceType {
  resultLoginReq.hasNDeviceType = NO;
  resultLoginReq.nDeviceType = 0;
  return self;
}
- (BOOL) hasSDeviceVersion {
  return resultLoginReq.hasSDeviceVersion;
}
- (NSString*) sDeviceVersion {
  return resultLoginReq.sDeviceVersion;
}
- (LoginReqBuilder*) setSDeviceVersion:(NSString*) value {
  resultLoginReq.hasSDeviceVersion = YES;
  resultLoginReq.sDeviceVersion = value;
  return self;
}
- (LoginReqBuilder*) clearSDeviceVersion {
  resultLoginReq.hasSDeviceVersion = NO;
  resultLoginReq.sDeviceVersion = @"";
  return self;
}
- (BOOL) hasSDeviceToken {
  return resultLoginReq.hasSDeviceToken;
}
- (NSString*) sDeviceToken {
  return resultLoginReq.sDeviceToken;
}
- (LoginReqBuilder*) setSDeviceToken:(NSString*) value {
  resultLoginReq.hasSDeviceToken = YES;
  resultLoginReq.sDeviceToken = value;
  return self;
}
- (LoginReqBuilder*) clearSDeviceToken {
  resultLoginReq.hasSDeviceToken = NO;
  resultLoginReq.sDeviceToken = @"";
  return self;
}
@end

@interface LoginAck ()
@property (strong) NSString* scustId;
@property ResultCode nRet;
@end

@implementation LoginAck

- (BOOL) hasScustId {
  return !!hasScustId_;
}
- (void) setHasScustId:(BOOL) _value_ {
  hasScustId_ = !!_value_;
}
@synthesize scustId;
- (BOOL) hasNRet {
  return !!hasNRet_;
}
- (void) setHasNRet:(BOOL) _value_ {
  hasNRet_ = !!_value_;
}
@synthesize nRet;
- (instancetype) init {
  if ((self = [super init])) {
    self.scustId = @"";
    self.nRet = ResultCodeNoError;
  }
  return self;
}
static LoginAck* defaultLoginAckInstance = nil;
+ (void) initialize {
  if (self == [LoginAck class]) {
    defaultLoginAckInstance = [[LoginAck alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginAckInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginAckInstance;
}
- (BOOL) isInitialized {
  if (!self.hasScustId) {
    return NO;
  }
  if (!self.hasNRet) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasScustId) {
    [output writeString:1 value:self.scustId];
  }
  if (self.hasNRet) {
    [output writeEnum:2 value:self.nRet];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasScustId) {
    size_ += computeStringSize(1, self.scustId);
  }
  if (self.hasNRet) {
    size_ += computeEnumSize(2, self.nRet);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginAck*) parseFromData:(NSData*) data {
  return (LoginAck*)[[[LoginAck builder] mergeFromData:data] build];
}
+ (LoginAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginAck*)[[[LoginAck builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginAck*) parseFromInputStream:(NSInputStream*) input {
  return (LoginAck*)[[[LoginAck builder] mergeFromInputStream:input] build];
}
+ (LoginAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginAck*)[[[LoginAck builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginAck*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginAck*)[[[LoginAck builder] mergeFromCodedInputStream:input] build];
}
+ (LoginAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginAck*)[[[LoginAck builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginAckBuilder*) builder {
  return [[LoginAckBuilder alloc] init];
}
+ (LoginAckBuilder*) builderWithPrototype:(LoginAck*) prototype {
  return [[LoginAck builder] mergeFrom:prototype];
}
- (LoginAckBuilder*) builder {
  return [LoginAck builder];
}
- (LoginAckBuilder*) toBuilder {
  return [LoginAck builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasScustId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scustId", self.scustId];
  }
  if (self.hasNRet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nRet", NSStringFromResultCode(self.nRet)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasScustId) {
    [dictionary setObject: self.scustId forKey: @"scustId"];
  }
  if (self.hasNRet) {
    [dictionary setObject: @(self.nRet) forKey: @"nRet"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginAck class]]) {
    return NO;
  }
  LoginAck *otherMessage = other;
  return
      self.hasScustId == otherMessage.hasScustId &&
      (!self.hasScustId || [self.scustId isEqual:otherMessage.scustId]) &&
      self.hasNRet == otherMessage.hasNRet &&
      (!self.hasNRet || self.nRet == otherMessage.nRet) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasScustId) {
    hashCode = hashCode * 31 + [self.scustId hash];
  }
  if (self.hasNRet) {
    hashCode = hashCode * 31 + self.nRet;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginAckBuilder()
@property (strong) LoginAck* resultLoginAck;
@end

@implementation LoginAckBuilder
@synthesize resultLoginAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginAck = [[LoginAck alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginAck;
}
- (LoginAckBuilder*) clear {
  self.resultLoginAck = [[LoginAck alloc] init];
  return self;
}
- (LoginAckBuilder*) clone {
  return [LoginAck builderWithPrototype:resultLoginAck];
}
- (LoginAck*) defaultInstance {
  return [LoginAck defaultInstance];
}
- (LoginAck*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginAck*) buildPartial {
  LoginAck* returnMe = resultLoginAck;
  self.resultLoginAck = nil;
  return returnMe;
}
- (LoginAckBuilder*) mergeFrom:(LoginAck*) other {
  if (other == [LoginAck defaultInstance]) {
    return self;
  }
  if (other.hasScustId) {
    [self setScustId:other.scustId];
  }
  if (other.hasNRet) {
    [self setNRet:other.nRet];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setScustId:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setNRet:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasScustId {
  return resultLoginAck.hasScustId;
}
- (NSString*) scustId {
  return resultLoginAck.scustId;
}
- (LoginAckBuilder*) setScustId:(NSString*) value {
  resultLoginAck.hasScustId = YES;
  resultLoginAck.scustId = value;
  return self;
}
- (LoginAckBuilder*) clearScustId {
  resultLoginAck.hasScustId = NO;
  resultLoginAck.scustId = @"";
  return self;
}
- (BOOL) hasNRet {
  return resultLoginAck.hasNRet;
}
- (ResultCode) nRet {
  return resultLoginAck.nRet;
}
- (LoginAckBuilder*) setNRet:(ResultCode) value {
  resultLoginAck.hasNRet = YES;
  resultLoginAck.nRet = value;
  return self;
}
- (LoginAckBuilder*) clearNRet {
  resultLoginAck.hasNRet = NO;
  resultLoginAck.nRet = ResultCodeNoError;
  return self;
}
@end

@interface LogoutReq ()
@property (strong) NSString* sCustId;
@property UInt32 nDeviceType;
@end

@implementation LogoutReq

- (BOOL) hasSCustId {
  return !!hasSCustId_;
}
- (void) setHasSCustId:(BOOL) _value_ {
  hasSCustId_ = !!_value_;
}
@synthesize sCustId;
- (BOOL) hasNDeviceType {
  return !!hasNDeviceType_;
}
- (void) setHasNDeviceType:(BOOL) _value_ {
  hasNDeviceType_ = !!_value_;
}
@synthesize nDeviceType;
- (instancetype) init {
  if ((self = [super init])) {
    self.sCustId = @"";
    self.nDeviceType = 0;
  }
  return self;
}
static LogoutReq* defaultLogoutReqInstance = nil;
+ (void) initialize {
  if (self == [LogoutReq class]) {
    defaultLogoutReqInstance = [[LogoutReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLogoutReqInstance;
}
- (instancetype) defaultInstance {
  return defaultLogoutReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSCustId) {
    return NO;
  }
  if (!self.hasNDeviceType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSCustId) {
    [output writeString:1 value:self.sCustId];
  }
  if (self.hasNDeviceType) {
    [output writeUInt32:2 value:self.nDeviceType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSCustId) {
    size_ += computeStringSize(1, self.sCustId);
  }
  if (self.hasNDeviceType) {
    size_ += computeUInt32Size(2, self.nDeviceType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LogoutReq*) parseFromData:(NSData*) data {
  return (LogoutReq*)[[[LogoutReq builder] mergeFromData:data] build];
}
+ (LogoutReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogoutReq*)[[[LogoutReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LogoutReq*) parseFromInputStream:(NSInputStream*) input {
  return (LogoutReq*)[[[LogoutReq builder] mergeFromInputStream:input] build];
}
+ (LogoutReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogoutReq*)[[[LogoutReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogoutReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LogoutReq*)[[[LogoutReq builder] mergeFromCodedInputStream:input] build];
}
+ (LogoutReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogoutReq*)[[[LogoutReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogoutReqBuilder*) builder {
  return [[LogoutReqBuilder alloc] init];
}
+ (LogoutReqBuilder*) builderWithPrototype:(LogoutReq*) prototype {
  return [[LogoutReq builder] mergeFrom:prototype];
}
- (LogoutReqBuilder*) builder {
  return [LogoutReq builder];
}
- (LogoutReqBuilder*) toBuilder {
  return [LogoutReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSCustId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sCustId", self.sCustId];
  }
  if (self.hasNDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nDeviceType", [NSNumber numberWithInteger:self.nDeviceType]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSCustId) {
    [dictionary setObject: self.sCustId forKey: @"sCustId"];
  }
  if (self.hasNDeviceType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nDeviceType] forKey: @"nDeviceType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LogoutReq class]]) {
    return NO;
  }
  LogoutReq *otherMessage = other;
  return
      self.hasSCustId == otherMessage.hasSCustId &&
      (!self.hasSCustId || [self.sCustId isEqual:otherMessage.sCustId]) &&
      self.hasNDeviceType == otherMessage.hasNDeviceType &&
      (!self.hasNDeviceType || self.nDeviceType == otherMessage.nDeviceType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSCustId) {
    hashCode = hashCode * 31 + [self.sCustId hash];
  }
  if (self.hasNDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nDeviceType] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LogoutReqBuilder()
@property (strong) LogoutReq* resultLogoutReq;
@end

@implementation LogoutReqBuilder
@synthesize resultLogoutReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogoutReq = [[LogoutReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogoutReq;
}
- (LogoutReqBuilder*) clear {
  self.resultLogoutReq = [[LogoutReq alloc] init];
  return self;
}
- (LogoutReqBuilder*) clone {
  return [LogoutReq builderWithPrototype:resultLogoutReq];
}
- (LogoutReq*) defaultInstance {
  return [LogoutReq defaultInstance];
}
- (LogoutReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LogoutReq*) buildPartial {
  LogoutReq* returnMe = resultLogoutReq;
  self.resultLogoutReq = nil;
  return returnMe;
}
- (LogoutReqBuilder*) mergeFrom:(LogoutReq*) other {
  if (other == [LogoutReq defaultInstance]) {
    return self;
  }
  if (other.hasSCustId) {
    [self setSCustId:other.sCustId];
  }
  if (other.hasNDeviceType) {
    [self setNDeviceType:other.nDeviceType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LogoutReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LogoutReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSCustId:[input readString]];
        break;
      }
      case 16: {
        [self setNDeviceType:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSCustId {
  return resultLogoutReq.hasSCustId;
}
- (NSString*) sCustId {
  return resultLogoutReq.sCustId;
}
- (LogoutReqBuilder*) setSCustId:(NSString*) value {
  resultLogoutReq.hasSCustId = YES;
  resultLogoutReq.sCustId = value;
  return self;
}
- (LogoutReqBuilder*) clearSCustId {
  resultLogoutReq.hasSCustId = NO;
  resultLogoutReq.sCustId = @"";
  return self;
}
- (BOOL) hasNDeviceType {
  return resultLogoutReq.hasNDeviceType;
}
- (UInt32) nDeviceType {
  return resultLogoutReq.nDeviceType;
}
- (LogoutReqBuilder*) setNDeviceType:(UInt32) value {
  resultLogoutReq.hasNDeviceType = YES;
  resultLogoutReq.nDeviceType = value;
  return self;
}
- (LogoutReqBuilder*) clearNDeviceType {
  resultLogoutReq.hasNDeviceType = NO;
  resultLogoutReq.nDeviceType = 0;
  return self;
}
@end

@interface LogoutAck ()
@property ResultCode nRet;
@end

@implementation LogoutAck

- (BOOL) hasNRet {
  return !!hasNRet_;
}
- (void) setHasNRet:(BOOL) _value_ {
  hasNRet_ = !!_value_;
}
@synthesize nRet;
- (instancetype) init {
  if ((self = [super init])) {
    self.nRet = ResultCodeNoError;
  }
  return self;
}
static LogoutAck* defaultLogoutAckInstance = nil;
+ (void) initialize {
  if (self == [LogoutAck class]) {
    defaultLogoutAckInstance = [[LogoutAck alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLogoutAckInstance;
}
- (instancetype) defaultInstance {
  return defaultLogoutAckInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNRet) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNRet) {
    [output writeEnum:1 value:self.nRet];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNRet) {
    size_ += computeEnumSize(1, self.nRet);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LogoutAck*) parseFromData:(NSData*) data {
  return (LogoutAck*)[[[LogoutAck builder] mergeFromData:data] build];
}
+ (LogoutAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogoutAck*)[[[LogoutAck builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LogoutAck*) parseFromInputStream:(NSInputStream*) input {
  return (LogoutAck*)[[[LogoutAck builder] mergeFromInputStream:input] build];
}
+ (LogoutAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogoutAck*)[[[LogoutAck builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogoutAck*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LogoutAck*)[[[LogoutAck builder] mergeFromCodedInputStream:input] build];
}
+ (LogoutAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogoutAck*)[[[LogoutAck builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogoutAckBuilder*) builder {
  return [[LogoutAckBuilder alloc] init];
}
+ (LogoutAckBuilder*) builderWithPrototype:(LogoutAck*) prototype {
  return [[LogoutAck builder] mergeFrom:prototype];
}
- (LogoutAckBuilder*) builder {
  return [LogoutAck builder];
}
- (LogoutAckBuilder*) toBuilder {
  return [LogoutAck builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNRet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nRet", NSStringFromResultCode(self.nRet)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNRet) {
    [dictionary setObject: @(self.nRet) forKey: @"nRet"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LogoutAck class]]) {
    return NO;
  }
  LogoutAck *otherMessage = other;
  return
      self.hasNRet == otherMessage.hasNRet &&
      (!self.hasNRet || self.nRet == otherMessage.nRet) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNRet) {
    hashCode = hashCode * 31 + self.nRet;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LogoutAckBuilder()
@property (strong) LogoutAck* resultLogoutAck;
@end

@implementation LogoutAckBuilder
@synthesize resultLogoutAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogoutAck = [[LogoutAck alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogoutAck;
}
- (LogoutAckBuilder*) clear {
  self.resultLogoutAck = [[LogoutAck alloc] init];
  return self;
}
- (LogoutAckBuilder*) clone {
  return [LogoutAck builderWithPrototype:resultLogoutAck];
}
- (LogoutAck*) defaultInstance {
  return [LogoutAck defaultInstance];
}
- (LogoutAck*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LogoutAck*) buildPartial {
  LogoutAck* returnMe = resultLogoutAck;
  self.resultLogoutAck = nil;
  return returnMe;
}
- (LogoutAckBuilder*) mergeFrom:(LogoutAck*) other {
  if (other == [LogoutAck defaultInstance]) {
    return self;
  }
  if (other.hasNRet) {
    [self setNRet:other.nRet];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LogoutAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LogoutAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setNRet:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasNRet {
  return resultLogoutAck.hasNRet;
}
- (ResultCode) nRet {
  return resultLogoutAck.nRet;
}
- (LogoutAckBuilder*) setNRet:(ResultCode) value {
  resultLogoutAck.hasNRet = YES;
  resultLogoutAck.nRet = value;
  return self;
}
- (LogoutAckBuilder*) clearNRet {
  resultLogoutAck.hasNRet = NO;
  resultLogoutAck.nRet = ResultCodeNoError;
  return self;
}
@end

@interface KickoutNotify ()
@property (strong) NSString* sCustId;
@property UInt32 nDeviceType;
@property (strong) NSString* ip;
@property UInt32 port;
@end

@implementation KickoutNotify

- (BOOL) hasSCustId {
  return !!hasSCustId_;
}
- (void) setHasSCustId:(BOOL) _value_ {
  hasSCustId_ = !!_value_;
}
@synthesize sCustId;
- (BOOL) hasNDeviceType {
  return !!hasNDeviceType_;
}
- (void) setHasNDeviceType:(BOOL) _value_ {
  hasNDeviceType_ = !!_value_;
}
@synthesize nDeviceType;
- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) _value_ {
  hasIp_ = !!_value_;
}
@synthesize ip;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) _value_ {
  hasPort_ = !!_value_;
}
@synthesize port;
- (instancetype) init {
  if ((self = [super init])) {
    self.sCustId = @"";
    self.nDeviceType = 0;
    self.ip = @"";
    self.port = 0;
  }
  return self;
}
static KickoutNotify* defaultKickoutNotifyInstance = nil;
+ (void) initialize {
  if (self == [KickoutNotify class]) {
    defaultKickoutNotifyInstance = [[KickoutNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultKickoutNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultKickoutNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSCustId) {
    return NO;
  }
  if (!self.hasNDeviceType) {
    return NO;
  }
  if (!self.hasIp) {
    return NO;
  }
  if (!self.hasPort) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSCustId) {
    [output writeString:1 value:self.sCustId];
  }
  if (self.hasNDeviceType) {
    [output writeUInt32:2 value:self.nDeviceType];
  }
  if (self.hasIp) {
    [output writeString:3 value:self.ip];
  }
  if (self.hasPort) {
    [output writeUInt32:4 value:self.port];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSCustId) {
    size_ += computeStringSize(1, self.sCustId);
  }
  if (self.hasNDeviceType) {
    size_ += computeUInt32Size(2, self.nDeviceType);
  }
  if (self.hasIp) {
    size_ += computeStringSize(3, self.ip);
  }
  if (self.hasPort) {
    size_ += computeUInt32Size(4, self.port);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (KickoutNotify*) parseFromData:(NSData*) data {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromData:data] build];
}
+ (KickoutNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KickoutNotify*) parseFromInputStream:(NSInputStream*) input {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromInputStream:input] build];
}
+ (KickoutNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KickoutNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromCodedInputStream:input] build];
}
+ (KickoutNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickoutNotify*)[[[KickoutNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KickoutNotifyBuilder*) builder {
  return [[KickoutNotifyBuilder alloc] init];
}
+ (KickoutNotifyBuilder*) builderWithPrototype:(KickoutNotify*) prototype {
  return [[KickoutNotify builder] mergeFrom:prototype];
}
- (KickoutNotifyBuilder*) builder {
  return [KickoutNotify builder];
}
- (KickoutNotifyBuilder*) toBuilder {
  return [KickoutNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSCustId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sCustId", self.sCustId];
  }
  if (self.hasNDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nDeviceType", [NSNumber numberWithInteger:self.nDeviceType]];
  }
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSCustId) {
    [dictionary setObject: self.sCustId forKey: @"sCustId"];
  }
  if (self.hasNDeviceType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nDeviceType] forKey: @"nDeviceType"];
  }
  if (self.hasIp) {
    [dictionary setObject: self.ip forKey: @"ip"];
  }
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.port] forKey: @"port"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KickoutNotify class]]) {
    return NO;
  }
  KickoutNotify *otherMessage = other;
  return
      self.hasSCustId == otherMessage.hasSCustId &&
      (!self.hasSCustId || [self.sCustId isEqual:otherMessage.sCustId]) &&
      self.hasNDeviceType == otherMessage.hasNDeviceType &&
      (!self.hasNDeviceType || self.nDeviceType == otherMessage.nDeviceType) &&
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSCustId) {
    hashCode = hashCode * 31 + [self.sCustId hash];
  }
  if (self.hasNDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nDeviceType] hash];
  }
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KickoutNotifyBuilder()
@property (strong) KickoutNotify* resultKickoutNotify;
@end

@implementation KickoutNotifyBuilder
@synthesize resultKickoutNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultKickoutNotify = [[KickoutNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultKickoutNotify;
}
- (KickoutNotifyBuilder*) clear {
  self.resultKickoutNotify = [[KickoutNotify alloc] init];
  return self;
}
- (KickoutNotifyBuilder*) clone {
  return [KickoutNotify builderWithPrototype:resultKickoutNotify];
}
- (KickoutNotify*) defaultInstance {
  return [KickoutNotify defaultInstance];
}
- (KickoutNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KickoutNotify*) buildPartial {
  KickoutNotify* returnMe = resultKickoutNotify;
  self.resultKickoutNotify = nil;
  return returnMe;
}
- (KickoutNotifyBuilder*) mergeFrom:(KickoutNotify*) other {
  if (other == [KickoutNotify defaultInstance]) {
    return self;
  }
  if (other.hasSCustId) {
    [self setSCustId:other.sCustId];
  }
  if (other.hasNDeviceType) {
    [self setNDeviceType:other.nDeviceType];
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KickoutNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KickoutNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSCustId:[input readString]];
        break;
      }
      case 16: {
        [self setNDeviceType:[input readUInt32]];
        break;
      }
      case 26: {
        [self setIp:[input readString]];
        break;
      }
      case 32: {
        [self setPort:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSCustId {
  return resultKickoutNotify.hasSCustId;
}
- (NSString*) sCustId {
  return resultKickoutNotify.sCustId;
}
- (KickoutNotifyBuilder*) setSCustId:(NSString*) value {
  resultKickoutNotify.hasSCustId = YES;
  resultKickoutNotify.sCustId = value;
  return self;
}
- (KickoutNotifyBuilder*) clearSCustId {
  resultKickoutNotify.hasSCustId = NO;
  resultKickoutNotify.sCustId = @"";
  return self;
}
- (BOOL) hasNDeviceType {
  return resultKickoutNotify.hasNDeviceType;
}
- (UInt32) nDeviceType {
  return resultKickoutNotify.nDeviceType;
}
- (KickoutNotifyBuilder*) setNDeviceType:(UInt32) value {
  resultKickoutNotify.hasNDeviceType = YES;
  resultKickoutNotify.nDeviceType = value;
  return self;
}
- (KickoutNotifyBuilder*) clearNDeviceType {
  resultKickoutNotify.hasNDeviceType = NO;
  resultKickoutNotify.nDeviceType = 0;
  return self;
}
- (BOOL) hasIp {
  return resultKickoutNotify.hasIp;
}
- (NSString*) ip {
  return resultKickoutNotify.ip;
}
- (KickoutNotifyBuilder*) setIp:(NSString*) value {
  resultKickoutNotify.hasIp = YES;
  resultKickoutNotify.ip = value;
  return self;
}
- (KickoutNotifyBuilder*) clearIp {
  resultKickoutNotify.hasIp = NO;
  resultKickoutNotify.ip = @"";
  return self;
}
- (BOOL) hasPort {
  return resultKickoutNotify.hasPort;
}
- (UInt32) port {
  return resultKickoutNotify.port;
}
- (KickoutNotifyBuilder*) setPort:(UInt32) value {
  resultKickoutNotify.hasPort = YES;
  resultKickoutNotify.port = value;
  return self;
}
- (KickoutNotifyBuilder*) clearPort {
  resultKickoutNotify.hasPort = NO;
  resultKickoutNotify.port = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
