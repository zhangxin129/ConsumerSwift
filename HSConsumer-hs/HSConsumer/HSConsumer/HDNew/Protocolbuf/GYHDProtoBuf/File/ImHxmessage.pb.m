// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ImHxmessage.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImHxmessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImHxmessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImHxcommonRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ChatMsg ()
@property (strong) NSString* msgid;
@property (strong) NSString* guid;
@property (strong) NSString* fromid;
@property (strong) NSString* toid;
@property (strong) NSString* sessiontype;
@property (strong) NSString* msgtype;
@property UInt64 sendtime;
@property (strong) NSString* content;
@property (strong) NSString* contenttype;
@property BOOL isreaded;
@property SInt32 color;
@end

@implementation ChatMsg

- (BOOL) hasMsgid {
  return !!hasMsgid_;
}
- (void) setHasMsgid:(BOOL) _value_ {
  hasMsgid_ = !!_value_;
}
@synthesize msgid;
- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) _value_ {
  hasGuid_ = !!_value_;
}
@synthesize guid;
- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasToid {
  return !!hasToid_;
}
- (void) setHasToid:(BOOL) _value_ {
  hasToid_ = !!_value_;
}
@synthesize toid;
- (BOOL) hasSessiontype {
  return !!hasSessiontype_;
}
- (void) setHasSessiontype:(BOOL) _value_ {
  hasSessiontype_ = !!_value_;
}
@synthesize sessiontype;
- (BOOL) hasMsgtype {
  return !!hasMsgtype_;
}
- (void) setHasMsgtype:(BOOL) _value_ {
  hasMsgtype_ = !!_value_;
}
@synthesize msgtype;
- (BOOL) hasSendtime {
  return !!hasSendtime_;
}
- (void) setHasSendtime:(BOOL) _value_ {
  hasSendtime_ = !!_value_;
}
@synthesize sendtime;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasContenttype {
  return !!hasContenttype_;
}
- (void) setHasContenttype:(BOOL) _value_ {
  hasContenttype_ = !!_value_;
}
@synthesize contenttype;
- (BOOL) hasIsreaded {
  return !!hasIsreaded_;
}
- (void) setHasIsreaded:(BOOL) _value_ {
  hasIsreaded_ = !!_value_;
}
- (BOOL) isreaded {
  return !!isreaded_;
}
- (void) setIsreaded:(BOOL) _value_ {
  isreaded_ = !!_value_;
}
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (instancetype) init {
  if ((self = [super init])) {
    self.msgid = @"";
    self.guid = @"";
    self.fromid = @"";
    self.toid = @"";
    self.sessiontype = @"";
    self.msgtype = @"";
    self.sendtime = 0L;
    self.content = @"";
    self.contenttype = @"";
    self.isreaded = NO;
    self.color = 0;
  }
  return self;
}
static ChatMsg* defaultChatMsgInstance = nil;
+ (void) initialize {
  if (self == [ChatMsg class]) {
    defaultChatMsgInstance = [[ChatMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultChatMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMsgid) {
    return NO;
  }
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasToid) {
    return NO;
  }
  if (!self.hasSessiontype) {
    return NO;
  }
  if (!self.hasMsgtype) {
    return NO;
  }
  if (!self.hasSendtime) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.hasContenttype) {
    return NO;
  }
  if (!self.hasIsreaded) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsgid) {
    [output writeString:1 value:self.msgid];
  }
  if (self.hasGuid) {
    [output writeString:2 value:self.guid];
  }
  if (self.hasFromid) {
    [output writeString:3 value:self.fromid];
  }
  if (self.hasToid) {
    [output writeString:4 value:self.toid];
  }
  if (self.hasSessiontype) {
    [output writeString:5 value:self.sessiontype];
  }
  if (self.hasMsgtype) {
    [output writeString:6 value:self.msgtype];
  }
  if (self.hasSendtime) {
    [output writeUInt64:7 value:self.sendtime];
  }
  if (self.hasContent) {
    [output writeString:8 value:self.content];
  }
  if (self.hasContenttype) {
    [output writeString:9 value:self.contenttype];
  }
  if (self.hasIsreaded) {
    [output writeBool:10 value:self.isreaded];
  }
  if (self.hasColor) {
    [output writeInt32:11 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMsgid) {
    size_ += computeStringSize(1, self.msgid);
  }
  if (self.hasGuid) {
    size_ += computeStringSize(2, self.guid);
  }
  if (self.hasFromid) {
    size_ += computeStringSize(3, self.fromid);
  }
  if (self.hasToid) {
    size_ += computeStringSize(4, self.toid);
  }
  if (self.hasSessiontype) {
    size_ += computeStringSize(5, self.sessiontype);
  }
  if (self.hasMsgtype) {
    size_ += computeStringSize(6, self.msgtype);
  }
  if (self.hasSendtime) {
    size_ += computeUInt64Size(7, self.sendtime);
  }
  if (self.hasContent) {
    size_ += computeStringSize(8, self.content);
  }
  if (self.hasContenttype) {
    size_ += computeStringSize(9, self.contenttype);
  }
  if (self.hasIsreaded) {
    size_ += computeBoolSize(10, self.isreaded);
  }
  if (self.hasColor) {
    size_ += computeInt32Size(11, self.color);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatMsg*) parseFromData:(NSData*) data {
  return (ChatMsg*)[[[ChatMsg builder] mergeFromData:data] build];
}
+ (ChatMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsg*)[[[ChatMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMsg*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMsg*)[[[ChatMsg builder] mergeFromInputStream:input] build];
}
+ (ChatMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsg*)[[[ChatMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMsg*)[[[ChatMsg builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsg*)[[[ChatMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgBuilder*) builder {
  return [[ChatMsgBuilder alloc] init];
}
+ (ChatMsgBuilder*) builderWithPrototype:(ChatMsg*) prototype {
  return [[ChatMsg builder] mergeFrom:prototype];
}
- (ChatMsgBuilder*) builder {
  return [ChatMsg builder];
}
- (ChatMsgBuilder*) toBuilder {
  return [ChatMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMsgid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgid", self.msgid];
  }
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasToid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toid", self.toid];
  }
  if (self.hasSessiontype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessiontype", self.sessiontype];
  }
  if (self.hasMsgtype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgtype", self.msgtype];
  }
  if (self.hasSendtime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendtime", [NSNumber numberWithLongLong:self.sendtime]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasContenttype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contenttype", self.contenttype];
  }
  if (self.hasIsreaded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isreaded", [NSNumber numberWithBool:self.isreaded]];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", [NSNumber numberWithInteger:self.color]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMsgid) {
    [dictionary setObject: self.msgid forKey: @"msgid"];
  }
  if (self.hasGuid) {
    [dictionary setObject: self.guid forKey: @"guid"];
  }
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasToid) {
    [dictionary setObject: self.toid forKey: @"toid"];
  }
  if (self.hasSessiontype) {
    [dictionary setObject: self.sessiontype forKey: @"sessiontype"];
  }
  if (self.hasMsgtype) {
    [dictionary setObject: self.msgtype forKey: @"msgtype"];
  }
  if (self.hasSendtime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sendtime] forKey: @"sendtime"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasContenttype) {
    [dictionary setObject: self.contenttype forKey: @"contenttype"];
  }
  if (self.hasIsreaded) {
    [dictionary setObject: [NSNumber numberWithBool:self.isreaded] forKey: @"isreaded"];
  }
  if (self.hasColor) {
    [dictionary setObject: [NSNumber numberWithInteger:self.color] forKey: @"color"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatMsg class]]) {
    return NO;
  }
  ChatMsg *otherMessage = other;
  return
      self.hasMsgid == otherMessage.hasMsgid &&
      (!self.hasMsgid || [self.msgid isEqual:otherMessage.msgid]) &&
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasToid == otherMessage.hasToid &&
      (!self.hasToid || [self.toid isEqual:otherMessage.toid]) &&
      self.hasSessiontype == otherMessage.hasSessiontype &&
      (!self.hasSessiontype || [self.sessiontype isEqual:otherMessage.sessiontype]) &&
      self.hasMsgtype == otherMessage.hasMsgtype &&
      (!self.hasMsgtype || [self.msgtype isEqual:otherMessage.msgtype]) &&
      self.hasSendtime == otherMessage.hasSendtime &&
      (!self.hasSendtime || self.sendtime == otherMessage.sendtime) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasContenttype == otherMessage.hasContenttype &&
      (!self.hasContenttype || [self.contenttype isEqual:otherMessage.contenttype]) &&
      self.hasIsreaded == otherMessage.hasIsreaded &&
      (!self.hasIsreaded || self.isreaded == otherMessage.isreaded) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || self.color == otherMessage.color) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMsgid) {
    hashCode = hashCode * 31 + [self.msgid hash];
  }
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasToid) {
    hashCode = hashCode * 31 + [self.toid hash];
  }
  if (self.hasSessiontype) {
    hashCode = hashCode * 31 + [self.sessiontype hash];
  }
  if (self.hasMsgtype) {
    hashCode = hashCode * 31 + [self.msgtype hash];
  }
  if (self.hasSendtime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sendtime] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasContenttype) {
    hashCode = hashCode * 31 + [self.contenttype hash];
  }
  if (self.hasIsreaded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isreaded] hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.color] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatMsgBuilder()
@property (strong) ChatMsg* resultChatMsg;
@end

@implementation ChatMsgBuilder
@synthesize resultChatMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMsg = [[ChatMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMsg;
}
- (ChatMsgBuilder*) clear {
  self.resultChatMsg = [[ChatMsg alloc] init];
  return self;
}
- (ChatMsgBuilder*) clone {
  return [ChatMsg builderWithPrototype:resultChatMsg];
}
- (ChatMsg*) defaultInstance {
  return [ChatMsg defaultInstance];
}
- (ChatMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMsg*) buildPartial {
  ChatMsg* returnMe = resultChatMsg;
  self.resultChatMsg = nil;
  return returnMe;
}
- (ChatMsgBuilder*) mergeFrom:(ChatMsg*) other {
  if (other == [ChatMsg defaultInstance]) {
    return self;
  }
  if (other.hasMsgid) {
    [self setMsgid:other.msgid];
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasToid) {
    [self setToid:other.toid];
  }
  if (other.hasSessiontype) {
    [self setSessiontype:other.sessiontype];
  }
  if (other.hasMsgtype) {
    [self setMsgtype:other.msgtype];
  }
  if (other.hasSendtime) {
    [self setSendtime:other.sendtime];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasContenttype) {
    [self setContenttype:other.contenttype];
  }
  if (other.hasIsreaded) {
    [self setIsreaded:other.isreaded];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMsgid:[input readString]];
        break;
      }
      case 18: {
        [self setGuid:[input readString]];
        break;
      }
      case 26: {
        [self setFromid:[input readString]];
        break;
      }
      case 34: {
        [self setToid:[input readString]];
        break;
      }
      case 42: {
        [self setSessiontype:[input readString]];
        break;
      }
      case 50: {
        [self setMsgtype:[input readString]];
        break;
      }
      case 56: {
        [self setSendtime:[input readUInt64]];
        break;
      }
      case 66: {
        [self setContent:[input readString]];
        break;
      }
      case 74: {
        [self setContenttype:[input readString]];
        break;
      }
      case 80: {
        [self setIsreaded:[input readBool]];
        break;
      }
      case 88: {
        [self setColor:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMsgid {
  return resultChatMsg.hasMsgid;
}
- (NSString*) msgid {
  return resultChatMsg.msgid;
}
- (ChatMsgBuilder*) setMsgid:(NSString*) value {
  resultChatMsg.hasMsgid = YES;
  resultChatMsg.msgid = value;
  return self;
}
- (ChatMsgBuilder*) clearMsgid {
  resultChatMsg.hasMsgid = NO;
  resultChatMsg.msgid = @"";
  return self;
}
- (BOOL) hasGuid {
  return resultChatMsg.hasGuid;
}
- (NSString*) guid {
  return resultChatMsg.guid;
}
- (ChatMsgBuilder*) setGuid:(NSString*) value {
  resultChatMsg.hasGuid = YES;
  resultChatMsg.guid = value;
  return self;
}
- (ChatMsgBuilder*) clearGuid {
  resultChatMsg.hasGuid = NO;
  resultChatMsg.guid = @"";
  return self;
}
- (BOOL) hasFromid {
  return resultChatMsg.hasFromid;
}
- (NSString*) fromid {
  return resultChatMsg.fromid;
}
- (ChatMsgBuilder*) setFromid:(NSString*) value {
  resultChatMsg.hasFromid = YES;
  resultChatMsg.fromid = value;
  return self;
}
- (ChatMsgBuilder*) clearFromid {
  resultChatMsg.hasFromid = NO;
  resultChatMsg.fromid = @"";
  return self;
}
- (BOOL) hasToid {
  return resultChatMsg.hasToid;
}
- (NSString*) toid {
  return resultChatMsg.toid;
}
- (ChatMsgBuilder*) setToid:(NSString*) value {
  resultChatMsg.hasToid = YES;
  resultChatMsg.toid = value;
  return self;
}
- (ChatMsgBuilder*) clearToid {
  resultChatMsg.hasToid = NO;
  resultChatMsg.toid = @"";
  return self;
}
- (BOOL) hasSessiontype {
  return resultChatMsg.hasSessiontype;
}
- (NSString*) sessiontype {
  return resultChatMsg.sessiontype;
}
- (ChatMsgBuilder*) setSessiontype:(NSString*) value {
  resultChatMsg.hasSessiontype = YES;
  resultChatMsg.sessiontype = value;
  return self;
}
- (ChatMsgBuilder*) clearSessiontype {
  resultChatMsg.hasSessiontype = NO;
  resultChatMsg.sessiontype = @"";
  return self;
}
- (BOOL) hasMsgtype {
  return resultChatMsg.hasMsgtype;
}
- (NSString*) msgtype {
  return resultChatMsg.msgtype;
}
- (ChatMsgBuilder*) setMsgtype:(NSString*) value {
  resultChatMsg.hasMsgtype = YES;
  resultChatMsg.msgtype = value;
  return self;
}
- (ChatMsgBuilder*) clearMsgtype {
  resultChatMsg.hasMsgtype = NO;
  resultChatMsg.msgtype = @"";
  return self;
}
- (BOOL) hasSendtime {
  return resultChatMsg.hasSendtime;
}
- (UInt64) sendtime {
  return resultChatMsg.sendtime;
}
- (ChatMsgBuilder*) setSendtime:(UInt64) value {
  resultChatMsg.hasSendtime = YES;
  resultChatMsg.sendtime = value;
  return self;
}
- (ChatMsgBuilder*) clearSendtime {
  resultChatMsg.hasSendtime = NO;
  resultChatMsg.sendtime = 0L;
  return self;
}
- (BOOL) hasContent {
  return resultChatMsg.hasContent;
}
- (NSString*) content {
  return resultChatMsg.content;
}
- (ChatMsgBuilder*) setContent:(NSString*) value {
  resultChatMsg.hasContent = YES;
  resultChatMsg.content = value;
  return self;
}
- (ChatMsgBuilder*) clearContent {
  resultChatMsg.hasContent = NO;
  resultChatMsg.content = @"";
  return self;
}
- (BOOL) hasContenttype {
  return resultChatMsg.hasContenttype;
}
- (NSString*) contenttype {
  return resultChatMsg.contenttype;
}
- (ChatMsgBuilder*) setContenttype:(NSString*) value {
  resultChatMsg.hasContenttype = YES;
  resultChatMsg.contenttype = value;
  return self;
}
- (ChatMsgBuilder*) clearContenttype {
  resultChatMsg.hasContenttype = NO;
  resultChatMsg.contenttype = @"";
  return self;
}
- (BOOL) hasIsreaded {
  return resultChatMsg.hasIsreaded;
}
- (BOOL) isreaded {
  return resultChatMsg.isreaded;
}
- (ChatMsgBuilder*) setIsreaded:(BOOL) value {
  resultChatMsg.hasIsreaded = YES;
  resultChatMsg.isreaded = value;
  return self;
}
- (ChatMsgBuilder*) clearIsreaded {
  resultChatMsg.hasIsreaded = NO;
  resultChatMsg.isreaded = NO;
  return self;
}
- (BOOL) hasColor {
  return resultChatMsg.hasColor;
}
- (SInt32) color {
  return resultChatMsg.color;
}
- (ChatMsgBuilder*) setColor:(SInt32) value {
  resultChatMsg.hasColor = YES;
  resultChatMsg.color = value;
  return self;
}
- (ChatMsgBuilder*) clearColor {
  resultChatMsg.hasColor = NO;
  resultChatMsg.color = 0;
  return self;
}
@end

@interface ChatMsgRsp ()
@property (strong) NSString* userid;
@property (strong) NSString* guid;
@property ResultCode code;
@end

@implementation ChatMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) _value_ {
  hasGuid_ = !!_value_;
}
@synthesize guid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.guid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static ChatMsgRsp* defaultChatMsgRspInstance = nil;
+ (void) initialize {
  if (self == [ChatMsgRsp class]) {
    defaultChatMsgRspInstance = [[ChatMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultChatMsgRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasGuid) {
    [output writeString:2 value:self.guid];
  }
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasGuid) {
    size_ += computeStringSize(2, self.guid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatMsgRsp*) parseFromData:(NSData*) data {
  return (ChatMsgRsp*)[[[ChatMsgRsp builder] mergeFromData:data] build];
}
+ (ChatMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgRsp*)[[[ChatMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMsgRsp*)[[[ChatMsgRsp builder] mergeFromInputStream:input] build];
}
+ (ChatMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgRsp*)[[[ChatMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMsgRsp*)[[[ChatMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgRsp*)[[[ChatMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgRspBuilder*) builder {
  return [[ChatMsgRspBuilder alloc] init];
}
+ (ChatMsgRspBuilder*) builderWithPrototype:(ChatMsgRsp*) prototype {
  return [[ChatMsgRsp builder] mergeFrom:prototype];
}
- (ChatMsgRspBuilder*) builder {
  return [ChatMsgRsp builder];
}
- (ChatMsgRspBuilder*) toBuilder {
  return [ChatMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasGuid) {
    [dictionary setObject: self.guid forKey: @"guid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatMsgRsp class]]) {
    return NO;
  }
  ChatMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatMsgRspBuilder()
@property (strong) ChatMsgRsp* resultChatMsgRsp;
@end

@implementation ChatMsgRspBuilder
@synthesize resultChatMsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMsgRsp = [[ChatMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMsgRsp;
}
- (ChatMsgRspBuilder*) clear {
  self.resultChatMsgRsp = [[ChatMsgRsp alloc] init];
  return self;
}
- (ChatMsgRspBuilder*) clone {
  return [ChatMsgRsp builderWithPrototype:resultChatMsgRsp];
}
- (ChatMsgRsp*) defaultInstance {
  return [ChatMsgRsp defaultInstance];
}
- (ChatMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMsgRsp*) buildPartial {
  ChatMsgRsp* returnMe = resultChatMsgRsp;
  self.resultChatMsgRsp = nil;
  return returnMe;
}
- (ChatMsgRspBuilder*) mergeFrom:(ChatMsgRsp*) other {
  if (other == [ChatMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setGuid:[input readString]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultChatMsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultChatMsgRsp.userid;
}
- (ChatMsgRspBuilder*) setUserid:(NSString*) value {
  resultChatMsgRsp.hasUserid = YES;
  resultChatMsgRsp.userid = value;
  return self;
}
- (ChatMsgRspBuilder*) clearUserid {
  resultChatMsgRsp.hasUserid = NO;
  resultChatMsgRsp.userid = @"";
  return self;
}
- (BOOL) hasGuid {
  return resultChatMsgRsp.hasGuid;
}
- (NSString*) guid {
  return resultChatMsgRsp.guid;
}
- (ChatMsgRspBuilder*) setGuid:(NSString*) value {
  resultChatMsgRsp.hasGuid = YES;
  resultChatMsgRsp.guid = value;
  return self;
}
- (ChatMsgRspBuilder*) clearGuid {
  resultChatMsgRsp.hasGuid = NO;
  resultChatMsgRsp.guid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultChatMsgRsp.hasCode;
}
- (ResultCode) code {
  return resultChatMsgRsp.code;
}
- (ChatMsgRspBuilder*) setCode:(ResultCode) value {
  resultChatMsgRsp.hasCode = YES;
  resultChatMsgRsp.code = value;
  return self;
}
- (ChatMsgRspBuilder*) clearCode {
  resultChatMsgRsp.hasCode = NO;
  resultChatMsgRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface ChatMsgAckReq ()
@property (strong) NSString* userid;
@property (strong) NSString* msgid;
@end

@implementation ChatMsgAckReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasMsgid {
  return !!hasMsgid_;
}
- (void) setHasMsgid:(BOOL) _value_ {
  hasMsgid_ = !!_value_;
}
@synthesize msgid;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.msgid = @"";
  }
  return self;
}
static ChatMsgAckReq* defaultChatMsgAckReqInstance = nil;
+ (void) initialize {
  if (self == [ChatMsgAckReq class]) {
    defaultChatMsgAckReqInstance = [[ChatMsgAckReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatMsgAckReqInstance;
}
- (instancetype) defaultInstance {
  return defaultChatMsgAckReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasMsgid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasMsgid) {
    [output writeString:2 value:self.msgid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasMsgid) {
    size_ += computeStringSize(2, self.msgid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatMsgAckReq*) parseFromData:(NSData*) data {
  return (ChatMsgAckReq*)[[[ChatMsgAckReq builder] mergeFromData:data] build];
}
+ (ChatMsgAckReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgAckReq*)[[[ChatMsgAckReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgAckReq*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMsgAckReq*)[[[ChatMsgAckReq builder] mergeFromInputStream:input] build];
}
+ (ChatMsgAckReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgAckReq*)[[[ChatMsgAckReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgAckReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMsgAckReq*)[[[ChatMsgAckReq builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMsgAckReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgAckReq*)[[[ChatMsgAckReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgAckReqBuilder*) builder {
  return [[ChatMsgAckReqBuilder alloc] init];
}
+ (ChatMsgAckReqBuilder*) builderWithPrototype:(ChatMsgAckReq*) prototype {
  return [[ChatMsgAckReq builder] mergeFrom:prototype];
}
- (ChatMsgAckReqBuilder*) builder {
  return [ChatMsgAckReq builder];
}
- (ChatMsgAckReqBuilder*) toBuilder {
  return [ChatMsgAckReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasMsgid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgid", self.msgid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasMsgid) {
    [dictionary setObject: self.msgid forKey: @"msgid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatMsgAckReq class]]) {
    return NO;
  }
  ChatMsgAckReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasMsgid == otherMessage.hasMsgid &&
      (!self.hasMsgid || [self.msgid isEqual:otherMessage.msgid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasMsgid) {
    hashCode = hashCode * 31 + [self.msgid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatMsgAckReqBuilder()
@property (strong) ChatMsgAckReq* resultChatMsgAckReq;
@end

@implementation ChatMsgAckReqBuilder
@synthesize resultChatMsgAckReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMsgAckReq = [[ChatMsgAckReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMsgAckReq;
}
- (ChatMsgAckReqBuilder*) clear {
  self.resultChatMsgAckReq = [[ChatMsgAckReq alloc] init];
  return self;
}
- (ChatMsgAckReqBuilder*) clone {
  return [ChatMsgAckReq builderWithPrototype:resultChatMsgAckReq];
}
- (ChatMsgAckReq*) defaultInstance {
  return [ChatMsgAckReq defaultInstance];
}
- (ChatMsgAckReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMsgAckReq*) buildPartial {
  ChatMsgAckReq* returnMe = resultChatMsgAckReq;
  self.resultChatMsgAckReq = nil;
  return returnMe;
}
- (ChatMsgAckReqBuilder*) mergeFrom:(ChatMsgAckReq*) other {
  if (other == [ChatMsgAckReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasMsgid) {
    [self setMsgid:other.msgid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMsgAckReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMsgAckReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setMsgid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultChatMsgAckReq.hasUserid;
}
- (NSString*) userid {
  return resultChatMsgAckReq.userid;
}
- (ChatMsgAckReqBuilder*) setUserid:(NSString*) value {
  resultChatMsgAckReq.hasUserid = YES;
  resultChatMsgAckReq.userid = value;
  return self;
}
- (ChatMsgAckReqBuilder*) clearUserid {
  resultChatMsgAckReq.hasUserid = NO;
  resultChatMsgAckReq.userid = @"";
  return self;
}
- (BOOL) hasMsgid {
  return resultChatMsgAckReq.hasMsgid;
}
- (NSString*) msgid {
  return resultChatMsgAckReq.msgid;
}
- (ChatMsgAckReqBuilder*) setMsgid:(NSString*) value {
  resultChatMsgAckReq.hasMsgid = YES;
  resultChatMsgAckReq.msgid = value;
  return self;
}
- (ChatMsgAckReqBuilder*) clearMsgid {
  resultChatMsgAckReq.hasMsgid = NO;
  resultChatMsgAckReq.msgid = @"";
  return self;
}
@end

@interface ChatMsgAckRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation ChatMsgAckRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static ChatMsgAckRsp* defaultChatMsgAckRspInstance = nil;
+ (void) initialize {
  if (self == [ChatMsgAckRsp class]) {
    defaultChatMsgAckRspInstance = [[ChatMsgAckRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatMsgAckRspInstance;
}
- (instancetype) defaultInstance {
  return defaultChatMsgAckRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatMsgAckRsp*) parseFromData:(NSData*) data {
  return (ChatMsgAckRsp*)[[[ChatMsgAckRsp builder] mergeFromData:data] build];
}
+ (ChatMsgAckRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgAckRsp*)[[[ChatMsgAckRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgAckRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMsgAckRsp*)[[[ChatMsgAckRsp builder] mergeFromInputStream:input] build];
}
+ (ChatMsgAckRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgAckRsp*)[[[ChatMsgAckRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgAckRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMsgAckRsp*)[[[ChatMsgAckRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMsgAckRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgAckRsp*)[[[ChatMsgAckRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgAckRspBuilder*) builder {
  return [[ChatMsgAckRspBuilder alloc] init];
}
+ (ChatMsgAckRspBuilder*) builderWithPrototype:(ChatMsgAckRsp*) prototype {
  return [[ChatMsgAckRsp builder] mergeFrom:prototype];
}
- (ChatMsgAckRspBuilder*) builder {
  return [ChatMsgAckRsp builder];
}
- (ChatMsgAckRspBuilder*) toBuilder {
  return [ChatMsgAckRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatMsgAckRsp class]]) {
    return NO;
  }
  ChatMsgAckRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatMsgAckRspBuilder()
@property (strong) ChatMsgAckRsp* resultChatMsgAckRsp;
@end

@implementation ChatMsgAckRspBuilder
@synthesize resultChatMsgAckRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMsgAckRsp = [[ChatMsgAckRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMsgAckRsp;
}
- (ChatMsgAckRspBuilder*) clear {
  self.resultChatMsgAckRsp = [[ChatMsgAckRsp alloc] init];
  return self;
}
- (ChatMsgAckRspBuilder*) clone {
  return [ChatMsgAckRsp builderWithPrototype:resultChatMsgAckRsp];
}
- (ChatMsgAckRsp*) defaultInstance {
  return [ChatMsgAckRsp defaultInstance];
}
- (ChatMsgAckRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMsgAckRsp*) buildPartial {
  ChatMsgAckRsp* returnMe = resultChatMsgAckRsp;
  self.resultChatMsgAckRsp = nil;
  return returnMe;
}
- (ChatMsgAckRspBuilder*) mergeFrom:(ChatMsgAckRsp*) other {
  if (other == [ChatMsgAckRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMsgAckRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMsgAckRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultChatMsgAckRsp.hasUserid;
}
- (NSString*) userid {
  return resultChatMsgAckRsp.userid;
}
- (ChatMsgAckRspBuilder*) setUserid:(NSString*) value {
  resultChatMsgAckRsp.hasUserid = YES;
  resultChatMsgAckRsp.userid = value;
  return self;
}
- (ChatMsgAckRspBuilder*) clearUserid {
  resultChatMsgAckRsp.hasUserid = NO;
  resultChatMsgAckRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultChatMsgAckRsp.hasCode;
}
- (ResultCode) code {
  return resultChatMsgAckRsp.code;
}
- (ChatMsgAckRspBuilder*) setCode:(ResultCode) value {
  resultChatMsgAckRsp.hasCode = YES;
  resultChatMsgAckRsp.code = value;
  return self;
}
- (ChatMsgAckRspBuilder*) clearCode {
  resultChatMsgAckRsp.hasCode = NO;
  resultChatMsgAckRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface ChatMsgReadReq ()
@property (strong) NSString* userid;
@property (strong) NSString* msgid;
@end

@implementation ChatMsgReadReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasMsgid {
  return !!hasMsgid_;
}
- (void) setHasMsgid:(BOOL) _value_ {
  hasMsgid_ = !!_value_;
}
@synthesize msgid;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.msgid = @"";
  }
  return self;
}
static ChatMsgReadReq* defaultChatMsgReadReqInstance = nil;
+ (void) initialize {
  if (self == [ChatMsgReadReq class]) {
    defaultChatMsgReadReqInstance = [[ChatMsgReadReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatMsgReadReqInstance;
}
- (instancetype) defaultInstance {
  return defaultChatMsgReadReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasMsgid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasMsgid) {
    [output writeString:2 value:self.msgid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasMsgid) {
    size_ += computeStringSize(2, self.msgid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatMsgReadReq*) parseFromData:(NSData*) data {
  return (ChatMsgReadReq*)[[[ChatMsgReadReq builder] mergeFromData:data] build];
}
+ (ChatMsgReadReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgReadReq*)[[[ChatMsgReadReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgReadReq*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMsgReadReq*)[[[ChatMsgReadReq builder] mergeFromInputStream:input] build];
}
+ (ChatMsgReadReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgReadReq*)[[[ChatMsgReadReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgReadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMsgReadReq*)[[[ChatMsgReadReq builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMsgReadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgReadReq*)[[[ChatMsgReadReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgReadReqBuilder*) builder {
  return [[ChatMsgReadReqBuilder alloc] init];
}
+ (ChatMsgReadReqBuilder*) builderWithPrototype:(ChatMsgReadReq*) prototype {
  return [[ChatMsgReadReq builder] mergeFrom:prototype];
}
- (ChatMsgReadReqBuilder*) builder {
  return [ChatMsgReadReq builder];
}
- (ChatMsgReadReqBuilder*) toBuilder {
  return [ChatMsgReadReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasMsgid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgid", self.msgid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasMsgid) {
    [dictionary setObject: self.msgid forKey: @"msgid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatMsgReadReq class]]) {
    return NO;
  }
  ChatMsgReadReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasMsgid == otherMessage.hasMsgid &&
      (!self.hasMsgid || [self.msgid isEqual:otherMessage.msgid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasMsgid) {
    hashCode = hashCode * 31 + [self.msgid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatMsgReadReqBuilder()
@property (strong) ChatMsgReadReq* resultChatMsgReadReq;
@end

@implementation ChatMsgReadReqBuilder
@synthesize resultChatMsgReadReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMsgReadReq = [[ChatMsgReadReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMsgReadReq;
}
- (ChatMsgReadReqBuilder*) clear {
  self.resultChatMsgReadReq = [[ChatMsgReadReq alloc] init];
  return self;
}
- (ChatMsgReadReqBuilder*) clone {
  return [ChatMsgReadReq builderWithPrototype:resultChatMsgReadReq];
}
- (ChatMsgReadReq*) defaultInstance {
  return [ChatMsgReadReq defaultInstance];
}
- (ChatMsgReadReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMsgReadReq*) buildPartial {
  ChatMsgReadReq* returnMe = resultChatMsgReadReq;
  self.resultChatMsgReadReq = nil;
  return returnMe;
}
- (ChatMsgReadReqBuilder*) mergeFrom:(ChatMsgReadReq*) other {
  if (other == [ChatMsgReadReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasMsgid) {
    [self setMsgid:other.msgid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMsgReadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMsgReadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setMsgid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultChatMsgReadReq.hasUserid;
}
- (NSString*) userid {
  return resultChatMsgReadReq.userid;
}
- (ChatMsgReadReqBuilder*) setUserid:(NSString*) value {
  resultChatMsgReadReq.hasUserid = YES;
  resultChatMsgReadReq.userid = value;
  return self;
}
- (ChatMsgReadReqBuilder*) clearUserid {
  resultChatMsgReadReq.hasUserid = NO;
  resultChatMsgReadReq.userid = @"";
  return self;
}
- (BOOL) hasMsgid {
  return resultChatMsgReadReq.hasMsgid;
}
- (NSString*) msgid {
  return resultChatMsgReadReq.msgid;
}
- (ChatMsgReadReqBuilder*) setMsgid:(NSString*) value {
  resultChatMsgReadReq.hasMsgid = YES;
  resultChatMsgReadReq.msgid = value;
  return self;
}
- (ChatMsgReadReqBuilder*) clearMsgid {
  resultChatMsgReadReq.hasMsgid = NO;
  resultChatMsgReadReq.msgid = @"";
  return self;
}
@end

@interface ChatMsgReadRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation ChatMsgReadRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static ChatMsgReadRsp* defaultChatMsgReadRspInstance = nil;
+ (void) initialize {
  if (self == [ChatMsgReadRsp class]) {
    defaultChatMsgReadRspInstance = [[ChatMsgReadRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatMsgReadRspInstance;
}
- (instancetype) defaultInstance {
  return defaultChatMsgReadRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChatMsgReadRsp*) parseFromData:(NSData*) data {
  return (ChatMsgReadRsp*)[[[ChatMsgReadRsp builder] mergeFromData:data] build];
}
+ (ChatMsgReadRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgReadRsp*)[[[ChatMsgReadRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgReadRsp*) parseFromInputStream:(NSInputStream*) input {
  return (ChatMsgReadRsp*)[[[ChatMsgReadRsp builder] mergeFromInputStream:input] build];
}
+ (ChatMsgReadRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgReadRsp*)[[[ChatMsgReadRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgReadRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChatMsgReadRsp*)[[[ChatMsgReadRsp builder] mergeFromCodedInputStream:input] build];
}
+ (ChatMsgReadRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChatMsgReadRsp*)[[[ChatMsgReadRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatMsgReadRspBuilder*) builder {
  return [[ChatMsgReadRspBuilder alloc] init];
}
+ (ChatMsgReadRspBuilder*) builderWithPrototype:(ChatMsgReadRsp*) prototype {
  return [[ChatMsgReadRsp builder] mergeFrom:prototype];
}
- (ChatMsgReadRspBuilder*) builder {
  return [ChatMsgReadRsp builder];
}
- (ChatMsgReadRspBuilder*) toBuilder {
  return [ChatMsgReadRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChatMsgReadRsp class]]) {
    return NO;
  }
  ChatMsgReadRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatMsgReadRspBuilder()
@property (strong) ChatMsgReadRsp* resultChatMsgReadRsp;
@end

@implementation ChatMsgReadRspBuilder
@synthesize resultChatMsgReadRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatMsgReadRsp = [[ChatMsgReadRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatMsgReadRsp;
}
- (ChatMsgReadRspBuilder*) clear {
  self.resultChatMsgReadRsp = [[ChatMsgReadRsp alloc] init];
  return self;
}
- (ChatMsgReadRspBuilder*) clone {
  return [ChatMsgReadRsp builderWithPrototype:resultChatMsgReadRsp];
}
- (ChatMsgReadRsp*) defaultInstance {
  return [ChatMsgReadRsp defaultInstance];
}
- (ChatMsgReadRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChatMsgReadRsp*) buildPartial {
  ChatMsgReadRsp* returnMe = resultChatMsgReadRsp;
  self.resultChatMsgReadRsp = nil;
  return returnMe;
}
- (ChatMsgReadRspBuilder*) mergeFrom:(ChatMsgReadRsp*) other {
  if (other == [ChatMsgReadRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatMsgReadRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatMsgReadRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultChatMsgReadRsp.hasUserid;
}
- (NSString*) userid {
  return resultChatMsgReadRsp.userid;
}
- (ChatMsgReadRspBuilder*) setUserid:(NSString*) value {
  resultChatMsgReadRsp.hasUserid = YES;
  resultChatMsgReadRsp.userid = value;
  return self;
}
- (ChatMsgReadRspBuilder*) clearUserid {
  resultChatMsgReadRsp.hasUserid = NO;
  resultChatMsgReadRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultChatMsgReadRsp.hasCode;
}
- (ResultCode) code {
  return resultChatMsgReadRsp.code;
}
- (ChatMsgReadRspBuilder*) setCode:(ResultCode) value {
  resultChatMsgReadRsp.hasCode = YES;
  resultChatMsgReadRsp.code = value;
  return self;
}
- (ChatMsgReadRspBuilder*) clearCode {
  resultChatMsgReadRsp.hasCode = NO;
  resultChatMsgReadRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface OfflineMsgSum ()
@property (strong) NSString* category;
@property (strong) NSString* fromid;
@property (strong) NSString* toid;
@property SInt32 unreadedcnt;
@property (strong) NSString* lastcontent;
@property UInt64 lastupdate;
@end

@implementation OfflineMsgSum

- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasToid {
  return !!hasToid_;
}
- (void) setHasToid:(BOOL) _value_ {
  hasToid_ = !!_value_;
}
@synthesize toid;
- (BOOL) hasUnreadedcnt {
  return !!hasUnreadedcnt_;
}
- (void) setHasUnreadedcnt:(BOOL) _value_ {
  hasUnreadedcnt_ = !!_value_;
}
@synthesize unreadedcnt;
- (BOOL) hasLastcontent {
  return !!hasLastcontent_;
}
- (void) setHasLastcontent:(BOOL) _value_ {
  hasLastcontent_ = !!_value_;
}
@synthesize lastcontent;
- (BOOL) hasLastupdate {
  return !!hasLastupdate_;
}
- (void) setHasLastupdate:(BOOL) _value_ {
  hasLastupdate_ = !!_value_;
}
@synthesize lastupdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.category = @"";
    self.fromid = @"";
    self.toid = @"";
    self.unreadedcnt = 0;
    self.lastcontent = @"";
    self.lastupdate = 0L;
  }
  return self;
}
static OfflineMsgSum* defaultOfflineMsgSumInstance = nil;
+ (void) initialize {
  if (self == [OfflineMsgSum class]) {
    defaultOfflineMsgSumInstance = [[OfflineMsgSum alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOfflineMsgSumInstance;
}
- (instancetype) defaultInstance {
  return defaultOfflineMsgSumInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCategory) {
    return NO;
  }
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasToid) {
    return NO;
  }
  if (!self.hasUnreadedcnt) {
    return NO;
  }
  if (!self.hasLastcontent) {
    return NO;
  }
  if (!self.hasLastupdate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategory) {
    [output writeString:1 value:self.category];
  }
  if (self.hasFromid) {
    [output writeString:2 value:self.fromid];
  }
  if (self.hasToid) {
    [output writeString:3 value:self.toid];
  }
  if (self.hasUnreadedcnt) {
    [output writeInt32:4 value:self.unreadedcnt];
  }
  if (self.hasLastcontent) {
    [output writeString:5 value:self.lastcontent];
  }
  if (self.hasLastupdate) {
    [output writeUInt64:6 value:self.lastupdate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCategory) {
    size_ += computeStringSize(1, self.category);
  }
  if (self.hasFromid) {
    size_ += computeStringSize(2, self.fromid);
  }
  if (self.hasToid) {
    size_ += computeStringSize(3, self.toid);
  }
  if (self.hasUnreadedcnt) {
    size_ += computeInt32Size(4, self.unreadedcnt);
  }
  if (self.hasLastcontent) {
    size_ += computeStringSize(5, self.lastcontent);
  }
  if (self.hasLastupdate) {
    size_ += computeUInt64Size(6, self.lastupdate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OfflineMsgSum*) parseFromData:(NSData*) data {
  return (OfflineMsgSum*)[[[OfflineMsgSum builder] mergeFromData:data] build];
}
+ (OfflineMsgSum*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSum*)[[[OfflineMsgSum builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSum*) parseFromInputStream:(NSInputStream*) input {
  return (OfflineMsgSum*)[[[OfflineMsgSum builder] mergeFromInputStream:input] build];
}
+ (OfflineMsgSum*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSum*)[[[OfflineMsgSum builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSum*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OfflineMsgSum*)[[[OfflineMsgSum builder] mergeFromCodedInputStream:input] build];
}
+ (OfflineMsgSum*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSum*)[[[OfflineMsgSum builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumBuilder*) builder {
  return [[OfflineMsgSumBuilder alloc] init];
}
+ (OfflineMsgSumBuilder*) builderWithPrototype:(OfflineMsgSum*) prototype {
  return [[OfflineMsgSum builder] mergeFrom:prototype];
}
- (OfflineMsgSumBuilder*) builder {
  return [OfflineMsgSum builder];
}
- (OfflineMsgSumBuilder*) toBuilder {
  return [OfflineMsgSum builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", self.category];
  }
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasToid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toid", self.toid];
  }
  if (self.hasUnreadedcnt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unreadedcnt", [NSNumber numberWithInteger:self.unreadedcnt]];
  }
  if (self.hasLastcontent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastcontent", self.lastcontent];
  }
  if (self.hasLastupdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastupdate", [NSNumber numberWithLongLong:self.lastupdate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCategory) {
    [dictionary setObject: self.category forKey: @"category"];
  }
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasToid) {
    [dictionary setObject: self.toid forKey: @"toid"];
  }
  if (self.hasUnreadedcnt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.unreadedcnt] forKey: @"unreadedcnt"];
  }
  if (self.hasLastcontent) {
    [dictionary setObject: self.lastcontent forKey: @"lastcontent"];
  }
  if (self.hasLastupdate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastupdate] forKey: @"lastupdate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OfflineMsgSum class]]) {
    return NO;
  }
  OfflineMsgSum *otherMessage = other;
  return
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasToid == otherMessage.hasToid &&
      (!self.hasToid || [self.toid isEqual:otherMessage.toid]) &&
      self.hasUnreadedcnt == otherMessage.hasUnreadedcnt &&
      (!self.hasUnreadedcnt || self.unreadedcnt == otherMessage.unreadedcnt) &&
      self.hasLastcontent == otherMessage.hasLastcontent &&
      (!self.hasLastcontent || [self.lastcontent isEqual:otherMessage.lastcontent]) &&
      self.hasLastupdate == otherMessage.hasLastupdate &&
      (!self.hasLastupdate || self.lastupdate == otherMessage.lastupdate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasToid) {
    hashCode = hashCode * 31 + [self.toid hash];
  }
  if (self.hasUnreadedcnt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unreadedcnt] hash];
  }
  if (self.hasLastcontent) {
    hashCode = hashCode * 31 + [self.lastcontent hash];
  }
  if (self.hasLastupdate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastupdate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OfflineMsgSumBuilder()
@property (strong) OfflineMsgSum* resultOfflineMsgSum;
@end

@implementation OfflineMsgSumBuilder
@synthesize resultOfflineMsgSum;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOfflineMsgSum = [[OfflineMsgSum alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOfflineMsgSum;
}
- (OfflineMsgSumBuilder*) clear {
  self.resultOfflineMsgSum = [[OfflineMsgSum alloc] init];
  return self;
}
- (OfflineMsgSumBuilder*) clone {
  return [OfflineMsgSum builderWithPrototype:resultOfflineMsgSum];
}
- (OfflineMsgSum*) defaultInstance {
  return [OfflineMsgSum defaultInstance];
}
- (OfflineMsgSum*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OfflineMsgSum*) buildPartial {
  OfflineMsgSum* returnMe = resultOfflineMsgSum;
  self.resultOfflineMsgSum = nil;
  return returnMe;
}
- (OfflineMsgSumBuilder*) mergeFrom:(OfflineMsgSum*) other {
  if (other == [OfflineMsgSum defaultInstance]) {
    return self;
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasToid) {
    [self setToid:other.toid];
  }
  if (other.hasUnreadedcnt) {
    [self setUnreadedcnt:other.unreadedcnt];
  }
  if (other.hasLastcontent) {
    [self setLastcontent:other.lastcontent];
  }
  if (other.hasLastupdate) {
    [self setLastupdate:other.lastupdate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OfflineMsgSumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OfflineMsgSumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCategory:[input readString]];
        break;
      }
      case 18: {
        [self setFromid:[input readString]];
        break;
      }
      case 26: {
        [self setToid:[input readString]];
        break;
      }
      case 32: {
        [self setUnreadedcnt:[input readInt32]];
        break;
      }
      case 42: {
        [self setLastcontent:[input readString]];
        break;
      }
      case 48: {
        [self setLastupdate:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCategory {
  return resultOfflineMsgSum.hasCategory;
}
- (NSString*) category {
  return resultOfflineMsgSum.category;
}
- (OfflineMsgSumBuilder*) setCategory:(NSString*) value {
  resultOfflineMsgSum.hasCategory = YES;
  resultOfflineMsgSum.category = value;
  return self;
}
- (OfflineMsgSumBuilder*) clearCategory {
  resultOfflineMsgSum.hasCategory = NO;
  resultOfflineMsgSum.category = @"";
  return self;
}
- (BOOL) hasFromid {
  return resultOfflineMsgSum.hasFromid;
}
- (NSString*) fromid {
  return resultOfflineMsgSum.fromid;
}
- (OfflineMsgSumBuilder*) setFromid:(NSString*) value {
  resultOfflineMsgSum.hasFromid = YES;
  resultOfflineMsgSum.fromid = value;
  return self;
}
- (OfflineMsgSumBuilder*) clearFromid {
  resultOfflineMsgSum.hasFromid = NO;
  resultOfflineMsgSum.fromid = @"";
  return self;
}
- (BOOL) hasToid {
  return resultOfflineMsgSum.hasToid;
}
- (NSString*) toid {
  return resultOfflineMsgSum.toid;
}
- (OfflineMsgSumBuilder*) setToid:(NSString*) value {
  resultOfflineMsgSum.hasToid = YES;
  resultOfflineMsgSum.toid = value;
  return self;
}
- (OfflineMsgSumBuilder*) clearToid {
  resultOfflineMsgSum.hasToid = NO;
  resultOfflineMsgSum.toid = @"";
  return self;
}
- (BOOL) hasUnreadedcnt {
  return resultOfflineMsgSum.hasUnreadedcnt;
}
- (SInt32) unreadedcnt {
  return resultOfflineMsgSum.unreadedcnt;
}
- (OfflineMsgSumBuilder*) setUnreadedcnt:(SInt32) value {
  resultOfflineMsgSum.hasUnreadedcnt = YES;
  resultOfflineMsgSum.unreadedcnt = value;
  return self;
}
- (OfflineMsgSumBuilder*) clearUnreadedcnt {
  resultOfflineMsgSum.hasUnreadedcnt = NO;
  resultOfflineMsgSum.unreadedcnt = 0;
  return self;
}
- (BOOL) hasLastcontent {
  return resultOfflineMsgSum.hasLastcontent;
}
- (NSString*) lastcontent {
  return resultOfflineMsgSum.lastcontent;
}
- (OfflineMsgSumBuilder*) setLastcontent:(NSString*) value {
  resultOfflineMsgSum.hasLastcontent = YES;
  resultOfflineMsgSum.lastcontent = value;
  return self;
}
- (OfflineMsgSumBuilder*) clearLastcontent {
  resultOfflineMsgSum.hasLastcontent = NO;
  resultOfflineMsgSum.lastcontent = @"";
  return self;
}
- (BOOL) hasLastupdate {
  return resultOfflineMsgSum.hasLastupdate;
}
- (UInt64) lastupdate {
  return resultOfflineMsgSum.lastupdate;
}
- (OfflineMsgSumBuilder*) setLastupdate:(UInt64) value {
  resultOfflineMsgSum.hasLastupdate = YES;
  resultOfflineMsgSum.lastupdate = value;
  return self;
}
- (OfflineMsgSumBuilder*) clearLastupdate {
  resultOfflineMsgSum.hasLastupdate = NO;
  resultOfflineMsgSum.lastupdate = 0L;
  return self;
}
@end

@interface OfflineMsgSumReq ()
@property (strong) NSString* userid;
@end

@implementation OfflineMsgSumReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
  }
  return self;
}
static OfflineMsgSumReq* defaultOfflineMsgSumReqInstance = nil;
+ (void) initialize {
  if (self == [OfflineMsgSumReq class]) {
    defaultOfflineMsgSumReqInstance = [[OfflineMsgSumReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOfflineMsgSumReqInstance;
}
- (instancetype) defaultInstance {
  return defaultOfflineMsgSumReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OfflineMsgSumReq*) parseFromData:(NSData*) data {
  return (OfflineMsgSumReq*)[[[OfflineMsgSumReq builder] mergeFromData:data] build];
}
+ (OfflineMsgSumReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSumReq*)[[[OfflineMsgSumReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumReq*) parseFromInputStream:(NSInputStream*) input {
  return (OfflineMsgSumReq*)[[[OfflineMsgSumReq builder] mergeFromInputStream:input] build];
}
+ (OfflineMsgSumReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSumReq*)[[[OfflineMsgSumReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OfflineMsgSumReq*)[[[OfflineMsgSumReq builder] mergeFromCodedInputStream:input] build];
}
+ (OfflineMsgSumReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSumReq*)[[[OfflineMsgSumReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumReqBuilder*) builder {
  return [[OfflineMsgSumReqBuilder alloc] init];
}
+ (OfflineMsgSumReqBuilder*) builderWithPrototype:(OfflineMsgSumReq*) prototype {
  return [[OfflineMsgSumReq builder] mergeFrom:prototype];
}
- (OfflineMsgSumReqBuilder*) builder {
  return [OfflineMsgSumReq builder];
}
- (OfflineMsgSumReqBuilder*) toBuilder {
  return [OfflineMsgSumReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OfflineMsgSumReq class]]) {
    return NO;
  }
  OfflineMsgSumReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OfflineMsgSumReqBuilder()
@property (strong) OfflineMsgSumReq* resultOfflineMsgSumReq;
@end

@implementation OfflineMsgSumReqBuilder
@synthesize resultOfflineMsgSumReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOfflineMsgSumReq = [[OfflineMsgSumReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOfflineMsgSumReq;
}
- (OfflineMsgSumReqBuilder*) clear {
  self.resultOfflineMsgSumReq = [[OfflineMsgSumReq alloc] init];
  return self;
}
- (OfflineMsgSumReqBuilder*) clone {
  return [OfflineMsgSumReq builderWithPrototype:resultOfflineMsgSumReq];
}
- (OfflineMsgSumReq*) defaultInstance {
  return [OfflineMsgSumReq defaultInstance];
}
- (OfflineMsgSumReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OfflineMsgSumReq*) buildPartial {
  OfflineMsgSumReq* returnMe = resultOfflineMsgSumReq;
  self.resultOfflineMsgSumReq = nil;
  return returnMe;
}
- (OfflineMsgSumReqBuilder*) mergeFrom:(OfflineMsgSumReq*) other {
  if (other == [OfflineMsgSumReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OfflineMsgSumReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OfflineMsgSumReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultOfflineMsgSumReq.hasUserid;
}
- (NSString*) userid {
  return resultOfflineMsgSumReq.userid;
}
- (OfflineMsgSumReqBuilder*) setUserid:(NSString*) value {
  resultOfflineMsgSumReq.hasUserid = YES;
  resultOfflineMsgSumReq.userid = value;
  return self;
}
- (OfflineMsgSumReqBuilder*) clearUserid {
  resultOfflineMsgSumReq.hasUserid = NO;
  resultOfflineMsgSumReq.userid = @"";
  return self;
}
@end

@interface OfflineMsgSumRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@property (strong) NSMutableArray<OfflineMsgSum*> * summaryArray;
@end

@implementation OfflineMsgSumRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
@synthesize summaryArray;
@dynamic summary;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static OfflineMsgSumRsp* defaultOfflineMsgSumRspInstance = nil;
+ (void) initialize {
  if (self == [OfflineMsgSumRsp class]) {
    defaultOfflineMsgSumRspInstance = [[OfflineMsgSumRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOfflineMsgSumRspInstance;
}
- (instancetype) defaultInstance {
  return defaultOfflineMsgSumRspInstance;
}
- (NSArray<OfflineMsgSum*> *)summary {
  return summaryArray;
}
- (OfflineMsgSum*)summaryAtIndex:(NSUInteger)index {
  return [summaryArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  __block BOOL isInitsummary = YES;
   [self.summary enumerateObjectsUsingBlock:^(OfflineMsgSum *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsummary = NO;
      *stop = YES;
    }
  }];
  if (!isInitsummary) return isInitsummary;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.summaryArray enumerateObjectsUsingBlock:^(OfflineMsgSum *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  [self.summaryArray enumerateObjectsUsingBlock:^(OfflineMsgSum *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OfflineMsgSumRsp*) parseFromData:(NSData*) data {
  return (OfflineMsgSumRsp*)[[[OfflineMsgSumRsp builder] mergeFromData:data] build];
}
+ (OfflineMsgSumRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSumRsp*)[[[OfflineMsgSumRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumRsp*) parseFromInputStream:(NSInputStream*) input {
  return (OfflineMsgSumRsp*)[[[OfflineMsgSumRsp builder] mergeFromInputStream:input] build];
}
+ (OfflineMsgSumRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSumRsp*)[[[OfflineMsgSumRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OfflineMsgSumRsp*)[[[OfflineMsgSumRsp builder] mergeFromCodedInputStream:input] build];
}
+ (OfflineMsgSumRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgSumRsp*)[[[OfflineMsgSumRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgSumRspBuilder*) builder {
  return [[OfflineMsgSumRspBuilder alloc] init];
}
+ (OfflineMsgSumRspBuilder*) builderWithPrototype:(OfflineMsgSumRsp*) prototype {
  return [[OfflineMsgSumRsp builder] mergeFrom:prototype];
}
- (OfflineMsgSumRspBuilder*) builder {
  return [OfflineMsgSumRsp builder];
}
- (OfflineMsgSumRspBuilder*) toBuilder {
  return [OfflineMsgSumRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.summaryArray enumerateObjectsUsingBlock:^(OfflineMsgSum *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"summary"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  for (OfflineMsgSum* element in self.summaryArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"summary"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OfflineMsgSumRsp class]]) {
    return NO;
  }
  OfflineMsgSumRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      [self.summaryArray isEqualToArray:otherMessage.summaryArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  [self.summaryArray enumerateObjectsUsingBlock:^(OfflineMsgSum *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OfflineMsgSumRspBuilder()
@property (strong) OfflineMsgSumRsp* resultOfflineMsgSumRsp;
@end

@implementation OfflineMsgSumRspBuilder
@synthesize resultOfflineMsgSumRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOfflineMsgSumRsp = [[OfflineMsgSumRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOfflineMsgSumRsp;
}
- (OfflineMsgSumRspBuilder*) clear {
  self.resultOfflineMsgSumRsp = [[OfflineMsgSumRsp alloc] init];
  return self;
}
- (OfflineMsgSumRspBuilder*) clone {
  return [OfflineMsgSumRsp builderWithPrototype:resultOfflineMsgSumRsp];
}
- (OfflineMsgSumRsp*) defaultInstance {
  return [OfflineMsgSumRsp defaultInstance];
}
- (OfflineMsgSumRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OfflineMsgSumRsp*) buildPartial {
  OfflineMsgSumRsp* returnMe = resultOfflineMsgSumRsp;
  self.resultOfflineMsgSumRsp = nil;
  return returnMe;
}
- (OfflineMsgSumRspBuilder*) mergeFrom:(OfflineMsgSumRsp*) other {
  if (other == [OfflineMsgSumRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.summaryArray.count > 0) {
    if (resultOfflineMsgSumRsp.summaryArray == nil) {
      resultOfflineMsgSumRsp.summaryArray = [[NSMutableArray alloc] initWithArray:other.summaryArray];
    } else {
      [resultOfflineMsgSumRsp.summaryArray addObjectsFromArray:other.summaryArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OfflineMsgSumRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OfflineMsgSumRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        OfflineMsgSumBuilder* subBuilder = [OfflineMsgSum builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSummary:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultOfflineMsgSumRsp.hasUserid;
}
- (NSString*) userid {
  return resultOfflineMsgSumRsp.userid;
}
- (OfflineMsgSumRspBuilder*) setUserid:(NSString*) value {
  resultOfflineMsgSumRsp.hasUserid = YES;
  resultOfflineMsgSumRsp.userid = value;
  return self;
}
- (OfflineMsgSumRspBuilder*) clearUserid {
  resultOfflineMsgSumRsp.hasUserid = NO;
  resultOfflineMsgSumRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultOfflineMsgSumRsp.hasCode;
}
- (ResultCode) code {
  return resultOfflineMsgSumRsp.code;
}
- (OfflineMsgSumRspBuilder*) setCode:(ResultCode) value {
  resultOfflineMsgSumRsp.hasCode = YES;
  resultOfflineMsgSumRsp.code = value;
  return self;
}
- (OfflineMsgSumRspBuilder*) clearCode {
  resultOfflineMsgSumRsp.hasCode = NO;
  resultOfflineMsgSumRsp.code = ResultCodeNoError;
  return self;
}
- (NSMutableArray<OfflineMsgSum*> *)summary {
  return resultOfflineMsgSumRsp.summaryArray;
}
- (OfflineMsgSum*)summaryAtIndex:(NSUInteger)index {
  return [resultOfflineMsgSumRsp summaryAtIndex:index];
}
- (OfflineMsgSumRspBuilder *)addSummary:(OfflineMsgSum*)value {
  if (resultOfflineMsgSumRsp.summaryArray == nil) {
    resultOfflineMsgSumRsp.summaryArray = [[NSMutableArray alloc]init];
  }
  [resultOfflineMsgSumRsp.summaryArray addObject:value];
  return self;
}
- (OfflineMsgSumRspBuilder *)setSummaryArray:(NSArray<OfflineMsgSum*> *)array {
  resultOfflineMsgSumRsp.summaryArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (OfflineMsgSumRspBuilder *)clearSummary {
  resultOfflineMsgSumRsp.summaryArray = nil;
  return self;
}
@end

@interface OfflineMsgReq ()
@property (strong) NSString* category;
@property (strong) NSString* fromid;
@property (strong) NSString* toid;
@property SInt32 count;
@property UInt64 lastupdate;
@end

@implementation OfflineMsgReq

- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasToid {
  return !!hasToid_;
}
- (void) setHasToid:(BOOL) _value_ {
  hasToid_ = !!_value_;
}
@synthesize toid;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasLastupdate {
  return !!hasLastupdate_;
}
- (void) setHasLastupdate:(BOOL) _value_ {
  hasLastupdate_ = !!_value_;
}
@synthesize lastupdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.category = @"";
    self.fromid = @"";
    self.toid = @"";
    self.count = 0;
    self.lastupdate = 0L;
  }
  return self;
}
static OfflineMsgReq* defaultOfflineMsgReqInstance = nil;
+ (void) initialize {
  if (self == [OfflineMsgReq class]) {
    defaultOfflineMsgReqInstance = [[OfflineMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOfflineMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultOfflineMsgReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCategory) {
    return NO;
  }
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasToid) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  if (!self.hasLastupdate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategory) {
    [output writeString:1 value:self.category];
  }
  if (self.hasFromid) {
    [output writeString:2 value:self.fromid];
  }
  if (self.hasToid) {
    [output writeString:3 value:self.toid];
  }
  if (self.hasCount) {
    [output writeInt32:4 value:self.count];
  }
  if (self.hasLastupdate) {
    [output writeUInt64:5 value:self.lastupdate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCategory) {
    size_ += computeStringSize(1, self.category);
  }
  if (self.hasFromid) {
    size_ += computeStringSize(2, self.fromid);
  }
  if (self.hasToid) {
    size_ += computeStringSize(3, self.toid);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(4, self.count);
  }
  if (self.hasLastupdate) {
    size_ += computeUInt64Size(5, self.lastupdate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OfflineMsgReq*) parseFromData:(NSData*) data {
  return (OfflineMsgReq*)[[[OfflineMsgReq builder] mergeFromData:data] build];
}
+ (OfflineMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgReq*)[[[OfflineMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (OfflineMsgReq*)[[[OfflineMsgReq builder] mergeFromInputStream:input] build];
}
+ (OfflineMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgReq*)[[[OfflineMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OfflineMsgReq*)[[[OfflineMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (OfflineMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgReq*)[[[OfflineMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgReqBuilder*) builder {
  return [[OfflineMsgReqBuilder alloc] init];
}
+ (OfflineMsgReqBuilder*) builderWithPrototype:(OfflineMsgReq*) prototype {
  return [[OfflineMsgReq builder] mergeFrom:prototype];
}
- (OfflineMsgReqBuilder*) builder {
  return [OfflineMsgReq builder];
}
- (OfflineMsgReqBuilder*) toBuilder {
  return [OfflineMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", self.category];
  }
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasToid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toid", self.toid];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasLastupdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastupdate", [NSNumber numberWithLongLong:self.lastupdate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCategory) {
    [dictionary setObject: self.category forKey: @"category"];
  }
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasToid) {
    [dictionary setObject: self.toid forKey: @"toid"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasLastupdate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastupdate] forKey: @"lastupdate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OfflineMsgReq class]]) {
    return NO;
  }
  OfflineMsgReq *otherMessage = other;
  return
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasToid == otherMessage.hasToid &&
      (!self.hasToid || [self.toid isEqual:otherMessage.toid]) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasLastupdate == otherMessage.hasLastupdate &&
      (!self.hasLastupdate || self.lastupdate == otherMessage.lastupdate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasToid) {
    hashCode = hashCode * 31 + [self.toid hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasLastupdate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastupdate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OfflineMsgReqBuilder()
@property (strong) OfflineMsgReq* resultOfflineMsgReq;
@end

@implementation OfflineMsgReqBuilder
@synthesize resultOfflineMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOfflineMsgReq = [[OfflineMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOfflineMsgReq;
}
- (OfflineMsgReqBuilder*) clear {
  self.resultOfflineMsgReq = [[OfflineMsgReq alloc] init];
  return self;
}
- (OfflineMsgReqBuilder*) clone {
  return [OfflineMsgReq builderWithPrototype:resultOfflineMsgReq];
}
- (OfflineMsgReq*) defaultInstance {
  return [OfflineMsgReq defaultInstance];
}
- (OfflineMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OfflineMsgReq*) buildPartial {
  OfflineMsgReq* returnMe = resultOfflineMsgReq;
  self.resultOfflineMsgReq = nil;
  return returnMe;
}
- (OfflineMsgReqBuilder*) mergeFrom:(OfflineMsgReq*) other {
  if (other == [OfflineMsgReq defaultInstance]) {
    return self;
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasToid) {
    [self setToid:other.toid];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasLastupdate) {
    [self setLastupdate:other.lastupdate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OfflineMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OfflineMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCategory:[input readString]];
        break;
      }
      case 18: {
        [self setFromid:[input readString]];
        break;
      }
      case 26: {
        [self setToid:[input readString]];
        break;
      }
      case 32: {
        [self setCount:[input readInt32]];
        break;
      }
      case 40: {
        [self setLastupdate:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCategory {
  return resultOfflineMsgReq.hasCategory;
}
- (NSString*) category {
  return resultOfflineMsgReq.category;
}
- (OfflineMsgReqBuilder*) setCategory:(NSString*) value {
  resultOfflineMsgReq.hasCategory = YES;
  resultOfflineMsgReq.category = value;
  return self;
}
- (OfflineMsgReqBuilder*) clearCategory {
  resultOfflineMsgReq.hasCategory = NO;
  resultOfflineMsgReq.category = @"";
  return self;
}
- (BOOL) hasFromid {
  return resultOfflineMsgReq.hasFromid;
}
- (NSString*) fromid {
  return resultOfflineMsgReq.fromid;
}
- (OfflineMsgReqBuilder*) setFromid:(NSString*) value {
  resultOfflineMsgReq.hasFromid = YES;
  resultOfflineMsgReq.fromid = value;
  return self;
}
- (OfflineMsgReqBuilder*) clearFromid {
  resultOfflineMsgReq.hasFromid = NO;
  resultOfflineMsgReq.fromid = @"";
  return self;
}
- (BOOL) hasToid {
  return resultOfflineMsgReq.hasToid;
}
- (NSString*) toid {
  return resultOfflineMsgReq.toid;
}
- (OfflineMsgReqBuilder*) setToid:(NSString*) value {
  resultOfflineMsgReq.hasToid = YES;
  resultOfflineMsgReq.toid = value;
  return self;
}
- (OfflineMsgReqBuilder*) clearToid {
  resultOfflineMsgReq.hasToid = NO;
  resultOfflineMsgReq.toid = @"";
  return self;
}
- (BOOL) hasCount {
  return resultOfflineMsgReq.hasCount;
}
- (SInt32) count {
  return resultOfflineMsgReq.count;
}
- (OfflineMsgReqBuilder*) setCount:(SInt32) value {
  resultOfflineMsgReq.hasCount = YES;
  resultOfflineMsgReq.count = value;
  return self;
}
- (OfflineMsgReqBuilder*) clearCount {
  resultOfflineMsgReq.hasCount = NO;
  resultOfflineMsgReq.count = 0;
  return self;
}
- (BOOL) hasLastupdate {
  return resultOfflineMsgReq.hasLastupdate;
}
- (UInt64) lastupdate {
  return resultOfflineMsgReq.lastupdate;
}
- (OfflineMsgReqBuilder*) setLastupdate:(UInt64) value {
  resultOfflineMsgReq.hasLastupdate = YES;
  resultOfflineMsgReq.lastupdate = value;
  return self;
}
- (OfflineMsgReqBuilder*) clearLastupdate {
  resultOfflineMsgReq.hasLastupdate = NO;
  resultOfflineMsgReq.lastupdate = 0L;
  return self;
}
@end

@interface OfflineMsgRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@property (strong) NSMutableArray<ChatMsg*> * msglistArray;
@end

@implementation OfflineMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
@synthesize msglistArray;
@dynamic msglist;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static OfflineMsgRsp* defaultOfflineMsgRspInstance = nil;
+ (void) initialize {
  if (self == [OfflineMsgRsp class]) {
    defaultOfflineMsgRspInstance = [[OfflineMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOfflineMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultOfflineMsgRspInstance;
}
- (NSArray<ChatMsg*> *)msglist {
  return msglistArray;
}
- (ChatMsg*)msglistAtIndex:(NSUInteger)index {
  return [msglistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  __block BOOL isInitmsglist = YES;
   [self.msglist enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmsglist = NO;
      *stop = YES;
    }
  }];
  if (!isInitmsglist) return isInitmsglist;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OfflineMsgRsp*) parseFromData:(NSData*) data {
  return (OfflineMsgRsp*)[[[OfflineMsgRsp builder] mergeFromData:data] build];
}
+ (OfflineMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgRsp*)[[[OfflineMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (OfflineMsgRsp*)[[[OfflineMsgRsp builder] mergeFromInputStream:input] build];
}
+ (OfflineMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgRsp*)[[[OfflineMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OfflineMsgRsp*)[[[OfflineMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (OfflineMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OfflineMsgRsp*)[[[OfflineMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OfflineMsgRspBuilder*) builder {
  return [[OfflineMsgRspBuilder alloc] init];
}
+ (OfflineMsgRspBuilder*) builderWithPrototype:(OfflineMsgRsp*) prototype {
  return [[OfflineMsgRsp builder] mergeFrom:prototype];
}
- (OfflineMsgRspBuilder*) builder {
  return [OfflineMsgRsp builder];
}
- (OfflineMsgRspBuilder*) toBuilder {
  return [OfflineMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msglist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  for (ChatMsg* element in self.msglistArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msglist"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OfflineMsgRsp class]]) {
    return NO;
  }
  OfflineMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      [self.msglistArray isEqualToArray:otherMessage.msglistArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OfflineMsgRspBuilder()
@property (strong) OfflineMsgRsp* resultOfflineMsgRsp;
@end

@implementation OfflineMsgRspBuilder
@synthesize resultOfflineMsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOfflineMsgRsp = [[OfflineMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOfflineMsgRsp;
}
- (OfflineMsgRspBuilder*) clear {
  self.resultOfflineMsgRsp = [[OfflineMsgRsp alloc] init];
  return self;
}
- (OfflineMsgRspBuilder*) clone {
  return [OfflineMsgRsp builderWithPrototype:resultOfflineMsgRsp];
}
- (OfflineMsgRsp*) defaultInstance {
  return [OfflineMsgRsp defaultInstance];
}
- (OfflineMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OfflineMsgRsp*) buildPartial {
  OfflineMsgRsp* returnMe = resultOfflineMsgRsp;
  self.resultOfflineMsgRsp = nil;
  return returnMe;
}
- (OfflineMsgRspBuilder*) mergeFrom:(OfflineMsgRsp*) other {
  if (other == [OfflineMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.msglistArray.count > 0) {
    if (resultOfflineMsgRsp.msglistArray == nil) {
      resultOfflineMsgRsp.msglistArray = [[NSMutableArray alloc] initWithArray:other.msglistArray];
    } else {
      [resultOfflineMsgRsp.msglistArray addObjectsFromArray:other.msglistArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OfflineMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OfflineMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        ChatMsgBuilder* subBuilder = [ChatMsg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsglist:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultOfflineMsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultOfflineMsgRsp.userid;
}
- (OfflineMsgRspBuilder*) setUserid:(NSString*) value {
  resultOfflineMsgRsp.hasUserid = YES;
  resultOfflineMsgRsp.userid = value;
  return self;
}
- (OfflineMsgRspBuilder*) clearUserid {
  resultOfflineMsgRsp.hasUserid = NO;
  resultOfflineMsgRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultOfflineMsgRsp.hasCode;
}
- (ResultCode) code {
  return resultOfflineMsgRsp.code;
}
- (OfflineMsgRspBuilder*) setCode:(ResultCode) value {
  resultOfflineMsgRsp.hasCode = YES;
  resultOfflineMsgRsp.code = value;
  return self;
}
- (OfflineMsgRspBuilder*) clearCode {
  resultOfflineMsgRsp.hasCode = NO;
  resultOfflineMsgRsp.code = ResultCodeNoError;
  return self;
}
- (NSMutableArray<ChatMsg*> *)msglist {
  return resultOfflineMsgRsp.msglistArray;
}
- (ChatMsg*)msglistAtIndex:(NSUInteger)index {
  return [resultOfflineMsgRsp msglistAtIndex:index];
}
- (OfflineMsgRspBuilder *)addMsglist:(ChatMsg*)value {
  if (resultOfflineMsgRsp.msglistArray == nil) {
    resultOfflineMsgRsp.msglistArray = [[NSMutableArray alloc]init];
  }
  [resultOfflineMsgRsp.msglistArray addObject:value];
  return self;
}
- (OfflineMsgRspBuilder *)setMsglistArray:(NSArray<ChatMsg*> *)array {
  resultOfflineMsgRsp.msglistArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (OfflineMsgRspBuilder *)clearMsglist {
  resultOfflineMsgRsp.msglistArray = nil;
  return self;
}
@end

@interface PfOfflineMsgReq ()
@property (strong) NSMutableArray * msgtypelistArray;
@property (strong) NSString* userid;
@property SInt32 count;
@property UInt64 lastupdate;
@end

@implementation PfOfflineMsgReq

@synthesize msgtypelistArray;
@dynamic msgtypelist;
- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasLastupdate {
  return !!hasLastupdate_;
}
- (void) setHasLastupdate:(BOOL) _value_ {
  hasLastupdate_ = !!_value_;
}
@synthesize lastupdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.count = 0;
    self.lastupdate = 0L;
  }
  return self;
}
static PfOfflineMsgReq* defaultPfOfflineMsgReqInstance = nil;
+ (void) initialize {
  if (self == [PfOfflineMsgReq class]) {
    defaultPfOfflineMsgReqInstance = [[PfOfflineMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPfOfflineMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPfOfflineMsgReqInstance;
}
- (NSArray *)msgtypelist {
  return msgtypelistArray;
}
- (NSString*)msgtypelistAtIndex:(NSUInteger)index {
  return [msgtypelistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  if (!self.hasLastupdate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.msgtypelistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  if (self.hasUserid) {
    [output writeString:2 value:self.userid];
  }
  if (self.hasCount) {
    [output writeInt32:3 value:self.count];
  }
  if (self.hasLastupdate) {
    [output writeUInt64:4 value:self.lastupdate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.msgtypelistArray.count;
    [self.msgtypelistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasUserid) {
    size_ += computeStringSize(2, self.userid);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(3, self.count);
  }
  if (self.hasLastupdate) {
    size_ += computeUInt64Size(4, self.lastupdate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PfOfflineMsgReq*) parseFromData:(NSData*) data {
  return (PfOfflineMsgReq*)[[[PfOfflineMsgReq builder] mergeFromData:data] build];
}
+ (PfOfflineMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PfOfflineMsgReq*)[[[PfOfflineMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PfOfflineMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (PfOfflineMsgReq*)[[[PfOfflineMsgReq builder] mergeFromInputStream:input] build];
}
+ (PfOfflineMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PfOfflineMsgReq*)[[[PfOfflineMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PfOfflineMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PfOfflineMsgReq*)[[[PfOfflineMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (PfOfflineMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PfOfflineMsgReq*)[[[PfOfflineMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PfOfflineMsgReqBuilder*) builder {
  return [[PfOfflineMsgReqBuilder alloc] init];
}
+ (PfOfflineMsgReqBuilder*) builderWithPrototype:(PfOfflineMsgReq*) prototype {
  return [[PfOfflineMsgReq builder] mergeFrom:prototype];
}
- (PfOfflineMsgReqBuilder*) builder {
  return [PfOfflineMsgReq builder];
}
- (PfOfflineMsgReqBuilder*) toBuilder {
  return [PfOfflineMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.msgtypelistArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgtypelist", obj];
  }];
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasLastupdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastupdate", [NSNumber numberWithLongLong:self.lastupdate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.msgtypelist forKey: @"msgtypelist"];
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasLastupdate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastupdate] forKey: @"lastupdate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PfOfflineMsgReq class]]) {
    return NO;
  }
  PfOfflineMsgReq *otherMessage = other;
  return
      [self.msgtypelistArray isEqualToArray:otherMessage.msgtypelistArray] &&
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasLastupdate == otherMessage.hasLastupdate &&
      (!self.hasLastupdate || self.lastupdate == otherMessage.lastupdate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.msgtypelistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasLastupdate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastupdate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PfOfflineMsgReqBuilder()
@property (strong) PfOfflineMsgReq* resultPfOfflineMsgReq;
@end

@implementation PfOfflineMsgReqBuilder
@synthesize resultPfOfflineMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPfOfflineMsgReq = [[PfOfflineMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPfOfflineMsgReq;
}
- (PfOfflineMsgReqBuilder*) clear {
  self.resultPfOfflineMsgReq = [[PfOfflineMsgReq alloc] init];
  return self;
}
- (PfOfflineMsgReqBuilder*) clone {
  return [PfOfflineMsgReq builderWithPrototype:resultPfOfflineMsgReq];
}
- (PfOfflineMsgReq*) defaultInstance {
  return [PfOfflineMsgReq defaultInstance];
}
- (PfOfflineMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PfOfflineMsgReq*) buildPartial {
  PfOfflineMsgReq* returnMe = resultPfOfflineMsgReq;
  self.resultPfOfflineMsgReq = nil;
  return returnMe;
}
- (PfOfflineMsgReqBuilder*) mergeFrom:(PfOfflineMsgReq*) other {
  if (other == [PfOfflineMsgReq defaultInstance]) {
    return self;
  }
  if (other.msgtypelistArray.count > 0) {
    if (resultPfOfflineMsgReq.msgtypelistArray == nil) {
      resultPfOfflineMsgReq.msgtypelistArray = [[NSMutableArray alloc] initWithArray:other.msgtypelistArray];
    } else {
      [resultPfOfflineMsgReq.msgtypelistArray addObjectsFromArray:other.msgtypelistArray];
    }
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasLastupdate) {
    [self setLastupdate:other.lastupdate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PfOfflineMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PfOfflineMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addMsgtypelist:[input readString]];
        break;
      }
      case 18: {
        [self setUserid:[input readString]];
        break;
      }
      case 24: {
        [self setCount:[input readInt32]];
        break;
      }
      case 32: {
        [self setLastupdate:[input readUInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)msgtypelist {
  return resultPfOfflineMsgReq.msgtypelistArray;
}
- (NSString*)msgtypelistAtIndex:(NSUInteger)index {
  return [resultPfOfflineMsgReq msgtypelistAtIndex:index];
}
- (PfOfflineMsgReqBuilder *)addMsgtypelist:(NSString*)value {
  if (resultPfOfflineMsgReq.msgtypelistArray == nil) {
    resultPfOfflineMsgReq.msgtypelistArray = [[NSMutableArray alloc]init];
  }
  [resultPfOfflineMsgReq.msgtypelistArray addObject:value];
  return self;
}
- (PfOfflineMsgReqBuilder *)setMsgtypelistArray:(NSArray *)array {
  resultPfOfflineMsgReq.msgtypelistArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PfOfflineMsgReqBuilder *)clearMsgtypelist {
  resultPfOfflineMsgReq.msgtypelistArray = nil;
  return self;
}
- (BOOL) hasUserid {
  return resultPfOfflineMsgReq.hasUserid;
}
- (NSString*) userid {
  return resultPfOfflineMsgReq.userid;
}
- (PfOfflineMsgReqBuilder*) setUserid:(NSString*) value {
  resultPfOfflineMsgReq.hasUserid = YES;
  resultPfOfflineMsgReq.userid = value;
  return self;
}
- (PfOfflineMsgReqBuilder*) clearUserid {
  resultPfOfflineMsgReq.hasUserid = NO;
  resultPfOfflineMsgReq.userid = @"";
  return self;
}
- (BOOL) hasCount {
  return resultPfOfflineMsgReq.hasCount;
}
- (SInt32) count {
  return resultPfOfflineMsgReq.count;
}
- (PfOfflineMsgReqBuilder*) setCount:(SInt32) value {
  resultPfOfflineMsgReq.hasCount = YES;
  resultPfOfflineMsgReq.count = value;
  return self;
}
- (PfOfflineMsgReqBuilder*) clearCount {
  resultPfOfflineMsgReq.hasCount = NO;
  resultPfOfflineMsgReq.count = 0;
  return self;
}
- (BOOL) hasLastupdate {
  return resultPfOfflineMsgReq.hasLastupdate;
}
- (UInt64) lastupdate {
  return resultPfOfflineMsgReq.lastupdate;
}
- (PfOfflineMsgReqBuilder*) setLastupdate:(UInt64) value {
  resultPfOfflineMsgReq.hasLastupdate = YES;
  resultPfOfflineMsgReq.lastupdate = value;
  return self;
}
- (PfOfflineMsgReqBuilder*) clearLastupdate {
  resultPfOfflineMsgReq.hasLastupdate = NO;
  resultPfOfflineMsgReq.lastupdate = 0L;
  return self;
}
@end

@interface PfOfflineMsgRsp ()
@property (strong) NSString* userid;
@property (strong) NSMutableArray<ChatMsg*> * msglistArray;
@property ResultCode code;
@end

@implementation PfOfflineMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
@synthesize msglistArray;
@dynamic msglist;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static PfOfflineMsgRsp* defaultPfOfflineMsgRspInstance = nil;
+ (void) initialize {
  if (self == [PfOfflineMsgRsp class]) {
    defaultPfOfflineMsgRspInstance = [[PfOfflineMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPfOfflineMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultPfOfflineMsgRspInstance;
}
- (NSArray<ChatMsg*> *)msglist {
  return msglistArray;
}
- (ChatMsg*)msglistAtIndex:(NSUInteger)index {
  return [msglistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  __block BOOL isInitmsglist = YES;
   [self.msglist enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmsglist = NO;
      *stop = YES;
    }
  }];
  if (!isInitmsglist) return isInitmsglist;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PfOfflineMsgRsp*) parseFromData:(NSData*) data {
  return (PfOfflineMsgRsp*)[[[PfOfflineMsgRsp builder] mergeFromData:data] build];
}
+ (PfOfflineMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PfOfflineMsgRsp*)[[[PfOfflineMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PfOfflineMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (PfOfflineMsgRsp*)[[[PfOfflineMsgRsp builder] mergeFromInputStream:input] build];
}
+ (PfOfflineMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PfOfflineMsgRsp*)[[[PfOfflineMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PfOfflineMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PfOfflineMsgRsp*)[[[PfOfflineMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (PfOfflineMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PfOfflineMsgRsp*)[[[PfOfflineMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PfOfflineMsgRspBuilder*) builder {
  return [[PfOfflineMsgRspBuilder alloc] init];
}
+ (PfOfflineMsgRspBuilder*) builderWithPrototype:(PfOfflineMsgRsp*) prototype {
  return [[PfOfflineMsgRsp builder] mergeFrom:prototype];
}
- (PfOfflineMsgRspBuilder*) builder {
  return [PfOfflineMsgRsp builder];
}
- (PfOfflineMsgRspBuilder*) toBuilder {
  return [PfOfflineMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msglist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  for (ChatMsg* element in self.msglistArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msglist"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PfOfflineMsgRsp class]]) {
    return NO;
  }
  PfOfflineMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      [self.msglistArray isEqualToArray:otherMessage.msglistArray] &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(ChatMsg *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PfOfflineMsgRspBuilder()
@property (strong) PfOfflineMsgRsp* resultPfOfflineMsgRsp;
@end

@implementation PfOfflineMsgRspBuilder
@synthesize resultPfOfflineMsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPfOfflineMsgRsp = [[PfOfflineMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPfOfflineMsgRsp;
}
- (PfOfflineMsgRspBuilder*) clear {
  self.resultPfOfflineMsgRsp = [[PfOfflineMsgRsp alloc] init];
  return self;
}
- (PfOfflineMsgRspBuilder*) clone {
  return [PfOfflineMsgRsp builderWithPrototype:resultPfOfflineMsgRsp];
}
- (PfOfflineMsgRsp*) defaultInstance {
  return [PfOfflineMsgRsp defaultInstance];
}
- (PfOfflineMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PfOfflineMsgRsp*) buildPartial {
  PfOfflineMsgRsp* returnMe = resultPfOfflineMsgRsp;
  self.resultPfOfflineMsgRsp = nil;
  return returnMe;
}
- (PfOfflineMsgRspBuilder*) mergeFrom:(PfOfflineMsgRsp*) other {
  if (other == [PfOfflineMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.msglistArray.count > 0) {
    if (resultPfOfflineMsgRsp.msglistArray == nil) {
      resultPfOfflineMsgRsp.msglistArray = [[NSMutableArray alloc] initWithArray:other.msglistArray];
    } else {
      [resultPfOfflineMsgRsp.msglistArray addObjectsFromArray:other.msglistArray];
    }
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PfOfflineMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PfOfflineMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        ChatMsgBuilder* subBuilder = [ChatMsg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsglist:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultPfOfflineMsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultPfOfflineMsgRsp.userid;
}
- (PfOfflineMsgRspBuilder*) setUserid:(NSString*) value {
  resultPfOfflineMsgRsp.hasUserid = YES;
  resultPfOfflineMsgRsp.userid = value;
  return self;
}
- (PfOfflineMsgRspBuilder*) clearUserid {
  resultPfOfflineMsgRsp.hasUserid = NO;
  resultPfOfflineMsgRsp.userid = @"";
  return self;
}
- (NSMutableArray<ChatMsg*> *)msglist {
  return resultPfOfflineMsgRsp.msglistArray;
}
- (ChatMsg*)msglistAtIndex:(NSUInteger)index {
  return [resultPfOfflineMsgRsp msglistAtIndex:index];
}
- (PfOfflineMsgRspBuilder *)addMsglist:(ChatMsg*)value {
  if (resultPfOfflineMsgRsp.msglistArray == nil) {
    resultPfOfflineMsgRsp.msglistArray = [[NSMutableArray alloc]init];
  }
  [resultPfOfflineMsgRsp.msglistArray addObject:value];
  return self;
}
- (PfOfflineMsgRspBuilder *)setMsglistArray:(NSArray<ChatMsg*> *)array {
  resultPfOfflineMsgRsp.msglistArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PfOfflineMsgRspBuilder *)clearMsglist {
  resultPfOfflineMsgRsp.msglistArray = nil;
  return self;
}
- (BOOL) hasCode {
  return resultPfOfflineMsgRsp.hasCode;
}
- (ResultCode) code {
  return resultPfOfflineMsgRsp.code;
}
- (PfOfflineMsgRspBuilder*) setCode:(ResultCode) value {
  resultPfOfflineMsgRsp.hasCode = YES;
  resultPfOfflineMsgRsp.code = value;
  return self;
}
- (PfOfflineMsgRspBuilder*) clearCode {
  resultPfOfflineMsgRsp.hasCode = NO;
  resultPfOfflineMsgRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface BatchMsgAckReq ()
@property (strong) NSString* userid;
@property (strong) NSMutableArray * msgidlistArray;
@end

@implementation BatchMsgAckReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
@synthesize msgidlistArray;
@dynamic msgidlist;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
  }
  return self;
}
static BatchMsgAckReq* defaultBatchMsgAckReqInstance = nil;
+ (void) initialize {
  if (self == [BatchMsgAckReq class]) {
    defaultBatchMsgAckReqInstance = [[BatchMsgAckReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBatchMsgAckReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBatchMsgAckReqInstance;
}
- (NSArray *)msgidlist {
  return msgidlistArray;
}
- (NSString*)msgidlistAtIndex:(NSUInteger)index {
  return [msgidlistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  [self.msgidlistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.msgidlistArray.count;
    [self.msgidlistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BatchMsgAckReq*) parseFromData:(NSData*) data {
  return (BatchMsgAckReq*)[[[BatchMsgAckReq builder] mergeFromData:data] build];
}
+ (BatchMsgAckReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgAckReq*)[[[BatchMsgAckReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgAckReq*) parseFromInputStream:(NSInputStream*) input {
  return (BatchMsgAckReq*)[[[BatchMsgAckReq builder] mergeFromInputStream:input] build];
}
+ (BatchMsgAckReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgAckReq*)[[[BatchMsgAckReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgAckReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BatchMsgAckReq*)[[[BatchMsgAckReq builder] mergeFromCodedInputStream:input] build];
}
+ (BatchMsgAckReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgAckReq*)[[[BatchMsgAckReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgAckReqBuilder*) builder {
  return [[BatchMsgAckReqBuilder alloc] init];
}
+ (BatchMsgAckReqBuilder*) builderWithPrototype:(BatchMsgAckReq*) prototype {
  return [[BatchMsgAckReq builder] mergeFrom:prototype];
}
- (BatchMsgAckReqBuilder*) builder {
  return [BatchMsgAckReq builder];
}
- (BatchMsgAckReqBuilder*) toBuilder {
  return [BatchMsgAckReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  [self.msgidlistArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgidlist", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  [dictionary setObject:self.msgidlist forKey: @"msgidlist"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BatchMsgAckReq class]]) {
    return NO;
  }
  BatchMsgAckReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      [self.msgidlistArray isEqualToArray:otherMessage.msgidlistArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  [self.msgidlistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BatchMsgAckReqBuilder()
@property (strong) BatchMsgAckReq* resultBatchMsgAckReq;
@end

@implementation BatchMsgAckReqBuilder
@synthesize resultBatchMsgAckReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBatchMsgAckReq = [[BatchMsgAckReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBatchMsgAckReq;
}
- (BatchMsgAckReqBuilder*) clear {
  self.resultBatchMsgAckReq = [[BatchMsgAckReq alloc] init];
  return self;
}
- (BatchMsgAckReqBuilder*) clone {
  return [BatchMsgAckReq builderWithPrototype:resultBatchMsgAckReq];
}
- (BatchMsgAckReq*) defaultInstance {
  return [BatchMsgAckReq defaultInstance];
}
- (BatchMsgAckReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BatchMsgAckReq*) buildPartial {
  BatchMsgAckReq* returnMe = resultBatchMsgAckReq;
  self.resultBatchMsgAckReq = nil;
  return returnMe;
}
- (BatchMsgAckReqBuilder*) mergeFrom:(BatchMsgAckReq*) other {
  if (other == [BatchMsgAckReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.msgidlistArray.count > 0) {
    if (resultBatchMsgAckReq.msgidlistArray == nil) {
      resultBatchMsgAckReq.msgidlistArray = [[NSMutableArray alloc] initWithArray:other.msgidlistArray];
    } else {
      [resultBatchMsgAckReq.msgidlistArray addObjectsFromArray:other.msgidlistArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BatchMsgAckReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BatchMsgAckReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self addMsgidlist:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultBatchMsgAckReq.hasUserid;
}
- (NSString*) userid {
  return resultBatchMsgAckReq.userid;
}
- (BatchMsgAckReqBuilder*) setUserid:(NSString*) value {
  resultBatchMsgAckReq.hasUserid = YES;
  resultBatchMsgAckReq.userid = value;
  return self;
}
- (BatchMsgAckReqBuilder*) clearUserid {
  resultBatchMsgAckReq.hasUserid = NO;
  resultBatchMsgAckReq.userid = @"";
  return self;
}
- (NSMutableArray *)msgidlist {
  return resultBatchMsgAckReq.msgidlistArray;
}
- (NSString*)msgidlistAtIndex:(NSUInteger)index {
  return [resultBatchMsgAckReq msgidlistAtIndex:index];
}
- (BatchMsgAckReqBuilder *)addMsgidlist:(NSString*)value {
  if (resultBatchMsgAckReq.msgidlistArray == nil) {
    resultBatchMsgAckReq.msgidlistArray = [[NSMutableArray alloc]init];
  }
  [resultBatchMsgAckReq.msgidlistArray addObject:value];
  return self;
}
- (BatchMsgAckReqBuilder *)setMsgidlistArray:(NSArray *)array {
  resultBatchMsgAckReq.msgidlistArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BatchMsgAckReqBuilder *)clearMsgidlist {
  resultBatchMsgAckReq.msgidlistArray = nil;
  return self;
}
@end

@interface BatchMsgAckRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation BatchMsgAckRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static BatchMsgAckRsp* defaultBatchMsgAckRspInstance = nil;
+ (void) initialize {
  if (self == [BatchMsgAckRsp class]) {
    defaultBatchMsgAckRspInstance = [[BatchMsgAckRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBatchMsgAckRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBatchMsgAckRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BatchMsgAckRsp*) parseFromData:(NSData*) data {
  return (BatchMsgAckRsp*)[[[BatchMsgAckRsp builder] mergeFromData:data] build];
}
+ (BatchMsgAckRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgAckRsp*)[[[BatchMsgAckRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgAckRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BatchMsgAckRsp*)[[[BatchMsgAckRsp builder] mergeFromInputStream:input] build];
}
+ (BatchMsgAckRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgAckRsp*)[[[BatchMsgAckRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgAckRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BatchMsgAckRsp*)[[[BatchMsgAckRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BatchMsgAckRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgAckRsp*)[[[BatchMsgAckRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgAckRspBuilder*) builder {
  return [[BatchMsgAckRspBuilder alloc] init];
}
+ (BatchMsgAckRspBuilder*) builderWithPrototype:(BatchMsgAckRsp*) prototype {
  return [[BatchMsgAckRsp builder] mergeFrom:prototype];
}
- (BatchMsgAckRspBuilder*) builder {
  return [BatchMsgAckRsp builder];
}
- (BatchMsgAckRspBuilder*) toBuilder {
  return [BatchMsgAckRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BatchMsgAckRsp class]]) {
    return NO;
  }
  BatchMsgAckRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BatchMsgAckRspBuilder()
@property (strong) BatchMsgAckRsp* resultBatchMsgAckRsp;
@end

@implementation BatchMsgAckRspBuilder
@synthesize resultBatchMsgAckRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBatchMsgAckRsp = [[BatchMsgAckRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBatchMsgAckRsp;
}
- (BatchMsgAckRspBuilder*) clear {
  self.resultBatchMsgAckRsp = [[BatchMsgAckRsp alloc] init];
  return self;
}
- (BatchMsgAckRspBuilder*) clone {
  return [BatchMsgAckRsp builderWithPrototype:resultBatchMsgAckRsp];
}
- (BatchMsgAckRsp*) defaultInstance {
  return [BatchMsgAckRsp defaultInstance];
}
- (BatchMsgAckRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BatchMsgAckRsp*) buildPartial {
  BatchMsgAckRsp* returnMe = resultBatchMsgAckRsp;
  self.resultBatchMsgAckRsp = nil;
  return returnMe;
}
- (BatchMsgAckRspBuilder*) mergeFrom:(BatchMsgAckRsp*) other {
  if (other == [BatchMsgAckRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BatchMsgAckRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BatchMsgAckRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultBatchMsgAckRsp.hasUserid;
}
- (NSString*) userid {
  return resultBatchMsgAckRsp.userid;
}
- (BatchMsgAckRspBuilder*) setUserid:(NSString*) value {
  resultBatchMsgAckRsp.hasUserid = YES;
  resultBatchMsgAckRsp.userid = value;
  return self;
}
- (BatchMsgAckRspBuilder*) clearUserid {
  resultBatchMsgAckRsp.hasUserid = NO;
  resultBatchMsgAckRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultBatchMsgAckRsp.hasCode;
}
- (ResultCode) code {
  return resultBatchMsgAckRsp.code;
}
- (BatchMsgAckRspBuilder*) setCode:(ResultCode) value {
  resultBatchMsgAckRsp.hasCode = YES;
  resultBatchMsgAckRsp.code = value;
  return self;
}
- (BatchMsgAckRspBuilder*) clearCode {
  resultBatchMsgAckRsp.hasCode = NO;
  resultBatchMsgAckRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface BatchMsgReadReq ()
@property (strong) NSString* userid;
@property (strong) NSMutableArray * msgidlistArray;
@end

@implementation BatchMsgReadReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
@synthesize msgidlistArray;
@dynamic msgidlist;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
  }
  return self;
}
static BatchMsgReadReq* defaultBatchMsgReadReqInstance = nil;
+ (void) initialize {
  if (self == [BatchMsgReadReq class]) {
    defaultBatchMsgReadReqInstance = [[BatchMsgReadReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBatchMsgReadReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBatchMsgReadReqInstance;
}
- (NSArray *)msgidlist {
  return msgidlistArray;
}
- (NSString*)msgidlistAtIndex:(NSUInteger)index {
  return [msgidlistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  [self.msgidlistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.msgidlistArray.count;
    [self.msgidlistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BatchMsgReadReq*) parseFromData:(NSData*) data {
  return (BatchMsgReadReq*)[[[BatchMsgReadReq builder] mergeFromData:data] build];
}
+ (BatchMsgReadReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgReadReq*)[[[BatchMsgReadReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgReadReq*) parseFromInputStream:(NSInputStream*) input {
  return (BatchMsgReadReq*)[[[BatchMsgReadReq builder] mergeFromInputStream:input] build];
}
+ (BatchMsgReadReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgReadReq*)[[[BatchMsgReadReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgReadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BatchMsgReadReq*)[[[BatchMsgReadReq builder] mergeFromCodedInputStream:input] build];
}
+ (BatchMsgReadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgReadReq*)[[[BatchMsgReadReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgReadReqBuilder*) builder {
  return [[BatchMsgReadReqBuilder alloc] init];
}
+ (BatchMsgReadReqBuilder*) builderWithPrototype:(BatchMsgReadReq*) prototype {
  return [[BatchMsgReadReq builder] mergeFrom:prototype];
}
- (BatchMsgReadReqBuilder*) builder {
  return [BatchMsgReadReq builder];
}
- (BatchMsgReadReqBuilder*) toBuilder {
  return [BatchMsgReadReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  [self.msgidlistArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgidlist", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  [dictionary setObject:self.msgidlist forKey: @"msgidlist"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BatchMsgReadReq class]]) {
    return NO;
  }
  BatchMsgReadReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      [self.msgidlistArray isEqualToArray:otherMessage.msgidlistArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  [self.msgidlistArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BatchMsgReadReqBuilder()
@property (strong) BatchMsgReadReq* resultBatchMsgReadReq;
@end

@implementation BatchMsgReadReqBuilder
@synthesize resultBatchMsgReadReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBatchMsgReadReq = [[BatchMsgReadReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBatchMsgReadReq;
}
- (BatchMsgReadReqBuilder*) clear {
  self.resultBatchMsgReadReq = [[BatchMsgReadReq alloc] init];
  return self;
}
- (BatchMsgReadReqBuilder*) clone {
  return [BatchMsgReadReq builderWithPrototype:resultBatchMsgReadReq];
}
- (BatchMsgReadReq*) defaultInstance {
  return [BatchMsgReadReq defaultInstance];
}
- (BatchMsgReadReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BatchMsgReadReq*) buildPartial {
  BatchMsgReadReq* returnMe = resultBatchMsgReadReq;
  self.resultBatchMsgReadReq = nil;
  return returnMe;
}
- (BatchMsgReadReqBuilder*) mergeFrom:(BatchMsgReadReq*) other {
  if (other == [BatchMsgReadReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.msgidlistArray.count > 0) {
    if (resultBatchMsgReadReq.msgidlistArray == nil) {
      resultBatchMsgReadReq.msgidlistArray = [[NSMutableArray alloc] initWithArray:other.msgidlistArray];
    } else {
      [resultBatchMsgReadReq.msgidlistArray addObjectsFromArray:other.msgidlistArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BatchMsgReadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BatchMsgReadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self addMsgidlist:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultBatchMsgReadReq.hasUserid;
}
- (NSString*) userid {
  return resultBatchMsgReadReq.userid;
}
- (BatchMsgReadReqBuilder*) setUserid:(NSString*) value {
  resultBatchMsgReadReq.hasUserid = YES;
  resultBatchMsgReadReq.userid = value;
  return self;
}
- (BatchMsgReadReqBuilder*) clearUserid {
  resultBatchMsgReadReq.hasUserid = NO;
  resultBatchMsgReadReq.userid = @"";
  return self;
}
- (NSMutableArray *)msgidlist {
  return resultBatchMsgReadReq.msgidlistArray;
}
- (NSString*)msgidlistAtIndex:(NSUInteger)index {
  return [resultBatchMsgReadReq msgidlistAtIndex:index];
}
- (BatchMsgReadReqBuilder *)addMsgidlist:(NSString*)value {
  if (resultBatchMsgReadReq.msgidlistArray == nil) {
    resultBatchMsgReadReq.msgidlistArray = [[NSMutableArray alloc]init];
  }
  [resultBatchMsgReadReq.msgidlistArray addObject:value];
  return self;
}
- (BatchMsgReadReqBuilder *)setMsgidlistArray:(NSArray *)array {
  resultBatchMsgReadReq.msgidlistArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (BatchMsgReadReqBuilder *)clearMsgidlist {
  resultBatchMsgReadReq.msgidlistArray = nil;
  return self;
}
@end

@interface BatchMsgReadRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation BatchMsgReadRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static BatchMsgReadRsp* defaultBatchMsgReadRspInstance = nil;
+ (void) initialize {
  if (self == [BatchMsgReadRsp class]) {
    defaultBatchMsgReadRspInstance = [[BatchMsgReadRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBatchMsgReadRspInstance;
}
- (instancetype) defaultInstance {
  return defaultBatchMsgReadRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BatchMsgReadRsp*) parseFromData:(NSData*) data {
  return (BatchMsgReadRsp*)[[[BatchMsgReadRsp builder] mergeFromData:data] build];
}
+ (BatchMsgReadRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgReadRsp*)[[[BatchMsgReadRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgReadRsp*) parseFromInputStream:(NSInputStream*) input {
  return (BatchMsgReadRsp*)[[[BatchMsgReadRsp builder] mergeFromInputStream:input] build];
}
+ (BatchMsgReadRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgReadRsp*)[[[BatchMsgReadRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgReadRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BatchMsgReadRsp*)[[[BatchMsgReadRsp builder] mergeFromCodedInputStream:input] build];
}
+ (BatchMsgReadRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BatchMsgReadRsp*)[[[BatchMsgReadRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BatchMsgReadRspBuilder*) builder {
  return [[BatchMsgReadRspBuilder alloc] init];
}
+ (BatchMsgReadRspBuilder*) builderWithPrototype:(BatchMsgReadRsp*) prototype {
  return [[BatchMsgReadRsp builder] mergeFrom:prototype];
}
- (BatchMsgReadRspBuilder*) builder {
  return [BatchMsgReadRsp builder];
}
- (BatchMsgReadRspBuilder*) toBuilder {
  return [BatchMsgReadRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BatchMsgReadRsp class]]) {
    return NO;
  }
  BatchMsgReadRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BatchMsgReadRspBuilder()
@property (strong) BatchMsgReadRsp* resultBatchMsgReadRsp;
@end

@implementation BatchMsgReadRspBuilder
@synthesize resultBatchMsgReadRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBatchMsgReadRsp = [[BatchMsgReadRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBatchMsgReadRsp;
}
- (BatchMsgReadRspBuilder*) clear {
  self.resultBatchMsgReadRsp = [[BatchMsgReadRsp alloc] init];
  return self;
}
- (BatchMsgReadRspBuilder*) clone {
  return [BatchMsgReadRsp builderWithPrototype:resultBatchMsgReadRsp];
}
- (BatchMsgReadRsp*) defaultInstance {
  return [BatchMsgReadRsp defaultInstance];
}
- (BatchMsgReadRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BatchMsgReadRsp*) buildPartial {
  BatchMsgReadRsp* returnMe = resultBatchMsgReadRsp;
  self.resultBatchMsgReadRsp = nil;
  return returnMe;
}
- (BatchMsgReadRspBuilder*) mergeFrom:(BatchMsgReadRsp*) other {
  if (other == [BatchMsgReadRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BatchMsgReadRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BatchMsgReadRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultBatchMsgReadRsp.hasUserid;
}
- (NSString*) userid {
  return resultBatchMsgReadRsp.userid;
}
- (BatchMsgReadRspBuilder*) setUserid:(NSString*) value {
  resultBatchMsgReadRsp.hasUserid = YES;
  resultBatchMsgReadRsp.userid = value;
  return self;
}
- (BatchMsgReadRspBuilder*) clearUserid {
  resultBatchMsgReadRsp.hasUserid = NO;
  resultBatchMsgReadRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultBatchMsgReadRsp.hasCode;
}
- (ResultCode) code {
  return resultBatchMsgReadRsp.code;
}
- (BatchMsgReadRspBuilder*) setCode:(ResultCode) value {
  resultBatchMsgReadRsp.hasCode = YES;
  resultBatchMsgReadRsp.code = value;
  return self;
}
- (BatchMsgReadRspBuilder*) clearCode {
  resultBatchMsgReadRsp.hasCode = NO;
  resultBatchMsgReadRsp.code = ResultCodeNoError;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
