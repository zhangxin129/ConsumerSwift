// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ImHxkefu.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImHxkefuRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImHxkefuRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImHxcommonRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface P2CMsg ()
@property (strong) NSString* sessionid;
@property (strong) NSString* msgid;
@property (strong) NSString* guid;
@property (strong) NSString* fromid;
@property (strong) NSString* toid;
@property UInt64 sendtime;
@property (strong) NSString* content;
@property BOOL isread;
@end

@implementation P2CMsg

- (BOOL) hasSessionid {
  return !!hasSessionid_;
}
- (void) setHasSessionid:(BOOL) _value_ {
  hasSessionid_ = !!_value_;
}
@synthesize sessionid;
- (BOOL) hasMsgid {
  return !!hasMsgid_;
}
- (void) setHasMsgid:(BOOL) _value_ {
  hasMsgid_ = !!_value_;
}
@synthesize msgid;
- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) _value_ {
  hasGuid_ = !!_value_;
}
@synthesize guid;
- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasToid {
  return !!hasToid_;
}
- (void) setHasToid:(BOOL) _value_ {
  hasToid_ = !!_value_;
}
@synthesize toid;
- (BOOL) hasSendtime {
  return !!hasSendtime_;
}
- (void) setHasSendtime:(BOOL) _value_ {
  hasSendtime_ = !!_value_;
}
@synthesize sendtime;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasIsread {
  return !!hasIsread_;
}
- (void) setHasIsread:(BOOL) _value_ {
  hasIsread_ = !!_value_;
}
- (BOOL) isread {
  return !!isread_;
}
- (void) setIsread:(BOOL) _value_ {
  isread_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.sessionid = @"";
    self.msgid = @"";
    self.guid = @"";
    self.fromid = @"";
    self.toid = @"";
    self.sendtime = 0L;
    self.content = @"";
    self.isread = NO;
  }
  return self;
}
static P2CMsg* defaultP2CMsgInstance = nil;
+ (void) initialize {
  if (self == [P2CMsg class]) {
    defaultP2CMsgInstance = [[P2CMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSessionid) {
    return NO;
  }
  if (!self.hasMsgid) {
    return NO;
  }
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasToid) {
    return NO;
  }
  if (!self.hasSendtime) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.hasIsread) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionid) {
    [output writeString:1 value:self.sessionid];
  }
  if (self.hasMsgid) {
    [output writeString:2 value:self.msgid];
  }
  if (self.hasGuid) {
    [output writeString:3 value:self.guid];
  }
  if (self.hasFromid) {
    [output writeString:4 value:self.fromid];
  }
  if (self.hasToid) {
    [output writeString:5 value:self.toid];
  }
  if (self.hasSendtime) {
    [output writeUInt64:6 value:self.sendtime];
  }
  if (self.hasContent) {
    [output writeString:7 value:self.content];
  }
  if (self.hasIsread) {
    [output writeBool:8 value:self.isread];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSessionid) {
    size_ += computeStringSize(1, self.sessionid);
  }
  if (self.hasMsgid) {
    size_ += computeStringSize(2, self.msgid);
  }
  if (self.hasGuid) {
    size_ += computeStringSize(3, self.guid);
  }
  if (self.hasFromid) {
    size_ += computeStringSize(4, self.fromid);
  }
  if (self.hasToid) {
    size_ += computeStringSize(5, self.toid);
  }
  if (self.hasSendtime) {
    size_ += computeUInt64Size(6, self.sendtime);
  }
  if (self.hasContent) {
    size_ += computeStringSize(7, self.content);
  }
  if (self.hasIsread) {
    size_ += computeBoolSize(8, self.isread);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CMsg*) parseFromData:(NSData*) data {
  return (P2CMsg*)[[[P2CMsg builder] mergeFromData:data] build];
}
+ (P2CMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsg*)[[[P2CMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CMsg*) parseFromInputStream:(NSInputStream*) input {
  return (P2CMsg*)[[[P2CMsg builder] mergeFromInputStream:input] build];
}
+ (P2CMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsg*)[[[P2CMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CMsg*)[[[P2CMsg builder] mergeFromCodedInputStream:input] build];
}
+ (P2CMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsg*)[[[P2CMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgBuilder*) builder {
  return [[P2CMsgBuilder alloc] init];
}
+ (P2CMsgBuilder*) builderWithPrototype:(P2CMsg*) prototype {
  return [[P2CMsg builder] mergeFrom:prototype];
}
- (P2CMsgBuilder*) builder {
  return [P2CMsg builder];
}
- (P2CMsgBuilder*) toBuilder {
  return [P2CMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSessionid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionid", self.sessionid];
  }
  if (self.hasMsgid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgid", self.msgid];
  }
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasToid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toid", self.toid];
  }
  if (self.hasSendtime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendtime", [NSNumber numberWithLongLong:self.sendtime]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasIsread) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isread", [NSNumber numberWithBool:self.isread]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSessionid) {
    [dictionary setObject: self.sessionid forKey: @"sessionid"];
  }
  if (self.hasMsgid) {
    [dictionary setObject: self.msgid forKey: @"msgid"];
  }
  if (self.hasGuid) {
    [dictionary setObject: self.guid forKey: @"guid"];
  }
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasToid) {
    [dictionary setObject: self.toid forKey: @"toid"];
  }
  if (self.hasSendtime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sendtime] forKey: @"sendtime"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasIsread) {
    [dictionary setObject: [NSNumber numberWithBool:self.isread] forKey: @"isread"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CMsg class]]) {
    return NO;
  }
  P2CMsg *otherMessage = other;
  return
      self.hasSessionid == otherMessage.hasSessionid &&
      (!self.hasSessionid || [self.sessionid isEqual:otherMessage.sessionid]) &&
      self.hasMsgid == otherMessage.hasMsgid &&
      (!self.hasMsgid || [self.msgid isEqual:otherMessage.msgid]) &&
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasToid == otherMessage.hasToid &&
      (!self.hasToid || [self.toid isEqual:otherMessage.toid]) &&
      self.hasSendtime == otherMessage.hasSendtime &&
      (!self.hasSendtime || self.sendtime == otherMessage.sendtime) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasIsread == otherMessage.hasIsread &&
      (!self.hasIsread || self.isread == otherMessage.isread) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSessionid) {
    hashCode = hashCode * 31 + [self.sessionid hash];
  }
  if (self.hasMsgid) {
    hashCode = hashCode * 31 + [self.msgid hash];
  }
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasToid) {
    hashCode = hashCode * 31 + [self.toid hash];
  }
  if (self.hasSendtime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sendtime] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasIsread) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isread] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CMsgBuilder()
@property (strong) P2CMsg* resultP2Cmsg;
@end

@implementation P2CMsgBuilder
@synthesize resultP2Cmsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2Cmsg = [[P2CMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2Cmsg;
}
- (P2CMsgBuilder*) clear {
  self.resultP2Cmsg = [[P2CMsg alloc] init];
  return self;
}
- (P2CMsgBuilder*) clone {
  return [P2CMsg builderWithPrototype:resultP2Cmsg];
}
- (P2CMsg*) defaultInstance {
  return [P2CMsg defaultInstance];
}
- (P2CMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CMsg*) buildPartial {
  P2CMsg* returnMe = resultP2Cmsg;
  self.resultP2Cmsg = nil;
  return returnMe;
}
- (P2CMsgBuilder*) mergeFrom:(P2CMsg*) other {
  if (other == [P2CMsg defaultInstance]) {
    return self;
  }
  if (other.hasSessionid) {
    [self setSessionid:other.sessionid];
  }
  if (other.hasMsgid) {
    [self setMsgid:other.msgid];
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasToid) {
    [self setToid:other.toid];
  }
  if (other.hasSendtime) {
    [self setSendtime:other.sendtime];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasIsread) {
    [self setIsread:other.isread];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionid:[input readString]];
        break;
      }
      case 18: {
        [self setMsgid:[input readString]];
        break;
      }
      case 26: {
        [self setGuid:[input readString]];
        break;
      }
      case 34: {
        [self setFromid:[input readString]];
        break;
      }
      case 42: {
        [self setToid:[input readString]];
        break;
      }
      case 48: {
        [self setSendtime:[input readUInt64]];
        break;
      }
      case 58: {
        [self setContent:[input readString]];
        break;
      }
      case 64: {
        [self setIsread:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionid {
  return resultP2Cmsg.hasSessionid;
}
- (NSString*) sessionid {
  return resultP2Cmsg.sessionid;
}
- (P2CMsgBuilder*) setSessionid:(NSString*) value {
  resultP2Cmsg.hasSessionid = YES;
  resultP2Cmsg.sessionid = value;
  return self;
}
- (P2CMsgBuilder*) clearSessionid {
  resultP2Cmsg.hasSessionid = NO;
  resultP2Cmsg.sessionid = @"";
  return self;
}
- (BOOL) hasMsgid {
  return resultP2Cmsg.hasMsgid;
}
- (NSString*) msgid {
  return resultP2Cmsg.msgid;
}
- (P2CMsgBuilder*) setMsgid:(NSString*) value {
  resultP2Cmsg.hasMsgid = YES;
  resultP2Cmsg.msgid = value;
  return self;
}
- (P2CMsgBuilder*) clearMsgid {
  resultP2Cmsg.hasMsgid = NO;
  resultP2Cmsg.msgid = @"";
  return self;
}
- (BOOL) hasGuid {
  return resultP2Cmsg.hasGuid;
}
- (NSString*) guid {
  return resultP2Cmsg.guid;
}
- (P2CMsgBuilder*) setGuid:(NSString*) value {
  resultP2Cmsg.hasGuid = YES;
  resultP2Cmsg.guid = value;
  return self;
}
- (P2CMsgBuilder*) clearGuid {
  resultP2Cmsg.hasGuid = NO;
  resultP2Cmsg.guid = @"";
  return self;
}
- (BOOL) hasFromid {
  return resultP2Cmsg.hasFromid;
}
- (NSString*) fromid {
  return resultP2Cmsg.fromid;
}
- (P2CMsgBuilder*) setFromid:(NSString*) value {
  resultP2Cmsg.hasFromid = YES;
  resultP2Cmsg.fromid = value;
  return self;
}
- (P2CMsgBuilder*) clearFromid {
  resultP2Cmsg.hasFromid = NO;
  resultP2Cmsg.fromid = @"";
  return self;
}
- (BOOL) hasToid {
  return resultP2Cmsg.hasToid;
}
- (NSString*) toid {
  return resultP2Cmsg.toid;
}
- (P2CMsgBuilder*) setToid:(NSString*) value {
  resultP2Cmsg.hasToid = YES;
  resultP2Cmsg.toid = value;
  return self;
}
- (P2CMsgBuilder*) clearToid {
  resultP2Cmsg.hasToid = NO;
  resultP2Cmsg.toid = @"";
  return self;
}
- (BOOL) hasSendtime {
  return resultP2Cmsg.hasSendtime;
}
- (UInt64) sendtime {
  return resultP2Cmsg.sendtime;
}
- (P2CMsgBuilder*) setSendtime:(UInt64) value {
  resultP2Cmsg.hasSendtime = YES;
  resultP2Cmsg.sendtime = value;
  return self;
}
- (P2CMsgBuilder*) clearSendtime {
  resultP2Cmsg.hasSendtime = NO;
  resultP2Cmsg.sendtime = 0L;
  return self;
}
- (BOOL) hasContent {
  return resultP2Cmsg.hasContent;
}
- (NSString*) content {
  return resultP2Cmsg.content;
}
- (P2CMsgBuilder*) setContent:(NSString*) value {
  resultP2Cmsg.hasContent = YES;
  resultP2Cmsg.content = value;
  return self;
}
- (P2CMsgBuilder*) clearContent {
  resultP2Cmsg.hasContent = NO;
  resultP2Cmsg.content = @"";
  return self;
}
- (BOOL) hasIsread {
  return resultP2Cmsg.hasIsread;
}
- (BOOL) isread {
  return resultP2Cmsg.isread;
}
- (P2CMsgBuilder*) setIsread:(BOOL) value {
  resultP2Cmsg.hasIsread = YES;
  resultP2Cmsg.isread = value;
  return self;
}
- (P2CMsgBuilder*) clearIsread {
  resultP2Cmsg.hasIsread = NO;
  resultP2Cmsg.isread = NO;
  return self;
}
@end

@interface P2CSession ()
@property (strong) NSString* consumerid;
@property (strong) NSString* kefuid;
@property (strong) NSString* sessionid;
@end

@implementation P2CSession

- (BOOL) hasConsumerid {
  return !!hasConsumerid_;
}
- (void) setHasConsumerid:(BOOL) _value_ {
  hasConsumerid_ = !!_value_;
}
@synthesize consumerid;
- (BOOL) hasKefuid {
  return !!hasKefuid_;
}
- (void) setHasKefuid:(BOOL) _value_ {
  hasKefuid_ = !!_value_;
}
@synthesize kefuid;
- (BOOL) hasSessionid {
  return !!hasSessionid_;
}
- (void) setHasSessionid:(BOOL) _value_ {
  hasSessionid_ = !!_value_;
}
@synthesize sessionid;
- (instancetype) init {
  if ((self = [super init])) {
    self.consumerid = @"";
    self.kefuid = @"";
    self.sessionid = @"";
  }
  return self;
}
static P2CSession* defaultP2CSessionInstance = nil;
+ (void) initialize {
  if (self == [P2CSession class]) {
    defaultP2CSessionInstance = [[P2CSession alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CSessionInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CSessionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasConsumerid) {
    return NO;
  }
  if (!self.hasKefuid) {
    return NO;
  }
  if (!self.hasSessionid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasConsumerid) {
    [output writeString:1 value:self.consumerid];
  }
  if (self.hasKefuid) {
    [output writeString:2 value:self.kefuid];
  }
  if (self.hasSessionid) {
    [output writeString:3 value:self.sessionid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasConsumerid) {
    size_ += computeStringSize(1, self.consumerid);
  }
  if (self.hasKefuid) {
    size_ += computeStringSize(2, self.kefuid);
  }
  if (self.hasSessionid) {
    size_ += computeStringSize(3, self.sessionid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CSession*) parseFromData:(NSData*) data {
  return (P2CSession*)[[[P2CSession builder] mergeFromData:data] build];
}
+ (P2CSession*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CSession*)[[[P2CSession builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CSession*) parseFromInputStream:(NSInputStream*) input {
  return (P2CSession*)[[[P2CSession builder] mergeFromInputStream:input] build];
}
+ (P2CSession*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CSession*)[[[P2CSession builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CSession*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CSession*)[[[P2CSession builder] mergeFromCodedInputStream:input] build];
}
+ (P2CSession*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CSession*)[[[P2CSession builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CSessionBuilder*) builder {
  return [[P2CSessionBuilder alloc] init];
}
+ (P2CSessionBuilder*) builderWithPrototype:(P2CSession*) prototype {
  return [[P2CSession builder] mergeFrom:prototype];
}
- (P2CSessionBuilder*) builder {
  return [P2CSession builder];
}
- (P2CSessionBuilder*) toBuilder {
  return [P2CSession builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasConsumerid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"consumerid", self.consumerid];
  }
  if (self.hasKefuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kefuid", self.kefuid];
  }
  if (self.hasSessionid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionid", self.sessionid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasConsumerid) {
    [dictionary setObject: self.consumerid forKey: @"consumerid"];
  }
  if (self.hasKefuid) {
    [dictionary setObject: self.kefuid forKey: @"kefuid"];
  }
  if (self.hasSessionid) {
    [dictionary setObject: self.sessionid forKey: @"sessionid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CSession class]]) {
    return NO;
  }
  P2CSession *otherMessage = other;
  return
      self.hasConsumerid == otherMessage.hasConsumerid &&
      (!self.hasConsumerid || [self.consumerid isEqual:otherMessage.consumerid]) &&
      self.hasKefuid == otherMessage.hasKefuid &&
      (!self.hasKefuid || [self.kefuid isEqual:otherMessage.kefuid]) &&
      self.hasSessionid == otherMessage.hasSessionid &&
      (!self.hasSessionid || [self.sessionid isEqual:otherMessage.sessionid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasConsumerid) {
    hashCode = hashCode * 31 + [self.consumerid hash];
  }
  if (self.hasKefuid) {
    hashCode = hashCode * 31 + [self.kefuid hash];
  }
  if (self.hasSessionid) {
    hashCode = hashCode * 31 + [self.sessionid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CSessionBuilder()
@property (strong) P2CSession* resultP2Csession;
@end

@implementation P2CSessionBuilder
@synthesize resultP2Csession;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2Csession = [[P2CSession alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2Csession;
}
- (P2CSessionBuilder*) clear {
  self.resultP2Csession = [[P2CSession alloc] init];
  return self;
}
- (P2CSessionBuilder*) clone {
  return [P2CSession builderWithPrototype:resultP2Csession];
}
- (P2CSession*) defaultInstance {
  return [P2CSession defaultInstance];
}
- (P2CSession*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CSession*) buildPartial {
  P2CSession* returnMe = resultP2Csession;
  self.resultP2Csession = nil;
  return returnMe;
}
- (P2CSessionBuilder*) mergeFrom:(P2CSession*) other {
  if (other == [P2CSession defaultInstance]) {
    return self;
  }
  if (other.hasConsumerid) {
    [self setConsumerid:other.consumerid];
  }
  if (other.hasKefuid) {
    [self setKefuid:other.kefuid];
  }
  if (other.hasSessionid) {
    [self setSessionid:other.sessionid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CSessionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CSessionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setConsumerid:[input readString]];
        break;
      }
      case 18: {
        [self setKefuid:[input readString]];
        break;
      }
      case 26: {
        [self setSessionid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasConsumerid {
  return resultP2Csession.hasConsumerid;
}
- (NSString*) consumerid {
  return resultP2Csession.consumerid;
}
- (P2CSessionBuilder*) setConsumerid:(NSString*) value {
  resultP2Csession.hasConsumerid = YES;
  resultP2Csession.consumerid = value;
  return self;
}
- (P2CSessionBuilder*) clearConsumerid {
  resultP2Csession.hasConsumerid = NO;
  resultP2Csession.consumerid = @"";
  return self;
}
- (BOOL) hasKefuid {
  return resultP2Csession.hasKefuid;
}
- (NSString*) kefuid {
  return resultP2Csession.kefuid;
}
- (P2CSessionBuilder*) setKefuid:(NSString*) value {
  resultP2Csession.hasKefuid = YES;
  resultP2Csession.kefuid = value;
  return self;
}
- (P2CSessionBuilder*) clearKefuid {
  resultP2Csession.hasKefuid = NO;
  resultP2Csession.kefuid = @"";
  return self;
}
- (BOOL) hasSessionid {
  return resultP2Csession.hasSessionid;
}
- (NSString*) sessionid {
  return resultP2Csession.sessionid;
}
- (P2CSessionBuilder*) setSessionid:(NSString*) value {
  resultP2Csession.hasSessionid = YES;
  resultP2Csession.sessionid = value;
  return self;
}
- (P2CSessionBuilder*) clearSessionid {
  resultP2Csession.hasSessionid = NO;
  resultP2Csession.sessionid = @"";
  return self;
}
@end

@interface CreateP2CSessionReq ()
@property (strong) NSString* consumerid;
@property (strong) NSString* entid;
@property (strong) NSString* content;
@end

@implementation CreateP2CSessionReq

- (BOOL) hasConsumerid {
  return !!hasConsumerid_;
}
- (void) setHasConsumerid:(BOOL) _value_ {
  hasConsumerid_ = !!_value_;
}
@synthesize consumerid;
- (BOOL) hasEntid {
  return !!hasEntid_;
}
- (void) setHasEntid:(BOOL) _value_ {
  hasEntid_ = !!_value_;
}
@synthesize entid;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (instancetype) init {
  if ((self = [super init])) {
    self.consumerid = @"";
    self.entid = @"";
    self.content = @"";
  }
  return self;
}
static CreateP2CSessionReq* defaultCreateP2CSessionReqInstance = nil;
+ (void) initialize {
  if (self == [CreateP2CSessionReq class]) {
    defaultCreateP2CSessionReqInstance = [[CreateP2CSessionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCreateP2CSessionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultCreateP2CSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasConsumerid) {
    return NO;
  }
  if (!self.hasEntid) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasConsumerid) {
    [output writeString:1 value:self.consumerid];
  }
  if (self.hasEntid) {
    [output writeString:2 value:self.entid];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasConsumerid) {
    size_ += computeStringSize(1, self.consumerid);
  }
  if (self.hasEntid) {
    size_ += computeStringSize(2, self.entid);
  }
  if (self.hasContent) {
    size_ += computeStringSize(3, self.content);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CreateP2CSessionReq*) parseFromData:(NSData*) data {
  return (CreateP2CSessionReq*)[[[CreateP2CSessionReq builder] mergeFromData:data] build];
}
+ (CreateP2CSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateP2CSessionReq*)[[[CreateP2CSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreateP2CSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (CreateP2CSessionReq*)[[[CreateP2CSessionReq builder] mergeFromInputStream:input] build];
}
+ (CreateP2CSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateP2CSessionReq*)[[[CreateP2CSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateP2CSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreateP2CSessionReq*)[[[CreateP2CSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (CreateP2CSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateP2CSessionReq*)[[[CreateP2CSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateP2CSessionReqBuilder*) builder {
  return [[CreateP2CSessionReqBuilder alloc] init];
}
+ (CreateP2CSessionReqBuilder*) builderWithPrototype:(CreateP2CSessionReq*) prototype {
  return [[CreateP2CSessionReq builder] mergeFrom:prototype];
}
- (CreateP2CSessionReqBuilder*) builder {
  return [CreateP2CSessionReq builder];
}
- (CreateP2CSessionReqBuilder*) toBuilder {
  return [CreateP2CSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasConsumerid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"consumerid", self.consumerid];
  }
  if (self.hasEntid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entid", self.entid];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasConsumerid) {
    [dictionary setObject: self.consumerid forKey: @"consumerid"];
  }
  if (self.hasEntid) {
    [dictionary setObject: self.entid forKey: @"entid"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CreateP2CSessionReq class]]) {
    return NO;
  }
  CreateP2CSessionReq *otherMessage = other;
  return
      self.hasConsumerid == otherMessage.hasConsumerid &&
      (!self.hasConsumerid || [self.consumerid isEqual:otherMessage.consumerid]) &&
      self.hasEntid == otherMessage.hasEntid &&
      (!self.hasEntid || [self.entid isEqual:otherMessage.entid]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasConsumerid) {
    hashCode = hashCode * 31 + [self.consumerid hash];
  }
  if (self.hasEntid) {
    hashCode = hashCode * 31 + [self.entid hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CreateP2CSessionReqBuilder()
@property (strong) CreateP2CSessionReq* resultCreateP2CsessionReq;
@end

@implementation CreateP2CSessionReqBuilder
@synthesize resultCreateP2CsessionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreateP2CsessionReq = [[CreateP2CSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreateP2CsessionReq;
}
- (CreateP2CSessionReqBuilder*) clear {
  self.resultCreateP2CsessionReq = [[CreateP2CSessionReq alloc] init];
  return self;
}
- (CreateP2CSessionReqBuilder*) clone {
  return [CreateP2CSessionReq builderWithPrototype:resultCreateP2CsessionReq];
}
- (CreateP2CSessionReq*) defaultInstance {
  return [CreateP2CSessionReq defaultInstance];
}
- (CreateP2CSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreateP2CSessionReq*) buildPartial {
  CreateP2CSessionReq* returnMe = resultCreateP2CsessionReq;
  self.resultCreateP2CsessionReq = nil;
  return returnMe;
}
- (CreateP2CSessionReqBuilder*) mergeFrom:(CreateP2CSessionReq*) other {
  if (other == [CreateP2CSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasConsumerid) {
    [self setConsumerid:other.consumerid];
  }
  if (other.hasEntid) {
    [self setEntid:other.entid];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreateP2CSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreateP2CSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setConsumerid:[input readString]];
        break;
      }
      case 18: {
        [self setEntid:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasConsumerid {
  return resultCreateP2CsessionReq.hasConsumerid;
}
- (NSString*) consumerid {
  return resultCreateP2CsessionReq.consumerid;
}
- (CreateP2CSessionReqBuilder*) setConsumerid:(NSString*) value {
  resultCreateP2CsessionReq.hasConsumerid = YES;
  resultCreateP2CsessionReq.consumerid = value;
  return self;
}
- (CreateP2CSessionReqBuilder*) clearConsumerid {
  resultCreateP2CsessionReq.hasConsumerid = NO;
  resultCreateP2CsessionReq.consumerid = @"";
  return self;
}
- (BOOL) hasEntid {
  return resultCreateP2CsessionReq.hasEntid;
}
- (NSString*) entid {
  return resultCreateP2CsessionReq.entid;
}
- (CreateP2CSessionReqBuilder*) setEntid:(NSString*) value {
  resultCreateP2CsessionReq.hasEntid = YES;
  resultCreateP2CsessionReq.entid = value;
  return self;
}
- (CreateP2CSessionReqBuilder*) clearEntid {
  resultCreateP2CsessionReq.hasEntid = NO;
  resultCreateP2CsessionReq.entid = @"";
  return self;
}
- (BOOL) hasContent {
  return resultCreateP2CsessionReq.hasContent;
}
- (NSString*) content {
  return resultCreateP2CsessionReq.content;
}
- (CreateP2CSessionReqBuilder*) setContent:(NSString*) value {
  resultCreateP2CsessionReq.hasContent = YES;
  resultCreateP2CsessionReq.content = value;
  return self;
}
- (CreateP2CSessionReqBuilder*) clearContent {
  resultCreateP2CsessionReq.hasContent = NO;
  resultCreateP2CsessionReq.content = @"";
  return self;
}
@end

@interface CreateP2CSessionRsp ()
@property (strong) P2CSession* session;
@property (strong) NSString* welcomeword;
@property UInt64 resptime;
@property (strong) NSString* content;
@property ResultCode code;
@end

@implementation CreateP2CSessionRsp

- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasWelcomeword {
  return !!hasWelcomeword_;
}
- (void) setHasWelcomeword:(BOOL) _value_ {
  hasWelcomeword_ = !!_value_;
}
@synthesize welcomeword;
- (BOOL) hasResptime {
  return !!hasResptime_;
}
- (void) setHasResptime:(BOOL) _value_ {
  hasResptime_ = !!_value_;
}
@synthesize resptime;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.session = [P2CSession defaultInstance];
    self.welcomeword = @"";
    self.resptime = 0L;
    self.content = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static CreateP2CSessionRsp* defaultCreateP2CSessionRspInstance = nil;
+ (void) initialize {
  if (self == [CreateP2CSessionRsp class]) {
    defaultCreateP2CSessionRspInstance = [[CreateP2CSessionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCreateP2CSessionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultCreateP2CSessionRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSession) {
    return NO;
  }
  if (!self.hasWelcomeword) {
    return NO;
  }
  if (!self.hasResptime) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  if (!self.session.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSession) {
    [output writeMessage:1 value:self.session];
  }
  if (self.hasWelcomeword) {
    [output writeString:2 value:self.welcomeword];
  }
  if (self.hasResptime) {
    [output writeUInt64:3 value:self.resptime];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasCode) {
    [output writeEnum:5 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSession) {
    size_ += computeMessageSize(1, self.session);
  }
  if (self.hasWelcomeword) {
    size_ += computeStringSize(2, self.welcomeword);
  }
  if (self.hasResptime) {
    size_ += computeUInt64Size(3, self.resptime);
  }
  if (self.hasContent) {
    size_ += computeStringSize(4, self.content);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(5, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CreateP2CSessionRsp*) parseFromData:(NSData*) data {
  return (CreateP2CSessionRsp*)[[[CreateP2CSessionRsp builder] mergeFromData:data] build];
}
+ (CreateP2CSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateP2CSessionRsp*)[[[CreateP2CSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CreateP2CSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (CreateP2CSessionRsp*)[[[CreateP2CSessionRsp builder] mergeFromInputStream:input] build];
}
+ (CreateP2CSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateP2CSessionRsp*)[[[CreateP2CSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateP2CSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CreateP2CSessionRsp*)[[[CreateP2CSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (CreateP2CSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CreateP2CSessionRsp*)[[[CreateP2CSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CreateP2CSessionRspBuilder*) builder {
  return [[CreateP2CSessionRspBuilder alloc] init];
}
+ (CreateP2CSessionRspBuilder*) builderWithPrototype:(CreateP2CSessionRsp*) prototype {
  return [[CreateP2CSessionRsp builder] mergeFrom:prototype];
}
- (CreateP2CSessionRspBuilder*) builder {
  return [CreateP2CSessionRsp builder];
}
- (CreateP2CSessionRspBuilder*) toBuilder {
  return [CreateP2CSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"session"];
    [self.session writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWelcomeword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"welcomeword", self.welcomeword];
  }
  if (self.hasResptime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resptime", [NSNumber numberWithLongLong:self.resptime]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSession) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.session storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"session"];
  }
  if (self.hasWelcomeword) {
    [dictionary setObject: self.welcomeword forKey: @"welcomeword"];
  }
  if (self.hasResptime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.resptime] forKey: @"resptime"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CreateP2CSessionRsp class]]) {
    return NO;
  }
  CreateP2CSessionRsp *otherMessage = other;
  return
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || [self.session isEqual:otherMessage.session]) &&
      self.hasWelcomeword == otherMessage.hasWelcomeword &&
      (!self.hasWelcomeword || [self.welcomeword isEqual:otherMessage.welcomeword]) &&
      self.hasResptime == otherMessage.hasResptime &&
      (!self.hasResptime || self.resptime == otherMessage.resptime) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSession) {
    hashCode = hashCode * 31 + [self.session hash];
  }
  if (self.hasWelcomeword) {
    hashCode = hashCode * 31 + [self.welcomeword hash];
  }
  if (self.hasResptime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.resptime] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CreateP2CSessionRspBuilder()
@property (strong) CreateP2CSessionRsp* resultCreateP2CsessionRsp;
@end

@implementation CreateP2CSessionRspBuilder
@synthesize resultCreateP2CsessionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreateP2CsessionRsp = [[CreateP2CSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreateP2CsessionRsp;
}
- (CreateP2CSessionRspBuilder*) clear {
  self.resultCreateP2CsessionRsp = [[CreateP2CSessionRsp alloc] init];
  return self;
}
- (CreateP2CSessionRspBuilder*) clone {
  return [CreateP2CSessionRsp builderWithPrototype:resultCreateP2CsessionRsp];
}
- (CreateP2CSessionRsp*) defaultInstance {
  return [CreateP2CSessionRsp defaultInstance];
}
- (CreateP2CSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CreateP2CSessionRsp*) buildPartial {
  CreateP2CSessionRsp* returnMe = resultCreateP2CsessionRsp;
  self.resultCreateP2CsessionRsp = nil;
  return returnMe;
}
- (CreateP2CSessionRspBuilder*) mergeFrom:(CreateP2CSessionRsp*) other {
  if (other == [CreateP2CSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasSession) {
    [self mergeSession:other.session];
  }
  if (other.hasWelcomeword) {
    [self setWelcomeword:other.welcomeword];
  }
  if (other.hasResptime) {
    [self setResptime:other.resptime];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CreateP2CSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CreateP2CSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        P2CSessionBuilder* subBuilder = [P2CSession builder];
        if (self.hasSession) {
          [subBuilder mergeFrom:self.session];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSession:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setWelcomeword:[input readString]];
        break;
      }
      case 24: {
        [self setResptime:[input readUInt64]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 40: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSession {
  return resultCreateP2CsessionRsp.hasSession;
}
- (P2CSession*) session {
  return resultCreateP2CsessionRsp.session;
}
- (CreateP2CSessionRspBuilder*) setSession:(P2CSession*) value {
  resultCreateP2CsessionRsp.hasSession = YES;
  resultCreateP2CsessionRsp.session = value;
  return self;
}
- (CreateP2CSessionRspBuilder*) setSessionBuilder:(P2CSessionBuilder*) builderForValue {
  return [self setSession:[builderForValue build]];
}
- (CreateP2CSessionRspBuilder*) mergeSession:(P2CSession*) value {
  if (resultCreateP2CsessionRsp.hasSession &&
      resultCreateP2CsessionRsp.session != [P2CSession defaultInstance]) {
    resultCreateP2CsessionRsp.session =
      [[[P2CSession builderWithPrototype:resultCreateP2CsessionRsp.session] mergeFrom:value] buildPartial];
  } else {
    resultCreateP2CsessionRsp.session = value;
  }
  resultCreateP2CsessionRsp.hasSession = YES;
  return self;
}
- (CreateP2CSessionRspBuilder*) clearSession {
  resultCreateP2CsessionRsp.hasSession = NO;
  resultCreateP2CsessionRsp.session = [P2CSession defaultInstance];
  return self;
}
- (BOOL) hasWelcomeword {
  return resultCreateP2CsessionRsp.hasWelcomeword;
}
- (NSString*) welcomeword {
  return resultCreateP2CsessionRsp.welcomeword;
}
- (CreateP2CSessionRspBuilder*) setWelcomeword:(NSString*) value {
  resultCreateP2CsessionRsp.hasWelcomeword = YES;
  resultCreateP2CsessionRsp.welcomeword = value;
  return self;
}
- (CreateP2CSessionRspBuilder*) clearWelcomeword {
  resultCreateP2CsessionRsp.hasWelcomeword = NO;
  resultCreateP2CsessionRsp.welcomeword = @"";
  return self;
}
- (BOOL) hasResptime {
  return resultCreateP2CsessionRsp.hasResptime;
}
- (UInt64) resptime {
  return resultCreateP2CsessionRsp.resptime;
}
- (CreateP2CSessionRspBuilder*) setResptime:(UInt64) value {
  resultCreateP2CsessionRsp.hasResptime = YES;
  resultCreateP2CsessionRsp.resptime = value;
  return self;
}
- (CreateP2CSessionRspBuilder*) clearResptime {
  resultCreateP2CsessionRsp.hasResptime = NO;
  resultCreateP2CsessionRsp.resptime = 0L;
  return self;
}
- (BOOL) hasContent {
  return resultCreateP2CsessionRsp.hasContent;
}
- (NSString*) content {
  return resultCreateP2CsessionRsp.content;
}
- (CreateP2CSessionRspBuilder*) setContent:(NSString*) value {
  resultCreateP2CsessionRsp.hasContent = YES;
  resultCreateP2CsessionRsp.content = value;
  return self;
}
- (CreateP2CSessionRspBuilder*) clearContent {
  resultCreateP2CsessionRsp.hasContent = NO;
  resultCreateP2CsessionRsp.content = @"";
  return self;
}
- (BOOL) hasCode {
  return resultCreateP2CsessionRsp.hasCode;
}
- (ResultCode) code {
  return resultCreateP2CsessionRsp.code;
}
- (CreateP2CSessionRspBuilder*) setCode:(ResultCode) value {
  resultCreateP2CsessionRsp.hasCode = YES;
  resultCreateP2CsessionRsp.code = value;
  return self;
}
- (CreateP2CSessionRspBuilder*) clearCode {
  resultCreateP2CsessionRsp.hasCode = NO;
  resultCreateP2CsessionRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface CloseP2CSessionReq ()
@property (strong) NSString* userid;
@property (strong) NSString* entid;
@property (strong) P2CSession* session;
@property (strong) NSString* content;
@end

@implementation CloseP2CSessionReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasEntid {
  return !!hasEntid_;
}
- (void) setHasEntid:(BOOL) _value_ {
  hasEntid_ = !!_value_;
}
@synthesize entid;
- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) _value_ {
  hasSession_ = !!_value_;
}
@synthesize session;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.entid = @"";
    self.session = [P2CSession defaultInstance];
    self.content = @"";
  }
  return self;
}
static CloseP2CSessionReq* defaultCloseP2CSessionReqInstance = nil;
+ (void) initialize {
  if (self == [CloseP2CSessionReq class]) {
    defaultCloseP2CSessionReqInstance = [[CloseP2CSessionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCloseP2CSessionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultCloseP2CSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasEntid) {
    return NO;
  }
  if (!self.hasSession) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.session.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasEntid) {
    [output writeString:2 value:self.entid];
  }
  if (self.hasSession) {
    [output writeMessage:3 value:self.session];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasEntid) {
    size_ += computeStringSize(2, self.entid);
  }
  if (self.hasSession) {
    size_ += computeMessageSize(3, self.session);
  }
  if (self.hasContent) {
    size_ += computeStringSize(4, self.content);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CloseP2CSessionReq*) parseFromData:(NSData*) data {
  return (CloseP2CSessionReq*)[[[CloseP2CSessionReq builder] mergeFromData:data] build];
}
+ (CloseP2CSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CloseP2CSessionReq*)[[[CloseP2CSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CloseP2CSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (CloseP2CSessionReq*)[[[CloseP2CSessionReq builder] mergeFromInputStream:input] build];
}
+ (CloseP2CSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CloseP2CSessionReq*)[[[CloseP2CSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CloseP2CSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CloseP2CSessionReq*)[[[CloseP2CSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (CloseP2CSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CloseP2CSessionReq*)[[[CloseP2CSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CloseP2CSessionReqBuilder*) builder {
  return [[CloseP2CSessionReqBuilder alloc] init];
}
+ (CloseP2CSessionReqBuilder*) builderWithPrototype:(CloseP2CSessionReq*) prototype {
  return [[CloseP2CSessionReq builder] mergeFrom:prototype];
}
- (CloseP2CSessionReqBuilder*) builder {
  return [CloseP2CSessionReq builder];
}
- (CloseP2CSessionReqBuilder*) toBuilder {
  return [CloseP2CSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasEntid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entid", self.entid];
  }
  if (self.hasSession) {
    [output appendFormat:@"%@%@ {\n", indent, @"session"];
    [self.session writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasEntid) {
    [dictionary setObject: self.entid forKey: @"entid"];
  }
  if (self.hasSession) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.session storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"session"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CloseP2CSessionReq class]]) {
    return NO;
  }
  CloseP2CSessionReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasEntid == otherMessage.hasEntid &&
      (!self.hasEntid || [self.entid isEqual:otherMessage.entid]) &&
      self.hasSession == otherMessage.hasSession &&
      (!self.hasSession || [self.session isEqual:otherMessage.session]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasEntid) {
    hashCode = hashCode * 31 + [self.entid hash];
  }
  if (self.hasSession) {
    hashCode = hashCode * 31 + [self.session hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CloseP2CSessionReqBuilder()
@property (strong) CloseP2CSessionReq* resultCloseP2CsessionReq;
@end

@implementation CloseP2CSessionReqBuilder
@synthesize resultCloseP2CsessionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCloseP2CsessionReq = [[CloseP2CSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCloseP2CsessionReq;
}
- (CloseP2CSessionReqBuilder*) clear {
  self.resultCloseP2CsessionReq = [[CloseP2CSessionReq alloc] init];
  return self;
}
- (CloseP2CSessionReqBuilder*) clone {
  return [CloseP2CSessionReq builderWithPrototype:resultCloseP2CsessionReq];
}
- (CloseP2CSessionReq*) defaultInstance {
  return [CloseP2CSessionReq defaultInstance];
}
- (CloseP2CSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CloseP2CSessionReq*) buildPartial {
  CloseP2CSessionReq* returnMe = resultCloseP2CsessionReq;
  self.resultCloseP2CsessionReq = nil;
  return returnMe;
}
- (CloseP2CSessionReqBuilder*) mergeFrom:(CloseP2CSessionReq*) other {
  if (other == [CloseP2CSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasEntid) {
    [self setEntid:other.entid];
  }
  if (other.hasSession) {
    [self mergeSession:other.session];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CloseP2CSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CloseP2CSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setEntid:[input readString]];
        break;
      }
      case 26: {
        P2CSessionBuilder* subBuilder = [P2CSession builder];
        if (self.hasSession) {
          [subBuilder mergeFrom:self.session];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSession:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultCloseP2CsessionReq.hasUserid;
}
- (NSString*) userid {
  return resultCloseP2CsessionReq.userid;
}
- (CloseP2CSessionReqBuilder*) setUserid:(NSString*) value {
  resultCloseP2CsessionReq.hasUserid = YES;
  resultCloseP2CsessionReq.userid = value;
  return self;
}
- (CloseP2CSessionReqBuilder*) clearUserid {
  resultCloseP2CsessionReq.hasUserid = NO;
  resultCloseP2CsessionReq.userid = @"";
  return self;
}
- (BOOL) hasEntid {
  return resultCloseP2CsessionReq.hasEntid;
}
- (NSString*) entid {
  return resultCloseP2CsessionReq.entid;
}
- (CloseP2CSessionReqBuilder*) setEntid:(NSString*) value {
  resultCloseP2CsessionReq.hasEntid = YES;
  resultCloseP2CsessionReq.entid = value;
  return self;
}
- (CloseP2CSessionReqBuilder*) clearEntid {
  resultCloseP2CsessionReq.hasEntid = NO;
  resultCloseP2CsessionReq.entid = @"";
  return self;
}
- (BOOL) hasSession {
  return resultCloseP2CsessionReq.hasSession;
}
- (P2CSession*) session {
  return resultCloseP2CsessionReq.session;
}
- (CloseP2CSessionReqBuilder*) setSession:(P2CSession*) value {
  resultCloseP2CsessionReq.hasSession = YES;
  resultCloseP2CsessionReq.session = value;
  return self;
}
- (CloseP2CSessionReqBuilder*) setSessionBuilder:(P2CSessionBuilder*) builderForValue {
  return [self setSession:[builderForValue build]];
}
- (CloseP2CSessionReqBuilder*) mergeSession:(P2CSession*) value {
  if (resultCloseP2CsessionReq.hasSession &&
      resultCloseP2CsessionReq.session != [P2CSession defaultInstance]) {
    resultCloseP2CsessionReq.session =
      [[[P2CSession builderWithPrototype:resultCloseP2CsessionReq.session] mergeFrom:value] buildPartial];
  } else {
    resultCloseP2CsessionReq.session = value;
  }
  resultCloseP2CsessionReq.hasSession = YES;
  return self;
}
- (CloseP2CSessionReqBuilder*) clearSession {
  resultCloseP2CsessionReq.hasSession = NO;
  resultCloseP2CsessionReq.session = [P2CSession defaultInstance];
  return self;
}
- (BOOL) hasContent {
  return resultCloseP2CsessionReq.hasContent;
}
- (NSString*) content {
  return resultCloseP2CsessionReq.content;
}
- (CloseP2CSessionReqBuilder*) setContent:(NSString*) value {
  resultCloseP2CsessionReq.hasContent = YES;
  resultCloseP2CsessionReq.content = value;
  return self;
}
- (CloseP2CSessionReqBuilder*) clearContent {
  resultCloseP2CsessionReq.hasContent = NO;
  resultCloseP2CsessionReq.content = @"";
  return self;
}
@end

@interface CloseP2CSessionRsp ()
@property (strong) NSString* userid;
@property (strong) NSString* greeting;
@property UInt64 resptime;
@property (strong) NSString* content;
@property ResultCode code;
@end

@implementation CloseP2CSessionRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasGreeting {
  return !!hasGreeting_;
}
- (void) setHasGreeting:(BOOL) _value_ {
  hasGreeting_ = !!_value_;
}
@synthesize greeting;
- (BOOL) hasResptime {
  return !!hasResptime_;
}
- (void) setHasResptime:(BOOL) _value_ {
  hasResptime_ = !!_value_;
}
@synthesize resptime;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.greeting = @"";
    self.resptime = 0L;
    self.content = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static CloseP2CSessionRsp* defaultCloseP2CSessionRspInstance = nil;
+ (void) initialize {
  if (self == [CloseP2CSessionRsp class]) {
    defaultCloseP2CSessionRspInstance = [[CloseP2CSessionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCloseP2CSessionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultCloseP2CSessionRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasGreeting) {
    return NO;
  }
  if (!self.hasResptime) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasGreeting) {
    [output writeString:2 value:self.greeting];
  }
  if (self.hasResptime) {
    [output writeUInt64:3 value:self.resptime];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasCode) {
    [output writeEnum:5 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasGreeting) {
    size_ += computeStringSize(2, self.greeting);
  }
  if (self.hasResptime) {
    size_ += computeUInt64Size(3, self.resptime);
  }
  if (self.hasContent) {
    size_ += computeStringSize(4, self.content);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(5, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CloseP2CSessionRsp*) parseFromData:(NSData*) data {
  return (CloseP2CSessionRsp*)[[[CloseP2CSessionRsp builder] mergeFromData:data] build];
}
+ (CloseP2CSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CloseP2CSessionRsp*)[[[CloseP2CSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CloseP2CSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (CloseP2CSessionRsp*)[[[CloseP2CSessionRsp builder] mergeFromInputStream:input] build];
}
+ (CloseP2CSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CloseP2CSessionRsp*)[[[CloseP2CSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CloseP2CSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CloseP2CSessionRsp*)[[[CloseP2CSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (CloseP2CSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CloseP2CSessionRsp*)[[[CloseP2CSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CloseP2CSessionRspBuilder*) builder {
  return [[CloseP2CSessionRspBuilder alloc] init];
}
+ (CloseP2CSessionRspBuilder*) builderWithPrototype:(CloseP2CSessionRsp*) prototype {
  return [[CloseP2CSessionRsp builder] mergeFrom:prototype];
}
- (CloseP2CSessionRspBuilder*) builder {
  return [CloseP2CSessionRsp builder];
}
- (CloseP2CSessionRspBuilder*) toBuilder {
  return [CloseP2CSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasGreeting) {
    [output appendFormat:@"%@%@: %@\n", indent, @"greeting", self.greeting];
  }
  if (self.hasResptime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resptime", [NSNumber numberWithLongLong:self.resptime]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasGreeting) {
    [dictionary setObject: self.greeting forKey: @"greeting"];
  }
  if (self.hasResptime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.resptime] forKey: @"resptime"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CloseP2CSessionRsp class]]) {
    return NO;
  }
  CloseP2CSessionRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasGreeting == otherMessage.hasGreeting &&
      (!self.hasGreeting || [self.greeting isEqual:otherMessage.greeting]) &&
      self.hasResptime == otherMessage.hasResptime &&
      (!self.hasResptime || self.resptime == otherMessage.resptime) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasGreeting) {
    hashCode = hashCode * 31 + [self.greeting hash];
  }
  if (self.hasResptime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.resptime] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CloseP2CSessionRspBuilder()
@property (strong) CloseP2CSessionRsp* resultCloseP2CsessionRsp;
@end

@implementation CloseP2CSessionRspBuilder
@synthesize resultCloseP2CsessionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCloseP2CsessionRsp = [[CloseP2CSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCloseP2CsessionRsp;
}
- (CloseP2CSessionRspBuilder*) clear {
  self.resultCloseP2CsessionRsp = [[CloseP2CSessionRsp alloc] init];
  return self;
}
- (CloseP2CSessionRspBuilder*) clone {
  return [CloseP2CSessionRsp builderWithPrototype:resultCloseP2CsessionRsp];
}
- (CloseP2CSessionRsp*) defaultInstance {
  return [CloseP2CSessionRsp defaultInstance];
}
- (CloseP2CSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CloseP2CSessionRsp*) buildPartial {
  CloseP2CSessionRsp* returnMe = resultCloseP2CsessionRsp;
  self.resultCloseP2CsessionRsp = nil;
  return returnMe;
}
- (CloseP2CSessionRspBuilder*) mergeFrom:(CloseP2CSessionRsp*) other {
  if (other == [CloseP2CSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasGreeting) {
    [self setGreeting:other.greeting];
  }
  if (other.hasResptime) {
    [self setResptime:other.resptime];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CloseP2CSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CloseP2CSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setGreeting:[input readString]];
        break;
      }
      case 24: {
        [self setResptime:[input readUInt64]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 40: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultCloseP2CsessionRsp.hasUserid;
}
- (NSString*) userid {
  return resultCloseP2CsessionRsp.userid;
}
- (CloseP2CSessionRspBuilder*) setUserid:(NSString*) value {
  resultCloseP2CsessionRsp.hasUserid = YES;
  resultCloseP2CsessionRsp.userid = value;
  return self;
}
- (CloseP2CSessionRspBuilder*) clearUserid {
  resultCloseP2CsessionRsp.hasUserid = NO;
  resultCloseP2CsessionRsp.userid = @"";
  return self;
}
- (BOOL) hasGreeting {
  return resultCloseP2CsessionRsp.hasGreeting;
}
- (NSString*) greeting {
  return resultCloseP2CsessionRsp.greeting;
}
- (CloseP2CSessionRspBuilder*) setGreeting:(NSString*) value {
  resultCloseP2CsessionRsp.hasGreeting = YES;
  resultCloseP2CsessionRsp.greeting = value;
  return self;
}
- (CloseP2CSessionRspBuilder*) clearGreeting {
  resultCloseP2CsessionRsp.hasGreeting = NO;
  resultCloseP2CsessionRsp.greeting = @"";
  return self;
}
- (BOOL) hasResptime {
  return resultCloseP2CsessionRsp.hasResptime;
}
- (UInt64) resptime {
  return resultCloseP2CsessionRsp.resptime;
}
- (CloseP2CSessionRspBuilder*) setResptime:(UInt64) value {
  resultCloseP2CsessionRsp.hasResptime = YES;
  resultCloseP2CsessionRsp.resptime = value;
  return self;
}
- (CloseP2CSessionRspBuilder*) clearResptime {
  resultCloseP2CsessionRsp.hasResptime = NO;
  resultCloseP2CsessionRsp.resptime = 0L;
  return self;
}
- (BOOL) hasContent {
  return resultCloseP2CsessionRsp.hasContent;
}
- (NSString*) content {
  return resultCloseP2CsessionRsp.content;
}
- (CloseP2CSessionRspBuilder*) setContent:(NSString*) value {
  resultCloseP2CsessionRsp.hasContent = YES;
  resultCloseP2CsessionRsp.content = value;
  return self;
}
- (CloseP2CSessionRspBuilder*) clearContent {
  resultCloseP2CsessionRsp.hasContent = NO;
  resultCloseP2CsessionRsp.content = @"";
  return self;
}
- (BOOL) hasCode {
  return resultCloseP2CsessionRsp.hasCode;
}
- (ResultCode) code {
  return resultCloseP2CsessionRsp.code;
}
- (CloseP2CSessionRspBuilder*) setCode:(ResultCode) value {
  resultCloseP2CsessionRsp.hasCode = YES;
  resultCloseP2CsessionRsp.code = value;
  return self;
}
- (CloseP2CSessionRspBuilder*) clearCode {
  resultCloseP2CsessionRsp.hasCode = NO;
  resultCloseP2CsessionRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface P2CMsgRsp ()
@property (strong) NSString* userid;
@property (strong) NSString* guid;
@property ResultCode code;
@end

@implementation P2CMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) _value_ {
  hasGuid_ = !!_value_;
}
@synthesize guid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.guid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static P2CMsgRsp* defaultP2CMsgRspInstance = nil;
+ (void) initialize {
  if (self == [P2CMsgRsp class]) {
    defaultP2CMsgRspInstance = [[P2CMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CMsgRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasGuid) {
    [output writeString:2 value:self.guid];
  }
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasGuid) {
    size_ += computeStringSize(2, self.guid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CMsgRsp*) parseFromData:(NSData*) data {
  return (P2CMsgRsp*)[[[P2CMsgRsp builder] mergeFromData:data] build];
}
+ (P2CMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgRsp*)[[[P2CMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (P2CMsgRsp*)[[[P2CMsgRsp builder] mergeFromInputStream:input] build];
}
+ (P2CMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgRsp*)[[[P2CMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CMsgRsp*)[[[P2CMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (P2CMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgRsp*)[[[P2CMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgRspBuilder*) builder {
  return [[P2CMsgRspBuilder alloc] init];
}
+ (P2CMsgRspBuilder*) builderWithPrototype:(P2CMsgRsp*) prototype {
  return [[P2CMsgRsp builder] mergeFrom:prototype];
}
- (P2CMsgRspBuilder*) builder {
  return [P2CMsgRsp builder];
}
- (P2CMsgRspBuilder*) toBuilder {
  return [P2CMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasGuid) {
    [dictionary setObject: self.guid forKey: @"guid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CMsgRsp class]]) {
    return NO;
  }
  P2CMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CMsgRspBuilder()
@property (strong) P2CMsgRsp* resultP2CmsgRsp;
@end

@implementation P2CMsgRspBuilder
@synthesize resultP2CmsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CmsgRsp = [[P2CMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CmsgRsp;
}
- (P2CMsgRspBuilder*) clear {
  self.resultP2CmsgRsp = [[P2CMsgRsp alloc] init];
  return self;
}
- (P2CMsgRspBuilder*) clone {
  return [P2CMsgRsp builderWithPrototype:resultP2CmsgRsp];
}
- (P2CMsgRsp*) defaultInstance {
  return [P2CMsgRsp defaultInstance];
}
- (P2CMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CMsgRsp*) buildPartial {
  P2CMsgRsp* returnMe = resultP2CmsgRsp;
  self.resultP2CmsgRsp = nil;
  return returnMe;
}
- (P2CMsgRspBuilder*) mergeFrom:(P2CMsgRsp*) other {
  if (other == [P2CMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setGuid:[input readString]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CmsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultP2CmsgRsp.userid;
}
- (P2CMsgRspBuilder*) setUserid:(NSString*) value {
  resultP2CmsgRsp.hasUserid = YES;
  resultP2CmsgRsp.userid = value;
  return self;
}
- (P2CMsgRspBuilder*) clearUserid {
  resultP2CmsgRsp.hasUserid = NO;
  resultP2CmsgRsp.userid = @"";
  return self;
}
- (BOOL) hasGuid {
  return resultP2CmsgRsp.hasGuid;
}
- (NSString*) guid {
  return resultP2CmsgRsp.guid;
}
- (P2CMsgRspBuilder*) setGuid:(NSString*) value {
  resultP2CmsgRsp.hasGuid = YES;
  resultP2CmsgRsp.guid = value;
  return self;
}
- (P2CMsgRspBuilder*) clearGuid {
  resultP2CmsgRsp.hasGuid = NO;
  resultP2CmsgRsp.guid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultP2CmsgRsp.hasCode;
}
- (ResultCode) code {
  return resultP2CmsgRsp.code;
}
- (P2CMsgRspBuilder*) setCode:(ResultCode) value {
  resultP2CmsgRsp.hasCode = YES;
  resultP2CmsgRsp.code = value;
  return self;
}
- (P2CMsgRspBuilder*) clearCode {
  resultP2CmsgRsp.hasCode = NO;
  resultP2CmsgRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface P2CMsgAckReq ()
@property (strong) NSString* userid;
@property (strong) NSString* msgid;
@end

@implementation P2CMsgAckReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasMsgid {
  return !!hasMsgid_;
}
- (void) setHasMsgid:(BOOL) _value_ {
  hasMsgid_ = !!_value_;
}
@synthesize msgid;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.msgid = @"";
  }
  return self;
}
static P2CMsgAckReq* defaultP2CMsgAckReqInstance = nil;
+ (void) initialize {
  if (self == [P2CMsgAckReq class]) {
    defaultP2CMsgAckReqInstance = [[P2CMsgAckReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CMsgAckReqInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CMsgAckReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasMsgid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasMsgid) {
    [output writeString:2 value:self.msgid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasMsgid) {
    size_ += computeStringSize(2, self.msgid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CMsgAckReq*) parseFromData:(NSData*) data {
  return (P2CMsgAckReq*)[[[P2CMsgAckReq builder] mergeFromData:data] build];
}
+ (P2CMsgAckReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgAckReq*)[[[P2CMsgAckReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgAckReq*) parseFromInputStream:(NSInputStream*) input {
  return (P2CMsgAckReq*)[[[P2CMsgAckReq builder] mergeFromInputStream:input] build];
}
+ (P2CMsgAckReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgAckReq*)[[[P2CMsgAckReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgAckReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CMsgAckReq*)[[[P2CMsgAckReq builder] mergeFromCodedInputStream:input] build];
}
+ (P2CMsgAckReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgAckReq*)[[[P2CMsgAckReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgAckReqBuilder*) builder {
  return [[P2CMsgAckReqBuilder alloc] init];
}
+ (P2CMsgAckReqBuilder*) builderWithPrototype:(P2CMsgAckReq*) prototype {
  return [[P2CMsgAckReq builder] mergeFrom:prototype];
}
- (P2CMsgAckReqBuilder*) builder {
  return [P2CMsgAckReq builder];
}
- (P2CMsgAckReqBuilder*) toBuilder {
  return [P2CMsgAckReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasMsgid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgid", self.msgid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasMsgid) {
    [dictionary setObject: self.msgid forKey: @"msgid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CMsgAckReq class]]) {
    return NO;
  }
  P2CMsgAckReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasMsgid == otherMessage.hasMsgid &&
      (!self.hasMsgid || [self.msgid isEqual:otherMessage.msgid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasMsgid) {
    hashCode = hashCode * 31 + [self.msgid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CMsgAckReqBuilder()
@property (strong) P2CMsgAckReq* resultP2CmsgAckReq;
@end

@implementation P2CMsgAckReqBuilder
@synthesize resultP2CmsgAckReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CmsgAckReq = [[P2CMsgAckReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CmsgAckReq;
}
- (P2CMsgAckReqBuilder*) clear {
  self.resultP2CmsgAckReq = [[P2CMsgAckReq alloc] init];
  return self;
}
- (P2CMsgAckReqBuilder*) clone {
  return [P2CMsgAckReq builderWithPrototype:resultP2CmsgAckReq];
}
- (P2CMsgAckReq*) defaultInstance {
  return [P2CMsgAckReq defaultInstance];
}
- (P2CMsgAckReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CMsgAckReq*) buildPartial {
  P2CMsgAckReq* returnMe = resultP2CmsgAckReq;
  self.resultP2CmsgAckReq = nil;
  return returnMe;
}
- (P2CMsgAckReqBuilder*) mergeFrom:(P2CMsgAckReq*) other {
  if (other == [P2CMsgAckReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasMsgid) {
    [self setMsgid:other.msgid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CMsgAckReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CMsgAckReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setMsgid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CmsgAckReq.hasUserid;
}
- (NSString*) userid {
  return resultP2CmsgAckReq.userid;
}
- (P2CMsgAckReqBuilder*) setUserid:(NSString*) value {
  resultP2CmsgAckReq.hasUserid = YES;
  resultP2CmsgAckReq.userid = value;
  return self;
}
- (P2CMsgAckReqBuilder*) clearUserid {
  resultP2CmsgAckReq.hasUserid = NO;
  resultP2CmsgAckReq.userid = @"";
  return self;
}
- (BOOL) hasMsgid {
  return resultP2CmsgAckReq.hasMsgid;
}
- (NSString*) msgid {
  return resultP2CmsgAckReq.msgid;
}
- (P2CMsgAckReqBuilder*) setMsgid:(NSString*) value {
  resultP2CmsgAckReq.hasMsgid = YES;
  resultP2CmsgAckReq.msgid = value;
  return self;
}
- (P2CMsgAckReqBuilder*) clearMsgid {
  resultP2CmsgAckReq.hasMsgid = NO;
  resultP2CmsgAckReq.msgid = @"";
  return self;
}
@end

@interface P2CMsgAckRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation P2CMsgAckRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static P2CMsgAckRsp* defaultP2CMsgAckRspInstance = nil;
+ (void) initialize {
  if (self == [P2CMsgAckRsp class]) {
    defaultP2CMsgAckRspInstance = [[P2CMsgAckRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CMsgAckRspInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CMsgAckRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CMsgAckRsp*) parseFromData:(NSData*) data {
  return (P2CMsgAckRsp*)[[[P2CMsgAckRsp builder] mergeFromData:data] build];
}
+ (P2CMsgAckRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgAckRsp*)[[[P2CMsgAckRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgAckRsp*) parseFromInputStream:(NSInputStream*) input {
  return (P2CMsgAckRsp*)[[[P2CMsgAckRsp builder] mergeFromInputStream:input] build];
}
+ (P2CMsgAckRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgAckRsp*)[[[P2CMsgAckRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgAckRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CMsgAckRsp*)[[[P2CMsgAckRsp builder] mergeFromCodedInputStream:input] build];
}
+ (P2CMsgAckRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgAckRsp*)[[[P2CMsgAckRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgAckRspBuilder*) builder {
  return [[P2CMsgAckRspBuilder alloc] init];
}
+ (P2CMsgAckRspBuilder*) builderWithPrototype:(P2CMsgAckRsp*) prototype {
  return [[P2CMsgAckRsp builder] mergeFrom:prototype];
}
- (P2CMsgAckRspBuilder*) builder {
  return [P2CMsgAckRsp builder];
}
- (P2CMsgAckRspBuilder*) toBuilder {
  return [P2CMsgAckRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CMsgAckRsp class]]) {
    return NO;
  }
  P2CMsgAckRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CMsgAckRspBuilder()
@property (strong) P2CMsgAckRsp* resultP2CmsgAckRsp;
@end

@implementation P2CMsgAckRspBuilder
@synthesize resultP2CmsgAckRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CmsgAckRsp = [[P2CMsgAckRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CmsgAckRsp;
}
- (P2CMsgAckRspBuilder*) clear {
  self.resultP2CmsgAckRsp = [[P2CMsgAckRsp alloc] init];
  return self;
}
- (P2CMsgAckRspBuilder*) clone {
  return [P2CMsgAckRsp builderWithPrototype:resultP2CmsgAckRsp];
}
- (P2CMsgAckRsp*) defaultInstance {
  return [P2CMsgAckRsp defaultInstance];
}
- (P2CMsgAckRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CMsgAckRsp*) buildPartial {
  P2CMsgAckRsp* returnMe = resultP2CmsgAckRsp;
  self.resultP2CmsgAckRsp = nil;
  return returnMe;
}
- (P2CMsgAckRspBuilder*) mergeFrom:(P2CMsgAckRsp*) other {
  if (other == [P2CMsgAckRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CMsgAckRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CMsgAckRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CmsgAckRsp.hasUserid;
}
- (NSString*) userid {
  return resultP2CmsgAckRsp.userid;
}
- (P2CMsgAckRspBuilder*) setUserid:(NSString*) value {
  resultP2CmsgAckRsp.hasUserid = YES;
  resultP2CmsgAckRsp.userid = value;
  return self;
}
- (P2CMsgAckRspBuilder*) clearUserid {
  resultP2CmsgAckRsp.hasUserid = NO;
  resultP2CmsgAckRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultP2CmsgAckRsp.hasCode;
}
- (ResultCode) code {
  return resultP2CmsgAckRsp.code;
}
- (P2CMsgAckRspBuilder*) setCode:(ResultCode) value {
  resultP2CmsgAckRsp.hasCode = YES;
  resultP2CmsgAckRsp.code = value;
  return self;
}
- (P2CMsgAckRspBuilder*) clearCode {
  resultP2CmsgAckRsp.hasCode = NO;
  resultP2CmsgAckRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface P2CMsgReadReq ()
@property (strong) NSString* userid;
@property (strong) NSString* msgid;
@end

@implementation P2CMsgReadReq

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasMsgid {
  return !!hasMsgid_;
}
- (void) setHasMsgid:(BOOL) _value_ {
  hasMsgid_ = !!_value_;
}
@synthesize msgid;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.msgid = @"";
  }
  return self;
}
static P2CMsgReadReq* defaultP2CMsgReadReqInstance = nil;
+ (void) initialize {
  if (self == [P2CMsgReadReq class]) {
    defaultP2CMsgReadReqInstance = [[P2CMsgReadReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CMsgReadReqInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CMsgReadReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasMsgid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasMsgid) {
    [output writeString:2 value:self.msgid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasMsgid) {
    size_ += computeStringSize(2, self.msgid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CMsgReadReq*) parseFromData:(NSData*) data {
  return (P2CMsgReadReq*)[[[P2CMsgReadReq builder] mergeFromData:data] build];
}
+ (P2CMsgReadReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgReadReq*)[[[P2CMsgReadReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgReadReq*) parseFromInputStream:(NSInputStream*) input {
  return (P2CMsgReadReq*)[[[P2CMsgReadReq builder] mergeFromInputStream:input] build];
}
+ (P2CMsgReadReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgReadReq*)[[[P2CMsgReadReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgReadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CMsgReadReq*)[[[P2CMsgReadReq builder] mergeFromCodedInputStream:input] build];
}
+ (P2CMsgReadReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgReadReq*)[[[P2CMsgReadReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgReadReqBuilder*) builder {
  return [[P2CMsgReadReqBuilder alloc] init];
}
+ (P2CMsgReadReqBuilder*) builderWithPrototype:(P2CMsgReadReq*) prototype {
  return [[P2CMsgReadReq builder] mergeFrom:prototype];
}
- (P2CMsgReadReqBuilder*) builder {
  return [P2CMsgReadReq builder];
}
- (P2CMsgReadReqBuilder*) toBuilder {
  return [P2CMsgReadReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasMsgid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgid", self.msgid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasMsgid) {
    [dictionary setObject: self.msgid forKey: @"msgid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CMsgReadReq class]]) {
    return NO;
  }
  P2CMsgReadReq *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasMsgid == otherMessage.hasMsgid &&
      (!self.hasMsgid || [self.msgid isEqual:otherMessage.msgid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasMsgid) {
    hashCode = hashCode * 31 + [self.msgid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CMsgReadReqBuilder()
@property (strong) P2CMsgReadReq* resultP2CmsgReadReq;
@end

@implementation P2CMsgReadReqBuilder
@synthesize resultP2CmsgReadReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CmsgReadReq = [[P2CMsgReadReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CmsgReadReq;
}
- (P2CMsgReadReqBuilder*) clear {
  self.resultP2CmsgReadReq = [[P2CMsgReadReq alloc] init];
  return self;
}
- (P2CMsgReadReqBuilder*) clone {
  return [P2CMsgReadReq builderWithPrototype:resultP2CmsgReadReq];
}
- (P2CMsgReadReq*) defaultInstance {
  return [P2CMsgReadReq defaultInstance];
}
- (P2CMsgReadReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CMsgReadReq*) buildPartial {
  P2CMsgReadReq* returnMe = resultP2CmsgReadReq;
  self.resultP2CmsgReadReq = nil;
  return returnMe;
}
- (P2CMsgReadReqBuilder*) mergeFrom:(P2CMsgReadReq*) other {
  if (other == [P2CMsgReadReq defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasMsgid) {
    [self setMsgid:other.msgid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CMsgReadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CMsgReadReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setMsgid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CmsgReadReq.hasUserid;
}
- (NSString*) userid {
  return resultP2CmsgReadReq.userid;
}
- (P2CMsgReadReqBuilder*) setUserid:(NSString*) value {
  resultP2CmsgReadReq.hasUserid = YES;
  resultP2CmsgReadReq.userid = value;
  return self;
}
- (P2CMsgReadReqBuilder*) clearUserid {
  resultP2CmsgReadReq.hasUserid = NO;
  resultP2CmsgReadReq.userid = @"";
  return self;
}
- (BOOL) hasMsgid {
  return resultP2CmsgReadReq.hasMsgid;
}
- (NSString*) msgid {
  return resultP2CmsgReadReq.msgid;
}
- (P2CMsgReadReqBuilder*) setMsgid:(NSString*) value {
  resultP2CmsgReadReq.hasMsgid = YES;
  resultP2CmsgReadReq.msgid = value;
  return self;
}
- (P2CMsgReadReqBuilder*) clearMsgid {
  resultP2CmsgReadReq.hasMsgid = NO;
  resultP2CmsgReadReq.msgid = @"";
  return self;
}
@end

@interface P2CMsgReadRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation P2CMsgReadRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static P2CMsgReadRsp* defaultP2CMsgReadRspInstance = nil;
+ (void) initialize {
  if (self == [P2CMsgReadRsp class]) {
    defaultP2CMsgReadRspInstance = [[P2CMsgReadRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CMsgReadRspInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CMsgReadRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CMsgReadRsp*) parseFromData:(NSData*) data {
  return (P2CMsgReadRsp*)[[[P2CMsgReadRsp builder] mergeFromData:data] build];
}
+ (P2CMsgReadRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgReadRsp*)[[[P2CMsgReadRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgReadRsp*) parseFromInputStream:(NSInputStream*) input {
  return (P2CMsgReadRsp*)[[[P2CMsgReadRsp builder] mergeFromInputStream:input] build];
}
+ (P2CMsgReadRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgReadRsp*)[[[P2CMsgReadRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgReadRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CMsgReadRsp*)[[[P2CMsgReadRsp builder] mergeFromCodedInputStream:input] build];
}
+ (P2CMsgReadRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CMsgReadRsp*)[[[P2CMsgReadRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CMsgReadRspBuilder*) builder {
  return [[P2CMsgReadRspBuilder alloc] init];
}
+ (P2CMsgReadRspBuilder*) builderWithPrototype:(P2CMsgReadRsp*) prototype {
  return [[P2CMsgReadRsp builder] mergeFrom:prototype];
}
- (P2CMsgReadRspBuilder*) builder {
  return [P2CMsgReadRsp builder];
}
- (P2CMsgReadRspBuilder*) toBuilder {
  return [P2CMsgReadRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CMsgReadRsp class]]) {
    return NO;
  }
  P2CMsgReadRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CMsgReadRspBuilder()
@property (strong) P2CMsgReadRsp* resultP2CmsgReadRsp;
@end

@implementation P2CMsgReadRspBuilder
@synthesize resultP2CmsgReadRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CmsgReadRsp = [[P2CMsgReadRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CmsgReadRsp;
}
- (P2CMsgReadRspBuilder*) clear {
  self.resultP2CmsgReadRsp = [[P2CMsgReadRsp alloc] init];
  return self;
}
- (P2CMsgReadRspBuilder*) clone {
  return [P2CMsgReadRsp builderWithPrototype:resultP2CmsgReadRsp];
}
- (P2CMsgReadRsp*) defaultInstance {
  return [P2CMsgReadRsp defaultInstance];
}
- (P2CMsgReadRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CMsgReadRsp*) buildPartial {
  P2CMsgReadRsp* returnMe = resultP2CmsgReadRsp;
  self.resultP2CmsgReadRsp = nil;
  return returnMe;
}
- (P2CMsgReadRspBuilder*) mergeFrom:(P2CMsgReadRsp*) other {
  if (other == [P2CMsgReadRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CMsgReadRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CMsgReadRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CmsgReadRsp.hasUserid;
}
- (NSString*) userid {
  return resultP2CmsgReadRsp.userid;
}
- (P2CMsgReadRspBuilder*) setUserid:(NSString*) value {
  resultP2CmsgReadRsp.hasUserid = YES;
  resultP2CmsgReadRsp.userid = value;
  return self;
}
- (P2CMsgReadRspBuilder*) clearUserid {
  resultP2CmsgReadRsp.hasUserid = NO;
  resultP2CmsgReadRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultP2CmsgReadRsp.hasCode;
}
- (ResultCode) code {
  return resultP2CmsgReadRsp.code;
}
- (P2CMsgReadRspBuilder*) setCode:(ResultCode) value {
  resultP2CmsgReadRsp.hasCode = YES;
  resultP2CmsgReadRsp.code = value;
  return self;
}
- (P2CMsgReadRspBuilder*) clearCode {
  resultP2CmsgReadRsp.hasCode = NO;
  resultP2CmsgReadRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface P2CSwitchEntity ()
@property (strong) NSString* consumerid;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newkefuid;
@property (strong) NSString* oldkefuid;
@property (strong) NSString* sessionid;
@property (strong) NSString* content;
@end

@implementation P2CSwitchEntity

- (BOOL) hasConsumerid {
  return !!hasConsumerid_;
}
- (void) setHasConsumerid:(BOOL) _value_ {
  hasConsumerid_ = !!_value_;
}
@synthesize consumerid;
- (BOOL) hasNewkefuid {
  return !!hasNewkefuid_;
}
- (void) setHasNewkefuid:(BOOL) _value_ {
  hasNewkefuid_ = !!_value_;
}
@synthesize newkefuid;
- (BOOL) hasOldkefuid {
  return !!hasOldkefuid_;
}
- (void) setHasOldkefuid:(BOOL) _value_ {
  hasOldkefuid_ = !!_value_;
}
@synthesize oldkefuid;
- (BOOL) hasSessionid {
  return !!hasSessionid_;
}
- (void) setHasSessionid:(BOOL) _value_ {
  hasSessionid_ = !!_value_;
}
@synthesize sessionid;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (instancetype) init {
  if ((self = [super init])) {
    self.consumerid = @"";
    self.newkefuid = @"";
    self.oldkefuid = @"";
    self.sessionid = @"";
    self.content = @"";
  }
  return self;
}
static P2CSwitchEntity* defaultP2CSwitchEntityInstance = nil;
+ (void) initialize {
  if (self == [P2CSwitchEntity class]) {
    defaultP2CSwitchEntityInstance = [[P2CSwitchEntity alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CSwitchEntityInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CSwitchEntityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasConsumerid) {
    return NO;
  }
  if (!self.hasNewkefuid) {
    return NO;
  }
  if (!self.hasOldkefuid) {
    return NO;
  }
  if (!self.hasSessionid) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasConsumerid) {
    [output writeString:1 value:self.consumerid];
  }
  if (self.hasNewkefuid) {
    [output writeString:2 value:self.newkefuid];
  }
  if (self.hasOldkefuid) {
    [output writeString:3 value:self.oldkefuid];
  }
  if (self.hasSessionid) {
    [output writeString:4 value:self.sessionid];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasConsumerid) {
    size_ += computeStringSize(1, self.consumerid);
  }
  if (self.hasNewkefuid) {
    size_ += computeStringSize(2, self.newkefuid);
  }
  if (self.hasOldkefuid) {
    size_ += computeStringSize(3, self.oldkefuid);
  }
  if (self.hasSessionid) {
    size_ += computeStringSize(4, self.sessionid);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CSwitchEntity*) parseFromData:(NSData*) data {
  return (P2CSwitchEntity*)[[[P2CSwitchEntity builder] mergeFromData:data] build];
}
+ (P2CSwitchEntity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CSwitchEntity*)[[[P2CSwitchEntity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CSwitchEntity*) parseFromInputStream:(NSInputStream*) input {
  return (P2CSwitchEntity*)[[[P2CSwitchEntity builder] mergeFromInputStream:input] build];
}
+ (P2CSwitchEntity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CSwitchEntity*)[[[P2CSwitchEntity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CSwitchEntity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CSwitchEntity*)[[[P2CSwitchEntity builder] mergeFromCodedInputStream:input] build];
}
+ (P2CSwitchEntity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CSwitchEntity*)[[[P2CSwitchEntity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CSwitchEntityBuilder*) builder {
  return [[P2CSwitchEntityBuilder alloc] init];
}
+ (P2CSwitchEntityBuilder*) builderWithPrototype:(P2CSwitchEntity*) prototype {
  return [[P2CSwitchEntity builder] mergeFrom:prototype];
}
- (P2CSwitchEntityBuilder*) builder {
  return [P2CSwitchEntity builder];
}
- (P2CSwitchEntityBuilder*) toBuilder {
  return [P2CSwitchEntity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasConsumerid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"consumerid", self.consumerid];
  }
  if (self.hasNewkefuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newkefuid", self.newkefuid];
  }
  if (self.hasOldkefuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oldkefuid", self.oldkefuid];
  }
  if (self.hasSessionid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionid", self.sessionid];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasConsumerid) {
    [dictionary setObject: self.consumerid forKey: @"consumerid"];
  }
  if (self.hasNewkefuid) {
    [dictionary setObject: self.newkefuid forKey: @"newkefuid"];
  }
  if (self.hasOldkefuid) {
    [dictionary setObject: self.oldkefuid forKey: @"oldkefuid"];
  }
  if (self.hasSessionid) {
    [dictionary setObject: self.sessionid forKey: @"sessionid"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CSwitchEntity class]]) {
    return NO;
  }
  P2CSwitchEntity *otherMessage = other;
  return
      self.hasConsumerid == otherMessage.hasConsumerid &&
      (!self.hasConsumerid || [self.consumerid isEqual:otherMessage.consumerid]) &&
      self.hasNewkefuid == otherMessage.hasNewkefuid &&
      (!self.hasNewkefuid || [self.newkefuid isEqual:otherMessage.newkefuid]) &&
      self.hasOldkefuid == otherMessage.hasOldkefuid &&
      (!self.hasOldkefuid || [self.oldkefuid isEqual:otherMessage.oldkefuid]) &&
      self.hasSessionid == otherMessage.hasSessionid &&
      (!self.hasSessionid || [self.sessionid isEqual:otherMessage.sessionid]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasConsumerid) {
    hashCode = hashCode * 31 + [self.consumerid hash];
  }
  if (self.hasNewkefuid) {
    hashCode = hashCode * 31 + [self.newkefuid hash];
  }
  if (self.hasOldkefuid) {
    hashCode = hashCode * 31 + [self.oldkefuid hash];
  }
  if (self.hasSessionid) {
    hashCode = hashCode * 31 + [self.sessionid hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CSwitchEntityBuilder()
@property (strong) P2CSwitchEntity* resultP2CswitchEntity;
@end

@implementation P2CSwitchEntityBuilder
@synthesize resultP2CswitchEntity;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CswitchEntity = [[P2CSwitchEntity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CswitchEntity;
}
- (P2CSwitchEntityBuilder*) clear {
  self.resultP2CswitchEntity = [[P2CSwitchEntity alloc] init];
  return self;
}
- (P2CSwitchEntityBuilder*) clone {
  return [P2CSwitchEntity builderWithPrototype:resultP2CswitchEntity];
}
- (P2CSwitchEntity*) defaultInstance {
  return [P2CSwitchEntity defaultInstance];
}
- (P2CSwitchEntity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CSwitchEntity*) buildPartial {
  P2CSwitchEntity* returnMe = resultP2CswitchEntity;
  self.resultP2CswitchEntity = nil;
  return returnMe;
}
- (P2CSwitchEntityBuilder*) mergeFrom:(P2CSwitchEntity*) other {
  if (other == [P2CSwitchEntity defaultInstance]) {
    return self;
  }
  if (other.hasConsumerid) {
    [self setConsumerid:other.consumerid];
  }
  if (other.hasNewkefuid) {
    [self setNewkefuid:other.newkefuid];
  }
  if (other.hasOldkefuid) {
    [self setOldkefuid:other.oldkefuid];
  }
  if (other.hasSessionid) {
    [self setSessionid:other.sessionid];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CSwitchEntityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CSwitchEntityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setConsumerid:[input readString]];
        break;
      }
      case 18: {
        [self setNewkefuid:[input readString]];
        break;
      }
      case 26: {
        [self setOldkefuid:[input readString]];
        break;
      }
      case 34: {
        [self setSessionid:[input readString]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasConsumerid {
  return resultP2CswitchEntity.hasConsumerid;
}
- (NSString*) consumerid {
  return resultP2CswitchEntity.consumerid;
}
- (P2CSwitchEntityBuilder*) setConsumerid:(NSString*) value {
  resultP2CswitchEntity.hasConsumerid = YES;
  resultP2CswitchEntity.consumerid = value;
  return self;
}
- (P2CSwitchEntityBuilder*) clearConsumerid {
  resultP2CswitchEntity.hasConsumerid = NO;
  resultP2CswitchEntity.consumerid = @"";
  return self;
}
- (BOOL) hasNewkefuid {
  return resultP2CswitchEntity.hasNewkefuid;
}
- (NSString*) newkefuid {
  return resultP2CswitchEntity.newkefuid;
}
- (P2CSwitchEntityBuilder*) setNewkefuid:(NSString*) value {
  resultP2CswitchEntity.hasNewkefuid = YES;
  resultP2CswitchEntity.newkefuid = value;
  return self;
}
- (P2CSwitchEntityBuilder*) clearNewkefuid {
  resultP2CswitchEntity.hasNewkefuid = NO;
  resultP2CswitchEntity.newkefuid = @"";
  return self;
}
- (BOOL) hasOldkefuid {
  return resultP2CswitchEntity.hasOldkefuid;
}
- (NSString*) oldkefuid {
  return resultP2CswitchEntity.oldkefuid;
}
- (P2CSwitchEntityBuilder*) setOldkefuid:(NSString*) value {
  resultP2CswitchEntity.hasOldkefuid = YES;
  resultP2CswitchEntity.oldkefuid = value;
  return self;
}
- (P2CSwitchEntityBuilder*) clearOldkefuid {
  resultP2CswitchEntity.hasOldkefuid = NO;
  resultP2CswitchEntity.oldkefuid = @"";
  return self;
}
- (BOOL) hasSessionid {
  return resultP2CswitchEntity.hasSessionid;
}
- (NSString*) sessionid {
  return resultP2CswitchEntity.sessionid;
}
- (P2CSwitchEntityBuilder*) setSessionid:(NSString*) value {
  resultP2CswitchEntity.hasSessionid = YES;
  resultP2CswitchEntity.sessionid = value;
  return self;
}
- (P2CSwitchEntityBuilder*) clearSessionid {
  resultP2CswitchEntity.hasSessionid = NO;
  resultP2CswitchEntity.sessionid = @"";
  return self;
}
- (BOOL) hasContent {
  return resultP2CswitchEntity.hasContent;
}
- (NSString*) content {
  return resultP2CswitchEntity.content;
}
- (P2CSwitchEntityBuilder*) setContent:(NSString*) value {
  resultP2CswitchEntity.hasContent = YES;
  resultP2CswitchEntity.content = value;
  return self;
}
- (P2CSwitchEntityBuilder*) clearContent {
  resultP2CswitchEntity.hasContent = NO;
  resultP2CswitchEntity.content = @"";
  return self;
}
@end

@interface SwitchP2CReq ()
@property (strong) P2CSwitchEntity* element;
@property (strong) NSString* greeting;
@property UInt64 resptime;
@end

@implementation SwitchP2CReq

- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) _value_ {
  hasElement_ = !!_value_;
}
@synthesize element;
- (BOOL) hasGreeting {
  return !!hasGreeting_;
}
- (void) setHasGreeting:(BOOL) _value_ {
  hasGreeting_ = !!_value_;
}
@synthesize greeting;
- (BOOL) hasResptime {
  return !!hasResptime_;
}
- (void) setHasResptime:(BOOL) _value_ {
  hasResptime_ = !!_value_;
}
@synthesize resptime;
- (instancetype) init {
  if ((self = [super init])) {
    self.element = [P2CSwitchEntity defaultInstance];
    self.greeting = @"";
    self.resptime = 0L;
  }
  return self;
}
static SwitchP2CReq* defaultSwitchP2CReqInstance = nil;
+ (void) initialize {
  if (self == [SwitchP2CReq class]) {
    defaultSwitchP2CReqInstance = [[SwitchP2CReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwitchP2CReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSwitchP2CReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasElement) {
    return NO;
  }
  if (!self.hasGreeting) {
    return NO;
  }
  if (!self.hasResptime) {
    return NO;
  }
  if (!self.element.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasElement) {
    [output writeMessage:1 value:self.element];
  }
  if (self.hasGreeting) {
    [output writeString:2 value:self.greeting];
  }
  if (self.hasResptime) {
    [output writeUInt64:3 value:self.resptime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasElement) {
    size_ += computeMessageSize(1, self.element);
  }
  if (self.hasGreeting) {
    size_ += computeStringSize(2, self.greeting);
  }
  if (self.hasResptime) {
    size_ += computeUInt64Size(3, self.resptime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwitchP2CReq*) parseFromData:(NSData*) data {
  return (SwitchP2CReq*)[[[SwitchP2CReq builder] mergeFromData:data] build];
}
+ (SwitchP2CReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchP2CReq*)[[[SwitchP2CReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwitchP2CReq*) parseFromInputStream:(NSInputStream*) input {
  return (SwitchP2CReq*)[[[SwitchP2CReq builder] mergeFromInputStream:input] build];
}
+ (SwitchP2CReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchP2CReq*)[[[SwitchP2CReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchP2CReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwitchP2CReq*)[[[SwitchP2CReq builder] mergeFromCodedInputStream:input] build];
}
+ (SwitchP2CReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchP2CReq*)[[[SwitchP2CReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchP2CReqBuilder*) builder {
  return [[SwitchP2CReqBuilder alloc] init];
}
+ (SwitchP2CReqBuilder*) builderWithPrototype:(SwitchP2CReq*) prototype {
  return [[SwitchP2CReq builder] mergeFrom:prototype];
}
- (SwitchP2CReqBuilder*) builder {
  return [SwitchP2CReq builder];
}
- (SwitchP2CReqBuilder*) toBuilder {
  return [SwitchP2CReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasElement) {
    [output appendFormat:@"%@%@ {\n", indent, @"element"];
    [self.element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGreeting) {
    [output appendFormat:@"%@%@: %@\n", indent, @"greeting", self.greeting];
  }
  if (self.hasResptime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resptime", [NSNumber numberWithLongLong:self.resptime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasElement) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.element storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"element"];
  }
  if (self.hasGreeting) {
    [dictionary setObject: self.greeting forKey: @"greeting"];
  }
  if (self.hasResptime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.resptime] forKey: @"resptime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwitchP2CReq class]]) {
    return NO;
  }
  SwitchP2CReq *otherMessage = other;
  return
      self.hasElement == otherMessage.hasElement &&
      (!self.hasElement || [self.element isEqual:otherMessage.element]) &&
      self.hasGreeting == otherMessage.hasGreeting &&
      (!self.hasGreeting || [self.greeting isEqual:otherMessage.greeting]) &&
      self.hasResptime == otherMessage.hasResptime &&
      (!self.hasResptime || self.resptime == otherMessage.resptime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasElement) {
    hashCode = hashCode * 31 + [self.element hash];
  }
  if (self.hasGreeting) {
    hashCode = hashCode * 31 + [self.greeting hash];
  }
  if (self.hasResptime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.resptime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwitchP2CReqBuilder()
@property (strong) SwitchP2CReq* resultSwitchP2Creq;
@end

@implementation SwitchP2CReqBuilder
@synthesize resultSwitchP2Creq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwitchP2Creq = [[SwitchP2CReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwitchP2Creq;
}
- (SwitchP2CReqBuilder*) clear {
  self.resultSwitchP2Creq = [[SwitchP2CReq alloc] init];
  return self;
}
- (SwitchP2CReqBuilder*) clone {
  return [SwitchP2CReq builderWithPrototype:resultSwitchP2Creq];
}
- (SwitchP2CReq*) defaultInstance {
  return [SwitchP2CReq defaultInstance];
}
- (SwitchP2CReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwitchP2CReq*) buildPartial {
  SwitchP2CReq* returnMe = resultSwitchP2Creq;
  self.resultSwitchP2Creq = nil;
  return returnMe;
}
- (SwitchP2CReqBuilder*) mergeFrom:(SwitchP2CReq*) other {
  if (other == [SwitchP2CReq defaultInstance]) {
    return self;
  }
  if (other.hasElement) {
    [self mergeElement:other.element];
  }
  if (other.hasGreeting) {
    [self setGreeting:other.greeting];
  }
  if (other.hasResptime) {
    [self setResptime:other.resptime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwitchP2CReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwitchP2CReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        P2CSwitchEntityBuilder* subBuilder = [P2CSwitchEntity builder];
        if (self.hasElement) {
          [subBuilder mergeFrom:self.element];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setElement:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setGreeting:[input readString]];
        break;
      }
      case 24: {
        [self setResptime:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasElement {
  return resultSwitchP2Creq.hasElement;
}
- (P2CSwitchEntity*) element {
  return resultSwitchP2Creq.element;
}
- (SwitchP2CReqBuilder*) setElement:(P2CSwitchEntity*) value {
  resultSwitchP2Creq.hasElement = YES;
  resultSwitchP2Creq.element = value;
  return self;
}
- (SwitchP2CReqBuilder*) setElementBuilder:(P2CSwitchEntityBuilder*) builderForValue {
  return [self setElement:[builderForValue build]];
}
- (SwitchP2CReqBuilder*) mergeElement:(P2CSwitchEntity*) value {
  if (resultSwitchP2Creq.hasElement &&
      resultSwitchP2Creq.element != [P2CSwitchEntity defaultInstance]) {
    resultSwitchP2Creq.element =
      [[[P2CSwitchEntity builderWithPrototype:resultSwitchP2Creq.element] mergeFrom:value] buildPartial];
  } else {
    resultSwitchP2Creq.element = value;
  }
  resultSwitchP2Creq.hasElement = YES;
  return self;
}
- (SwitchP2CReqBuilder*) clearElement {
  resultSwitchP2Creq.hasElement = NO;
  resultSwitchP2Creq.element = [P2CSwitchEntity defaultInstance];
  return self;
}
- (BOOL) hasGreeting {
  return resultSwitchP2Creq.hasGreeting;
}
- (NSString*) greeting {
  return resultSwitchP2Creq.greeting;
}
- (SwitchP2CReqBuilder*) setGreeting:(NSString*) value {
  resultSwitchP2Creq.hasGreeting = YES;
  resultSwitchP2Creq.greeting = value;
  return self;
}
- (SwitchP2CReqBuilder*) clearGreeting {
  resultSwitchP2Creq.hasGreeting = NO;
  resultSwitchP2Creq.greeting = @"";
  return self;
}
- (BOOL) hasResptime {
  return resultSwitchP2Creq.hasResptime;
}
- (UInt64) resptime {
  return resultSwitchP2Creq.resptime;
}
- (SwitchP2CReqBuilder*) setResptime:(UInt64) value {
  resultSwitchP2Creq.hasResptime = YES;
  resultSwitchP2Creq.resptime = value;
  return self;
}
- (SwitchP2CReqBuilder*) clearResptime {
  resultSwitchP2Creq.hasResptime = NO;
  resultSwitchP2Creq.resptime = 0L;
  return self;
}
@end

@interface SwitchP2CRsp ()
@property (strong) P2CSwitchEntity* element;
@property ResultCode code;
@end

@implementation SwitchP2CRsp

- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) _value_ {
  hasElement_ = !!_value_;
}
@synthesize element;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.element = [P2CSwitchEntity defaultInstance];
    self.code = ResultCodeNoError;
  }
  return self;
}
static SwitchP2CRsp* defaultSwitchP2CRspInstance = nil;
+ (void) initialize {
  if (self == [SwitchP2CRsp class]) {
    defaultSwitchP2CRspInstance = [[SwitchP2CRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwitchP2CRspInstance;
}
- (instancetype) defaultInstance {
  return defaultSwitchP2CRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasElement) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  if (!self.element.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasElement) {
    [output writeMessage:1 value:self.element];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasElement) {
    size_ += computeMessageSize(1, self.element);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwitchP2CRsp*) parseFromData:(NSData*) data {
  return (SwitchP2CRsp*)[[[SwitchP2CRsp builder] mergeFromData:data] build];
}
+ (SwitchP2CRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchP2CRsp*)[[[SwitchP2CRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwitchP2CRsp*) parseFromInputStream:(NSInputStream*) input {
  return (SwitchP2CRsp*)[[[SwitchP2CRsp builder] mergeFromInputStream:input] build];
}
+ (SwitchP2CRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchP2CRsp*)[[[SwitchP2CRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchP2CRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwitchP2CRsp*)[[[SwitchP2CRsp builder] mergeFromCodedInputStream:input] build];
}
+ (SwitchP2CRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchP2CRsp*)[[[SwitchP2CRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchP2CRspBuilder*) builder {
  return [[SwitchP2CRspBuilder alloc] init];
}
+ (SwitchP2CRspBuilder*) builderWithPrototype:(SwitchP2CRsp*) prototype {
  return [[SwitchP2CRsp builder] mergeFrom:prototype];
}
- (SwitchP2CRspBuilder*) builder {
  return [SwitchP2CRsp builder];
}
- (SwitchP2CRspBuilder*) toBuilder {
  return [SwitchP2CRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasElement) {
    [output appendFormat:@"%@%@ {\n", indent, @"element"];
    [self.element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasElement) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.element storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"element"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwitchP2CRsp class]]) {
    return NO;
  }
  SwitchP2CRsp *otherMessage = other;
  return
      self.hasElement == otherMessage.hasElement &&
      (!self.hasElement || [self.element isEqual:otherMessage.element]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasElement) {
    hashCode = hashCode * 31 + [self.element hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwitchP2CRspBuilder()
@property (strong) SwitchP2CRsp* resultSwitchP2Crsp;
@end

@implementation SwitchP2CRspBuilder
@synthesize resultSwitchP2Crsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwitchP2Crsp = [[SwitchP2CRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwitchP2Crsp;
}
- (SwitchP2CRspBuilder*) clear {
  self.resultSwitchP2Crsp = [[SwitchP2CRsp alloc] init];
  return self;
}
- (SwitchP2CRspBuilder*) clone {
  return [SwitchP2CRsp builderWithPrototype:resultSwitchP2Crsp];
}
- (SwitchP2CRsp*) defaultInstance {
  return [SwitchP2CRsp defaultInstance];
}
- (SwitchP2CRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwitchP2CRsp*) buildPartial {
  SwitchP2CRsp* returnMe = resultSwitchP2Crsp;
  self.resultSwitchP2Crsp = nil;
  return returnMe;
}
- (SwitchP2CRspBuilder*) mergeFrom:(SwitchP2CRsp*) other {
  if (other == [SwitchP2CRsp defaultInstance]) {
    return self;
  }
  if (other.hasElement) {
    [self mergeElement:other.element];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwitchP2CRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwitchP2CRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        P2CSwitchEntityBuilder* subBuilder = [P2CSwitchEntity builder];
        if (self.hasElement) {
          [subBuilder mergeFrom:self.element];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setElement:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasElement {
  return resultSwitchP2Crsp.hasElement;
}
- (P2CSwitchEntity*) element {
  return resultSwitchP2Crsp.element;
}
- (SwitchP2CRspBuilder*) setElement:(P2CSwitchEntity*) value {
  resultSwitchP2Crsp.hasElement = YES;
  resultSwitchP2Crsp.element = value;
  return self;
}
- (SwitchP2CRspBuilder*) setElementBuilder:(P2CSwitchEntityBuilder*) builderForValue {
  return [self setElement:[builderForValue build]];
}
- (SwitchP2CRspBuilder*) mergeElement:(P2CSwitchEntity*) value {
  if (resultSwitchP2Crsp.hasElement &&
      resultSwitchP2Crsp.element != [P2CSwitchEntity defaultInstance]) {
    resultSwitchP2Crsp.element =
      [[[P2CSwitchEntity builderWithPrototype:resultSwitchP2Crsp.element] mergeFrom:value] buildPartial];
  } else {
    resultSwitchP2Crsp.element = value;
  }
  resultSwitchP2Crsp.hasElement = YES;
  return self;
}
- (SwitchP2CRspBuilder*) clearElement {
  resultSwitchP2Crsp.hasElement = NO;
  resultSwitchP2Crsp.element = [P2CSwitchEntity defaultInstance];
  return self;
}
- (BOOL) hasCode {
  return resultSwitchP2Crsp.hasCode;
}
- (ResultCode) code {
  return resultSwitchP2Crsp.code;
}
- (SwitchP2CRspBuilder*) setCode:(ResultCode) value {
  resultSwitchP2Crsp.hasCode = YES;
  resultSwitchP2Crsp.code = value;
  return self;
}
- (SwitchP2CRspBuilder*) clearCode {
  resultSwitchP2Crsp.hasCode = NO;
  resultSwitchP2Crsp.code = ResultCodeNoError;
  return self;
}
@end

@interface NotifySwitchP2C ()
@property (strong) P2CSwitchEntity* element;
@property (strong) NSString* greeting;
@property UInt64 resptime;
@end

@implementation NotifySwitchP2C

- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) _value_ {
  hasElement_ = !!_value_;
}
@synthesize element;
- (BOOL) hasGreeting {
  return !!hasGreeting_;
}
- (void) setHasGreeting:(BOOL) _value_ {
  hasGreeting_ = !!_value_;
}
@synthesize greeting;
- (BOOL) hasResptime {
  return !!hasResptime_;
}
- (void) setHasResptime:(BOOL) _value_ {
  hasResptime_ = !!_value_;
}
@synthesize resptime;
- (instancetype) init {
  if ((self = [super init])) {
    self.element = [P2CSwitchEntity defaultInstance];
    self.greeting = @"";
    self.resptime = 0L;
  }
  return self;
}
static NotifySwitchP2C* defaultNotifySwitchP2CInstance = nil;
+ (void) initialize {
  if (self == [NotifySwitchP2C class]) {
    defaultNotifySwitchP2CInstance = [[NotifySwitchP2C alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNotifySwitchP2CInstance;
}
- (instancetype) defaultInstance {
  return defaultNotifySwitchP2CInstance;
}
- (BOOL) isInitialized {
  if (!self.hasElement) {
    return NO;
  }
  if (!self.hasGreeting) {
    return NO;
  }
  if (!self.hasResptime) {
    return NO;
  }
  if (!self.element.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasElement) {
    [output writeMessage:1 value:self.element];
  }
  if (self.hasGreeting) {
    [output writeString:2 value:self.greeting];
  }
  if (self.hasResptime) {
    [output writeUInt64:3 value:self.resptime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasElement) {
    size_ += computeMessageSize(1, self.element);
  }
  if (self.hasGreeting) {
    size_ += computeStringSize(2, self.greeting);
  }
  if (self.hasResptime) {
    size_ += computeUInt64Size(3, self.resptime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NotifySwitchP2C*) parseFromData:(NSData*) data {
  return (NotifySwitchP2C*)[[[NotifySwitchP2C builder] mergeFromData:data] build];
}
+ (NotifySwitchP2C*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NotifySwitchP2C*)[[[NotifySwitchP2C builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NotifySwitchP2C*) parseFromInputStream:(NSInputStream*) input {
  return (NotifySwitchP2C*)[[[NotifySwitchP2C builder] mergeFromInputStream:input] build];
}
+ (NotifySwitchP2C*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NotifySwitchP2C*)[[[NotifySwitchP2C builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NotifySwitchP2C*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NotifySwitchP2C*)[[[NotifySwitchP2C builder] mergeFromCodedInputStream:input] build];
}
+ (NotifySwitchP2C*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NotifySwitchP2C*)[[[NotifySwitchP2C builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NotifySwitchP2CBuilder*) builder {
  return [[NotifySwitchP2CBuilder alloc] init];
}
+ (NotifySwitchP2CBuilder*) builderWithPrototype:(NotifySwitchP2C*) prototype {
  return [[NotifySwitchP2C builder] mergeFrom:prototype];
}
- (NotifySwitchP2CBuilder*) builder {
  return [NotifySwitchP2C builder];
}
- (NotifySwitchP2CBuilder*) toBuilder {
  return [NotifySwitchP2C builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasElement) {
    [output appendFormat:@"%@%@ {\n", indent, @"element"];
    [self.element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGreeting) {
    [output appendFormat:@"%@%@: %@\n", indent, @"greeting", self.greeting];
  }
  if (self.hasResptime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resptime", [NSNumber numberWithLongLong:self.resptime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasElement) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.element storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"element"];
  }
  if (self.hasGreeting) {
    [dictionary setObject: self.greeting forKey: @"greeting"];
  }
  if (self.hasResptime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.resptime] forKey: @"resptime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NotifySwitchP2C class]]) {
    return NO;
  }
  NotifySwitchP2C *otherMessage = other;
  return
      self.hasElement == otherMessage.hasElement &&
      (!self.hasElement || [self.element isEqual:otherMessage.element]) &&
      self.hasGreeting == otherMessage.hasGreeting &&
      (!self.hasGreeting || [self.greeting isEqual:otherMessage.greeting]) &&
      self.hasResptime == otherMessage.hasResptime &&
      (!self.hasResptime || self.resptime == otherMessage.resptime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasElement) {
    hashCode = hashCode * 31 + [self.element hash];
  }
  if (self.hasGreeting) {
    hashCode = hashCode * 31 + [self.greeting hash];
  }
  if (self.hasResptime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.resptime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NotifySwitchP2CBuilder()
@property (strong) NotifySwitchP2C* resultNotifySwitchP2C;
@end

@implementation NotifySwitchP2CBuilder
@synthesize resultNotifySwitchP2C;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotifySwitchP2C = [[NotifySwitchP2C alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotifySwitchP2C;
}
- (NotifySwitchP2CBuilder*) clear {
  self.resultNotifySwitchP2C = [[NotifySwitchP2C alloc] init];
  return self;
}
- (NotifySwitchP2CBuilder*) clone {
  return [NotifySwitchP2C builderWithPrototype:resultNotifySwitchP2C];
}
- (NotifySwitchP2C*) defaultInstance {
  return [NotifySwitchP2C defaultInstance];
}
- (NotifySwitchP2C*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NotifySwitchP2C*) buildPartial {
  NotifySwitchP2C* returnMe = resultNotifySwitchP2C;
  self.resultNotifySwitchP2C = nil;
  return returnMe;
}
- (NotifySwitchP2CBuilder*) mergeFrom:(NotifySwitchP2C*) other {
  if (other == [NotifySwitchP2C defaultInstance]) {
    return self;
  }
  if (other.hasElement) {
    [self mergeElement:other.element];
  }
  if (other.hasGreeting) {
    [self setGreeting:other.greeting];
  }
  if (other.hasResptime) {
    [self setResptime:other.resptime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NotifySwitchP2CBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NotifySwitchP2CBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        P2CSwitchEntityBuilder* subBuilder = [P2CSwitchEntity builder];
        if (self.hasElement) {
          [subBuilder mergeFrom:self.element];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setElement:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setGreeting:[input readString]];
        break;
      }
      case 24: {
        [self setResptime:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasElement {
  return resultNotifySwitchP2C.hasElement;
}
- (P2CSwitchEntity*) element {
  return resultNotifySwitchP2C.element;
}
- (NotifySwitchP2CBuilder*) setElement:(P2CSwitchEntity*) value {
  resultNotifySwitchP2C.hasElement = YES;
  resultNotifySwitchP2C.element = value;
  return self;
}
- (NotifySwitchP2CBuilder*) setElementBuilder:(P2CSwitchEntityBuilder*) builderForValue {
  return [self setElement:[builderForValue build]];
}
- (NotifySwitchP2CBuilder*) mergeElement:(P2CSwitchEntity*) value {
  if (resultNotifySwitchP2C.hasElement &&
      resultNotifySwitchP2C.element != [P2CSwitchEntity defaultInstance]) {
    resultNotifySwitchP2C.element =
      [[[P2CSwitchEntity builderWithPrototype:resultNotifySwitchP2C.element] mergeFrom:value] buildPartial];
  } else {
    resultNotifySwitchP2C.element = value;
  }
  resultNotifySwitchP2C.hasElement = YES;
  return self;
}
- (NotifySwitchP2CBuilder*) clearElement {
  resultNotifySwitchP2C.hasElement = NO;
  resultNotifySwitchP2C.element = [P2CSwitchEntity defaultInstance];
  return self;
}
- (BOOL) hasGreeting {
  return resultNotifySwitchP2C.hasGreeting;
}
- (NSString*) greeting {
  return resultNotifySwitchP2C.greeting;
}
- (NotifySwitchP2CBuilder*) setGreeting:(NSString*) value {
  resultNotifySwitchP2C.hasGreeting = YES;
  resultNotifySwitchP2C.greeting = value;
  return self;
}
- (NotifySwitchP2CBuilder*) clearGreeting {
  resultNotifySwitchP2C.hasGreeting = NO;
  resultNotifySwitchP2C.greeting = @"";
  return self;
}
- (BOOL) hasResptime {
  return resultNotifySwitchP2C.hasResptime;
}
- (UInt64) resptime {
  return resultNotifySwitchP2C.resptime;
}
- (NotifySwitchP2CBuilder*) setResptime:(UInt64) value {
  resultNotifySwitchP2C.hasResptime = YES;
  resultNotifySwitchP2C.resptime = value;
  return self;
}
- (NotifySwitchP2CBuilder*) clearResptime {
  resultNotifySwitchP2C.hasResptime = NO;
  resultNotifySwitchP2C.resptime = 0L;
  return self;
}
@end

@interface NotifySwitchP2CRsp ()
@property (strong) P2CSwitchEntity* element;
@property ResultCode code;
@end

@implementation NotifySwitchP2CRsp

- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) _value_ {
  hasElement_ = !!_value_;
}
@synthesize element;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.element = [P2CSwitchEntity defaultInstance];
    self.code = ResultCodeNoError;
  }
  return self;
}
static NotifySwitchP2CRsp* defaultNotifySwitchP2CRspInstance = nil;
+ (void) initialize {
  if (self == [NotifySwitchP2CRsp class]) {
    defaultNotifySwitchP2CRspInstance = [[NotifySwitchP2CRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNotifySwitchP2CRspInstance;
}
- (instancetype) defaultInstance {
  return defaultNotifySwitchP2CRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasElement) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  if (!self.element.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasElement) {
    [output writeMessage:1 value:self.element];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasElement) {
    size_ += computeMessageSize(1, self.element);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NotifySwitchP2CRsp*) parseFromData:(NSData*) data {
  return (NotifySwitchP2CRsp*)[[[NotifySwitchP2CRsp builder] mergeFromData:data] build];
}
+ (NotifySwitchP2CRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NotifySwitchP2CRsp*)[[[NotifySwitchP2CRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NotifySwitchP2CRsp*) parseFromInputStream:(NSInputStream*) input {
  return (NotifySwitchP2CRsp*)[[[NotifySwitchP2CRsp builder] mergeFromInputStream:input] build];
}
+ (NotifySwitchP2CRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NotifySwitchP2CRsp*)[[[NotifySwitchP2CRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NotifySwitchP2CRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NotifySwitchP2CRsp*)[[[NotifySwitchP2CRsp builder] mergeFromCodedInputStream:input] build];
}
+ (NotifySwitchP2CRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NotifySwitchP2CRsp*)[[[NotifySwitchP2CRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NotifySwitchP2CRspBuilder*) builder {
  return [[NotifySwitchP2CRspBuilder alloc] init];
}
+ (NotifySwitchP2CRspBuilder*) builderWithPrototype:(NotifySwitchP2CRsp*) prototype {
  return [[NotifySwitchP2CRsp builder] mergeFrom:prototype];
}
- (NotifySwitchP2CRspBuilder*) builder {
  return [NotifySwitchP2CRsp builder];
}
- (NotifySwitchP2CRspBuilder*) toBuilder {
  return [NotifySwitchP2CRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasElement) {
    [output appendFormat:@"%@%@ {\n", indent, @"element"];
    [self.element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasElement) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.element storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"element"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NotifySwitchP2CRsp class]]) {
    return NO;
  }
  NotifySwitchP2CRsp *otherMessage = other;
  return
      self.hasElement == otherMessage.hasElement &&
      (!self.hasElement || [self.element isEqual:otherMessage.element]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasElement) {
    hashCode = hashCode * 31 + [self.element hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NotifySwitchP2CRspBuilder()
@property (strong) NotifySwitchP2CRsp* resultNotifySwitchP2Crsp;
@end

@implementation NotifySwitchP2CRspBuilder
@synthesize resultNotifySwitchP2Crsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotifySwitchP2Crsp = [[NotifySwitchP2CRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotifySwitchP2Crsp;
}
- (NotifySwitchP2CRspBuilder*) clear {
  self.resultNotifySwitchP2Crsp = [[NotifySwitchP2CRsp alloc] init];
  return self;
}
- (NotifySwitchP2CRspBuilder*) clone {
  return [NotifySwitchP2CRsp builderWithPrototype:resultNotifySwitchP2Crsp];
}
- (NotifySwitchP2CRsp*) defaultInstance {
  return [NotifySwitchP2CRsp defaultInstance];
}
- (NotifySwitchP2CRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NotifySwitchP2CRsp*) buildPartial {
  NotifySwitchP2CRsp* returnMe = resultNotifySwitchP2Crsp;
  self.resultNotifySwitchP2Crsp = nil;
  return returnMe;
}
- (NotifySwitchP2CRspBuilder*) mergeFrom:(NotifySwitchP2CRsp*) other {
  if (other == [NotifySwitchP2CRsp defaultInstance]) {
    return self;
  }
  if (other.hasElement) {
    [self mergeElement:other.element];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NotifySwitchP2CRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NotifySwitchP2CRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        P2CSwitchEntityBuilder* subBuilder = [P2CSwitchEntity builder];
        if (self.hasElement) {
          [subBuilder mergeFrom:self.element];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setElement:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasElement {
  return resultNotifySwitchP2Crsp.hasElement;
}
- (P2CSwitchEntity*) element {
  return resultNotifySwitchP2Crsp.element;
}
- (NotifySwitchP2CRspBuilder*) setElement:(P2CSwitchEntity*) value {
  resultNotifySwitchP2Crsp.hasElement = YES;
  resultNotifySwitchP2Crsp.element = value;
  return self;
}
- (NotifySwitchP2CRspBuilder*) setElementBuilder:(P2CSwitchEntityBuilder*) builderForValue {
  return [self setElement:[builderForValue build]];
}
- (NotifySwitchP2CRspBuilder*) mergeElement:(P2CSwitchEntity*) value {
  if (resultNotifySwitchP2Crsp.hasElement &&
      resultNotifySwitchP2Crsp.element != [P2CSwitchEntity defaultInstance]) {
    resultNotifySwitchP2Crsp.element =
      [[[P2CSwitchEntity builderWithPrototype:resultNotifySwitchP2Crsp.element] mergeFrom:value] buildPartial];
  } else {
    resultNotifySwitchP2Crsp.element = value;
  }
  resultNotifySwitchP2Crsp.hasElement = YES;
  return self;
}
- (NotifySwitchP2CRspBuilder*) clearElement {
  resultNotifySwitchP2Crsp.hasElement = NO;
  resultNotifySwitchP2Crsp.element = [P2CSwitchEntity defaultInstance];
  return self;
}
- (BOOL) hasCode {
  return resultNotifySwitchP2Crsp.hasCode;
}
- (ResultCode) code {
  return resultNotifySwitchP2Crsp.code;
}
- (NotifySwitchP2CRspBuilder*) setCode:(ResultCode) value {
  resultNotifySwitchP2Crsp.hasCode = YES;
  resultNotifySwitchP2Crsp.code = value;
  return self;
}
- (NotifySwitchP2CRspBuilder*) clearCode {
  resultNotifySwitchP2Crsp.hasCode = NO;
  resultNotifySwitchP2Crsp.code = ResultCodeNoError;
  return self;
}
@end

@interface P2CLeaveMsgReq ()
@property (strong) NSString* fromid;
@property (strong) NSString* entid;
@property (strong) NSString* sessionid;
@property (strong) NSString* content;
@property (strong) NSString* guid;
@end

@implementation P2CLeaveMsgReq

- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasEntid {
  return !!hasEntid_;
}
- (void) setHasEntid:(BOOL) _value_ {
  hasEntid_ = !!_value_;
}
@synthesize entid;
- (BOOL) hasSessionid {
  return !!hasSessionid_;
}
- (void) setHasSessionid:(BOOL) _value_ {
  hasSessionid_ = !!_value_;
}
@synthesize sessionid;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) _value_ {
  hasGuid_ = !!_value_;
}
@synthesize guid;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromid = @"";
    self.entid = @"";
    self.sessionid = @"";
    self.content = @"";
    self.guid = @"";
  }
  return self;
}
static P2CLeaveMsgReq* defaultP2CLeaveMsgReqInstance = nil;
+ (void) initialize {
  if (self == [P2CLeaveMsgReq class]) {
    defaultP2CLeaveMsgReqInstance = [[P2CLeaveMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CLeaveMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CLeaveMsgReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasEntid) {
    return NO;
  }
  if (!self.hasSessionid) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromid) {
    [output writeString:1 value:self.fromid];
  }
  if (self.hasEntid) {
    [output writeString:2 value:self.entid];
  }
  if (self.hasSessionid) {
    [output writeString:3 value:self.sessionid];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasGuid) {
    [output writeString:5 value:self.guid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromid) {
    size_ += computeStringSize(1, self.fromid);
  }
  if (self.hasEntid) {
    size_ += computeStringSize(2, self.entid);
  }
  if (self.hasSessionid) {
    size_ += computeStringSize(3, self.sessionid);
  }
  if (self.hasContent) {
    size_ += computeStringSize(4, self.content);
  }
  if (self.hasGuid) {
    size_ += computeStringSize(5, self.guid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CLeaveMsgReq*) parseFromData:(NSData*) data {
  return (P2CLeaveMsgReq*)[[[P2CLeaveMsgReq builder] mergeFromData:data] build];
}
+ (P2CLeaveMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CLeaveMsgReq*)[[[P2CLeaveMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CLeaveMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (P2CLeaveMsgReq*)[[[P2CLeaveMsgReq builder] mergeFromInputStream:input] build];
}
+ (P2CLeaveMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CLeaveMsgReq*)[[[P2CLeaveMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CLeaveMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CLeaveMsgReq*)[[[P2CLeaveMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (P2CLeaveMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CLeaveMsgReq*)[[[P2CLeaveMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CLeaveMsgReqBuilder*) builder {
  return [[P2CLeaveMsgReqBuilder alloc] init];
}
+ (P2CLeaveMsgReqBuilder*) builderWithPrototype:(P2CLeaveMsgReq*) prototype {
  return [[P2CLeaveMsgReq builder] mergeFrom:prototype];
}
- (P2CLeaveMsgReqBuilder*) builder {
  return [P2CLeaveMsgReq builder];
}
- (P2CLeaveMsgReqBuilder*) toBuilder {
  return [P2CLeaveMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasEntid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entid", self.entid];
  }
  if (self.hasSessionid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionid", self.sessionid];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasEntid) {
    [dictionary setObject: self.entid forKey: @"entid"];
  }
  if (self.hasSessionid) {
    [dictionary setObject: self.sessionid forKey: @"sessionid"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasGuid) {
    [dictionary setObject: self.guid forKey: @"guid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CLeaveMsgReq class]]) {
    return NO;
  }
  P2CLeaveMsgReq *otherMessage = other;
  return
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasEntid == otherMessage.hasEntid &&
      (!self.hasEntid || [self.entid isEqual:otherMessage.entid]) &&
      self.hasSessionid == otherMessage.hasSessionid &&
      (!self.hasSessionid || [self.sessionid isEqual:otherMessage.sessionid]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasEntid) {
    hashCode = hashCode * 31 + [self.entid hash];
  }
  if (self.hasSessionid) {
    hashCode = hashCode * 31 + [self.sessionid hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CLeaveMsgReqBuilder()
@property (strong) P2CLeaveMsgReq* resultP2CleaveMsgReq;
@end

@implementation P2CLeaveMsgReqBuilder
@synthesize resultP2CleaveMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CleaveMsgReq = [[P2CLeaveMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CleaveMsgReq;
}
- (P2CLeaveMsgReqBuilder*) clear {
  self.resultP2CleaveMsgReq = [[P2CLeaveMsgReq alloc] init];
  return self;
}
- (P2CLeaveMsgReqBuilder*) clone {
  return [P2CLeaveMsgReq builderWithPrototype:resultP2CleaveMsgReq];
}
- (P2CLeaveMsgReq*) defaultInstance {
  return [P2CLeaveMsgReq defaultInstance];
}
- (P2CLeaveMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CLeaveMsgReq*) buildPartial {
  P2CLeaveMsgReq* returnMe = resultP2CleaveMsgReq;
  self.resultP2CleaveMsgReq = nil;
  return returnMe;
}
- (P2CLeaveMsgReqBuilder*) mergeFrom:(P2CLeaveMsgReq*) other {
  if (other == [P2CLeaveMsgReq defaultInstance]) {
    return self;
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasEntid) {
    [self setEntid:other.entid];
  }
  if (other.hasSessionid) {
    [self setSessionid:other.sessionid];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CLeaveMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CLeaveMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFromid:[input readString]];
        break;
      }
      case 18: {
        [self setEntid:[input readString]];
        break;
      }
      case 26: {
        [self setSessionid:[input readString]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 42: {
        [self setGuid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromid {
  return resultP2CleaveMsgReq.hasFromid;
}
- (NSString*) fromid {
  return resultP2CleaveMsgReq.fromid;
}
- (P2CLeaveMsgReqBuilder*) setFromid:(NSString*) value {
  resultP2CleaveMsgReq.hasFromid = YES;
  resultP2CleaveMsgReq.fromid = value;
  return self;
}
- (P2CLeaveMsgReqBuilder*) clearFromid {
  resultP2CleaveMsgReq.hasFromid = NO;
  resultP2CleaveMsgReq.fromid = @"";
  return self;
}
- (BOOL) hasEntid {
  return resultP2CleaveMsgReq.hasEntid;
}
- (NSString*) entid {
  return resultP2CleaveMsgReq.entid;
}
- (P2CLeaveMsgReqBuilder*) setEntid:(NSString*) value {
  resultP2CleaveMsgReq.hasEntid = YES;
  resultP2CleaveMsgReq.entid = value;
  return self;
}
- (P2CLeaveMsgReqBuilder*) clearEntid {
  resultP2CleaveMsgReq.hasEntid = NO;
  resultP2CleaveMsgReq.entid = @"";
  return self;
}
- (BOOL) hasSessionid {
  return resultP2CleaveMsgReq.hasSessionid;
}
- (NSString*) sessionid {
  return resultP2CleaveMsgReq.sessionid;
}
- (P2CLeaveMsgReqBuilder*) setSessionid:(NSString*) value {
  resultP2CleaveMsgReq.hasSessionid = YES;
  resultP2CleaveMsgReq.sessionid = value;
  return self;
}
- (P2CLeaveMsgReqBuilder*) clearSessionid {
  resultP2CleaveMsgReq.hasSessionid = NO;
  resultP2CleaveMsgReq.sessionid = @"";
  return self;
}
- (BOOL) hasContent {
  return resultP2CleaveMsgReq.hasContent;
}
- (NSString*) content {
  return resultP2CleaveMsgReq.content;
}
- (P2CLeaveMsgReqBuilder*) setContent:(NSString*) value {
  resultP2CleaveMsgReq.hasContent = YES;
  resultP2CleaveMsgReq.content = value;
  return self;
}
- (P2CLeaveMsgReqBuilder*) clearContent {
  resultP2CleaveMsgReq.hasContent = NO;
  resultP2CleaveMsgReq.content = @"";
  return self;
}
- (BOOL) hasGuid {
  return resultP2CleaveMsgReq.hasGuid;
}
- (NSString*) guid {
  return resultP2CleaveMsgReq.guid;
}
- (P2CLeaveMsgReqBuilder*) setGuid:(NSString*) value {
  resultP2CleaveMsgReq.hasGuid = YES;
  resultP2CleaveMsgReq.guid = value;
  return self;
}
- (P2CLeaveMsgReqBuilder*) clearGuid {
  resultP2CleaveMsgReq.hasGuid = NO;
  resultP2CleaveMsgReq.guid = @"";
  return self;
}
@end

@interface P2CLeaveMsgRsp ()
@property (strong) NSString* userid;
@property (strong) NSString* guid;
@property ResultCode code;
@end

@implementation P2CLeaveMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) _value_ {
  hasGuid_ = !!_value_;
}
@synthesize guid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.guid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static P2CLeaveMsgRsp* defaultP2CLeaveMsgRspInstance = nil;
+ (void) initialize {
  if (self == [P2CLeaveMsgRsp class]) {
    defaultP2CLeaveMsgRspInstance = [[P2CLeaveMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2CLeaveMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultP2CLeaveMsgRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasGuid) {
    [output writeString:2 value:self.guid];
  }
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasGuid) {
    size_ += computeStringSize(2, self.guid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2CLeaveMsgRsp*) parseFromData:(NSData*) data {
  return (P2CLeaveMsgRsp*)[[[P2CLeaveMsgRsp builder] mergeFromData:data] build];
}
+ (P2CLeaveMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CLeaveMsgRsp*)[[[P2CLeaveMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2CLeaveMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (P2CLeaveMsgRsp*)[[[P2CLeaveMsgRsp builder] mergeFromInputStream:input] build];
}
+ (P2CLeaveMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CLeaveMsgRsp*)[[[P2CLeaveMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CLeaveMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2CLeaveMsgRsp*)[[[P2CLeaveMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (P2CLeaveMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2CLeaveMsgRsp*)[[[P2CLeaveMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2CLeaveMsgRspBuilder*) builder {
  return [[P2CLeaveMsgRspBuilder alloc] init];
}
+ (P2CLeaveMsgRspBuilder*) builderWithPrototype:(P2CLeaveMsgRsp*) prototype {
  return [[P2CLeaveMsgRsp builder] mergeFrom:prototype];
}
- (P2CLeaveMsgRspBuilder*) builder {
  return [P2CLeaveMsgRsp builder];
}
- (P2CLeaveMsgRspBuilder*) toBuilder {
  return [P2CLeaveMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasGuid) {
    [dictionary setObject: self.guid forKey: @"guid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2CLeaveMsgRsp class]]) {
    return NO;
  }
  P2CLeaveMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2CLeaveMsgRspBuilder()
@property (strong) P2CLeaveMsgRsp* resultP2CleaveMsgRsp;
@end

@implementation P2CLeaveMsgRspBuilder
@synthesize resultP2CleaveMsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CleaveMsgRsp = [[P2CLeaveMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CleaveMsgRsp;
}
- (P2CLeaveMsgRspBuilder*) clear {
  self.resultP2CleaveMsgRsp = [[P2CLeaveMsgRsp alloc] init];
  return self;
}
- (P2CLeaveMsgRspBuilder*) clone {
  return [P2CLeaveMsgRsp builderWithPrototype:resultP2CleaveMsgRsp];
}
- (P2CLeaveMsgRsp*) defaultInstance {
  return [P2CLeaveMsgRsp defaultInstance];
}
- (P2CLeaveMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2CLeaveMsgRsp*) buildPartial {
  P2CLeaveMsgRsp* returnMe = resultP2CleaveMsgRsp;
  self.resultP2CleaveMsgRsp = nil;
  return returnMe;
}
- (P2CLeaveMsgRspBuilder*) mergeFrom:(P2CLeaveMsgRsp*) other {
  if (other == [P2CLeaveMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2CLeaveMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2CLeaveMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        [self setGuid:[input readString]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CleaveMsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultP2CleaveMsgRsp.userid;
}
- (P2CLeaveMsgRspBuilder*) setUserid:(NSString*) value {
  resultP2CleaveMsgRsp.hasUserid = YES;
  resultP2CleaveMsgRsp.userid = value;
  return self;
}
- (P2CLeaveMsgRspBuilder*) clearUserid {
  resultP2CleaveMsgRsp.hasUserid = NO;
  resultP2CleaveMsgRsp.userid = @"";
  return self;
}
- (BOOL) hasGuid {
  return resultP2CleaveMsgRsp.hasGuid;
}
- (NSString*) guid {
  return resultP2CleaveMsgRsp.guid;
}
- (P2CLeaveMsgRspBuilder*) setGuid:(NSString*) value {
  resultP2CleaveMsgRsp.hasGuid = YES;
  resultP2CleaveMsgRsp.guid = value;
  return self;
}
- (P2CLeaveMsgRspBuilder*) clearGuid {
  resultP2CleaveMsgRsp.hasGuid = NO;
  resultP2CleaveMsgRsp.guid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultP2CleaveMsgRsp.hasCode;
}
- (ResultCode) code {
  return resultP2CleaveMsgRsp.code;
}
- (P2CLeaveMsgRspBuilder*) setCode:(ResultCode) value {
  resultP2CleaveMsgRsp.hasCode = YES;
  resultP2CleaveMsgRsp.code = value;
  return self;
}
- (P2CLeaveMsgRspBuilder*) clearCode {
  resultP2CleaveMsgRsp.hasCode = NO;
  resultP2CleaveMsgRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface P2COfflineMsgReq ()
@property (strong) NSString* category;
@property (strong) NSString* fromid;
@property (strong) NSString* toid;
@property SInt32 count;
@property UInt64 lastupdate;
@end

@implementation P2COfflineMsgReq

- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) _value_ {
  hasCategory_ = !!_value_;
}
@synthesize category;
- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasToid {
  return !!hasToid_;
}
- (void) setHasToid:(BOOL) _value_ {
  hasToid_ = !!_value_;
}
@synthesize toid;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasLastupdate {
  return !!hasLastupdate_;
}
- (void) setHasLastupdate:(BOOL) _value_ {
  hasLastupdate_ = !!_value_;
}
@synthesize lastupdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.category = @"";
    self.fromid = @"";
    self.toid = @"";
    self.count = 0;
    self.lastupdate = 0L;
  }
  return self;
}
static P2COfflineMsgReq* defaultP2COfflineMsgReqInstance = nil;
+ (void) initialize {
  if (self == [P2COfflineMsgReq class]) {
    defaultP2COfflineMsgReqInstance = [[P2COfflineMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2COfflineMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultP2COfflineMsgReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCategory) {
    return NO;
  }
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasToid) {
    return NO;
  }
  if (!self.hasCount) {
    return NO;
  }
  if (!self.hasLastupdate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategory) {
    [output writeString:1 value:self.category];
  }
  if (self.hasFromid) {
    [output writeString:2 value:self.fromid];
  }
  if (self.hasToid) {
    [output writeString:3 value:self.toid];
  }
  if (self.hasCount) {
    [output writeInt32:4 value:self.count];
  }
  if (self.hasLastupdate) {
    [output writeUInt64:5 value:self.lastupdate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCategory) {
    size_ += computeStringSize(1, self.category);
  }
  if (self.hasFromid) {
    size_ += computeStringSize(2, self.fromid);
  }
  if (self.hasToid) {
    size_ += computeStringSize(3, self.toid);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(4, self.count);
  }
  if (self.hasLastupdate) {
    size_ += computeUInt64Size(5, self.lastupdate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2COfflineMsgReq*) parseFromData:(NSData*) data {
  return (P2COfflineMsgReq*)[[[P2COfflineMsgReq builder] mergeFromData:data] build];
}
+ (P2COfflineMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2COfflineMsgReq*)[[[P2COfflineMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2COfflineMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (P2COfflineMsgReq*)[[[P2COfflineMsgReq builder] mergeFromInputStream:input] build];
}
+ (P2COfflineMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2COfflineMsgReq*)[[[P2COfflineMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2COfflineMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2COfflineMsgReq*)[[[P2COfflineMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (P2COfflineMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2COfflineMsgReq*)[[[P2COfflineMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2COfflineMsgReqBuilder*) builder {
  return [[P2COfflineMsgReqBuilder alloc] init];
}
+ (P2COfflineMsgReqBuilder*) builderWithPrototype:(P2COfflineMsgReq*) prototype {
  return [[P2COfflineMsgReq builder] mergeFrom:prototype];
}
- (P2COfflineMsgReqBuilder*) builder {
  return [P2COfflineMsgReq builder];
}
- (P2COfflineMsgReqBuilder*) toBuilder {
  return [P2COfflineMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", self.category];
  }
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasToid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toid", self.toid];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasLastupdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastupdate", [NSNumber numberWithLongLong:self.lastupdate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCategory) {
    [dictionary setObject: self.category forKey: @"category"];
  }
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasToid) {
    [dictionary setObject: self.toid forKey: @"toid"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasLastupdate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.lastupdate] forKey: @"lastupdate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2COfflineMsgReq class]]) {
    return NO;
  }
  P2COfflineMsgReq *otherMessage = other;
  return
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasToid == otherMessage.hasToid &&
      (!self.hasToid || [self.toid isEqual:otherMessage.toid]) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasLastupdate == otherMessage.hasLastupdate &&
      (!self.hasLastupdate || self.lastupdate == otherMessage.lastupdate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasToid) {
    hashCode = hashCode * 31 + [self.toid hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasLastupdate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastupdate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2COfflineMsgReqBuilder()
@property (strong) P2COfflineMsgReq* resultP2CofflineMsgReq;
@end

@implementation P2COfflineMsgReqBuilder
@synthesize resultP2CofflineMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CofflineMsgReq = [[P2COfflineMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CofflineMsgReq;
}
- (P2COfflineMsgReqBuilder*) clear {
  self.resultP2CofflineMsgReq = [[P2COfflineMsgReq alloc] init];
  return self;
}
- (P2COfflineMsgReqBuilder*) clone {
  return [P2COfflineMsgReq builderWithPrototype:resultP2CofflineMsgReq];
}
- (P2COfflineMsgReq*) defaultInstance {
  return [P2COfflineMsgReq defaultInstance];
}
- (P2COfflineMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2COfflineMsgReq*) buildPartial {
  P2COfflineMsgReq* returnMe = resultP2CofflineMsgReq;
  self.resultP2CofflineMsgReq = nil;
  return returnMe;
}
- (P2COfflineMsgReqBuilder*) mergeFrom:(P2COfflineMsgReq*) other {
  if (other == [P2COfflineMsgReq defaultInstance]) {
    return self;
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasToid) {
    [self setToid:other.toid];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasLastupdate) {
    [self setLastupdate:other.lastupdate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2COfflineMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2COfflineMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCategory:[input readString]];
        break;
      }
      case 18: {
        [self setFromid:[input readString]];
        break;
      }
      case 26: {
        [self setToid:[input readString]];
        break;
      }
      case 32: {
        [self setCount:[input readInt32]];
        break;
      }
      case 40: {
        [self setLastupdate:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCategory {
  return resultP2CofflineMsgReq.hasCategory;
}
- (NSString*) category {
  return resultP2CofflineMsgReq.category;
}
- (P2COfflineMsgReqBuilder*) setCategory:(NSString*) value {
  resultP2CofflineMsgReq.hasCategory = YES;
  resultP2CofflineMsgReq.category = value;
  return self;
}
- (P2COfflineMsgReqBuilder*) clearCategory {
  resultP2CofflineMsgReq.hasCategory = NO;
  resultP2CofflineMsgReq.category = @"";
  return self;
}
- (BOOL) hasFromid {
  return resultP2CofflineMsgReq.hasFromid;
}
- (NSString*) fromid {
  return resultP2CofflineMsgReq.fromid;
}
- (P2COfflineMsgReqBuilder*) setFromid:(NSString*) value {
  resultP2CofflineMsgReq.hasFromid = YES;
  resultP2CofflineMsgReq.fromid = value;
  return self;
}
- (P2COfflineMsgReqBuilder*) clearFromid {
  resultP2CofflineMsgReq.hasFromid = NO;
  resultP2CofflineMsgReq.fromid = @"";
  return self;
}
- (BOOL) hasToid {
  return resultP2CofflineMsgReq.hasToid;
}
- (NSString*) toid {
  return resultP2CofflineMsgReq.toid;
}
- (P2COfflineMsgReqBuilder*) setToid:(NSString*) value {
  resultP2CofflineMsgReq.hasToid = YES;
  resultP2CofflineMsgReq.toid = value;
  return self;
}
- (P2COfflineMsgReqBuilder*) clearToid {
  resultP2CofflineMsgReq.hasToid = NO;
  resultP2CofflineMsgReq.toid = @"";
  return self;
}
- (BOOL) hasCount {
  return resultP2CofflineMsgReq.hasCount;
}
- (SInt32) count {
  return resultP2CofflineMsgReq.count;
}
- (P2COfflineMsgReqBuilder*) setCount:(SInt32) value {
  resultP2CofflineMsgReq.hasCount = YES;
  resultP2CofflineMsgReq.count = value;
  return self;
}
- (P2COfflineMsgReqBuilder*) clearCount {
  resultP2CofflineMsgReq.hasCount = NO;
  resultP2CofflineMsgReq.count = 0;
  return self;
}
- (BOOL) hasLastupdate {
  return resultP2CofflineMsgReq.hasLastupdate;
}
- (UInt64) lastupdate {
  return resultP2CofflineMsgReq.lastupdate;
}
- (P2COfflineMsgReqBuilder*) setLastupdate:(UInt64) value {
  resultP2CofflineMsgReq.hasLastupdate = YES;
  resultP2CofflineMsgReq.lastupdate = value;
  return self;
}
- (P2COfflineMsgReqBuilder*) clearLastupdate {
  resultP2CofflineMsgReq.hasLastupdate = NO;
  resultP2CofflineMsgReq.lastupdate = 0L;
  return self;
}
@end

@interface P2COfflineMsgRsp ()
@property (strong) NSString* userid;
@property (strong) NSMutableArray<P2CMsg*> * msglistArray;
@property ResultCode code;
@end

@implementation P2COfflineMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
@synthesize msglistArray;
@dynamic msglist;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static P2COfflineMsgRsp* defaultP2COfflineMsgRspInstance = nil;
+ (void) initialize {
  if (self == [P2COfflineMsgRsp class]) {
    defaultP2COfflineMsgRspInstance = [[P2COfflineMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultP2COfflineMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultP2COfflineMsgRspInstance;
}
- (NSArray<P2CMsg*> *)msglist {
  return msglistArray;
}
- (P2CMsg*)msglistAtIndex:(NSUInteger)index {
  return [msglistArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  __block BOOL isInitmsglist = YES;
   [self.msglist enumerateObjectsUsingBlock:^(P2CMsg *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitmsglist = NO;
      *stop = YES;
    }
  }];
  if (!isInitmsglist) return isInitmsglist;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(P2CMsg *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasCode) {
    [output writeEnum:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(P2CMsg *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasCode) {
    size_ += computeEnumSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (P2COfflineMsgRsp*) parseFromData:(NSData*) data {
  return (P2COfflineMsgRsp*)[[[P2COfflineMsgRsp builder] mergeFromData:data] build];
}
+ (P2COfflineMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2COfflineMsgRsp*)[[[P2COfflineMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (P2COfflineMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (P2COfflineMsgRsp*)[[[P2COfflineMsgRsp builder] mergeFromInputStream:input] build];
}
+ (P2COfflineMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2COfflineMsgRsp*)[[[P2COfflineMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2COfflineMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (P2COfflineMsgRsp*)[[[P2COfflineMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (P2COfflineMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (P2COfflineMsgRsp*)[[[P2COfflineMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (P2COfflineMsgRspBuilder*) builder {
  return [[P2COfflineMsgRspBuilder alloc] init];
}
+ (P2COfflineMsgRspBuilder*) builderWithPrototype:(P2COfflineMsgRsp*) prototype {
  return [[P2COfflineMsgRsp builder] mergeFrom:prototype];
}
- (P2COfflineMsgRspBuilder*) builder {
  return [P2COfflineMsgRsp builder];
}
- (P2COfflineMsgRspBuilder*) toBuilder {
  return [P2COfflineMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(P2CMsg *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"msglist"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  for (P2CMsg* element in self.msglistArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"msglist"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[P2COfflineMsgRsp class]]) {
    return NO;
  }
  P2COfflineMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      [self.msglistArray isEqualToArray:otherMessage.msglistArray] &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  [self.msglistArray enumerateObjectsUsingBlock:^(P2CMsg *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface P2COfflineMsgRspBuilder()
@property (strong) P2COfflineMsgRsp* resultP2CofflineMsgRsp;
@end

@implementation P2COfflineMsgRspBuilder
@synthesize resultP2CofflineMsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultP2CofflineMsgRsp = [[P2COfflineMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultP2CofflineMsgRsp;
}
- (P2COfflineMsgRspBuilder*) clear {
  self.resultP2CofflineMsgRsp = [[P2COfflineMsgRsp alloc] init];
  return self;
}
- (P2COfflineMsgRspBuilder*) clone {
  return [P2COfflineMsgRsp builderWithPrototype:resultP2CofflineMsgRsp];
}
- (P2COfflineMsgRsp*) defaultInstance {
  return [P2COfflineMsgRsp defaultInstance];
}
- (P2COfflineMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (P2COfflineMsgRsp*) buildPartial {
  P2COfflineMsgRsp* returnMe = resultP2CofflineMsgRsp;
  self.resultP2CofflineMsgRsp = nil;
  return returnMe;
}
- (P2COfflineMsgRspBuilder*) mergeFrom:(P2COfflineMsgRsp*) other {
  if (other == [P2COfflineMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.msglistArray.count > 0) {
    if (resultP2CofflineMsgRsp.msglistArray == nil) {
      resultP2CofflineMsgRsp.msglistArray = [[NSMutableArray alloc] initWithArray:other.msglistArray];
    } else {
      [resultP2CofflineMsgRsp.msglistArray addObjectsFromArray:other.msglistArray];
    }
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (P2COfflineMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (P2COfflineMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 18: {
        P2CMsgBuilder* subBuilder = [P2CMsg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMsglist:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultP2CofflineMsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultP2CofflineMsgRsp.userid;
}
- (P2COfflineMsgRspBuilder*) setUserid:(NSString*) value {
  resultP2CofflineMsgRsp.hasUserid = YES;
  resultP2CofflineMsgRsp.userid = value;
  return self;
}
- (P2COfflineMsgRspBuilder*) clearUserid {
  resultP2CofflineMsgRsp.hasUserid = NO;
  resultP2CofflineMsgRsp.userid = @"";
  return self;
}
- (NSMutableArray<P2CMsg*> *)msglist {
  return resultP2CofflineMsgRsp.msglistArray;
}
- (P2CMsg*)msglistAtIndex:(NSUInteger)index {
  return [resultP2CofflineMsgRsp msglistAtIndex:index];
}
- (P2COfflineMsgRspBuilder *)addMsglist:(P2CMsg*)value {
  if (resultP2CofflineMsgRsp.msglistArray == nil) {
    resultP2CofflineMsgRsp.msglistArray = [[NSMutableArray alloc]init];
  }
  [resultP2CofflineMsgRsp.msglistArray addObject:value];
  return self;
}
- (P2COfflineMsgRspBuilder *)setMsglistArray:(NSArray<P2CMsg*> *)array {
  resultP2CofflineMsgRsp.msglistArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (P2COfflineMsgRspBuilder *)clearMsglist {
  resultP2CofflineMsgRsp.msglistArray = nil;
  return self;
}
- (BOOL) hasCode {
  return resultP2CofflineMsgRsp.hasCode;
}
- (ResultCode) code {
  return resultP2CofflineMsgRsp.code;
}
- (P2COfflineMsgRspBuilder*) setCode:(ResultCode) value {
  resultP2CofflineMsgRsp.hasCode = YES;
  resultP2CofflineMsgRsp.code = value;
  return self;
}
- (P2COfflineMsgRspBuilder*) clearCode {
  resultP2CofflineMsgRsp.hasCode = NO;
  resultP2CofflineMsgRsp.code = ResultCodeNoError;
  return self;
}
@end

@interface AssignP2CLeaveMsgReq ()
@property (strong) NSString* fromid;
@property (strong) NSString* entid;
@end

@implementation AssignP2CLeaveMsgReq

- (BOOL) hasFromid {
  return !!hasFromid_;
}
- (void) setHasFromid:(BOOL) _value_ {
  hasFromid_ = !!_value_;
}
@synthesize fromid;
- (BOOL) hasEntid {
  return !!hasEntid_;
}
- (void) setHasEntid:(BOOL) _value_ {
  hasEntid_ = !!_value_;
}
@synthesize entid;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromid = @"";
    self.entid = @"";
  }
  return self;
}
static AssignP2CLeaveMsgReq* defaultAssignP2CLeaveMsgReqInstance = nil;
+ (void) initialize {
  if (self == [AssignP2CLeaveMsgReq class]) {
    defaultAssignP2CLeaveMsgReqInstance = [[AssignP2CLeaveMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAssignP2CLeaveMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultAssignP2CLeaveMsgReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromid) {
    return NO;
  }
  if (!self.hasEntid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromid) {
    [output writeString:1 value:self.fromid];
  }
  if (self.hasEntid) {
    [output writeString:2 value:self.entid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromid) {
    size_ += computeStringSize(1, self.fromid);
  }
  if (self.hasEntid) {
    size_ += computeStringSize(2, self.entid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AssignP2CLeaveMsgReq*) parseFromData:(NSData*) data {
  return (AssignP2CLeaveMsgReq*)[[[AssignP2CLeaveMsgReq builder] mergeFromData:data] build];
}
+ (AssignP2CLeaveMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AssignP2CLeaveMsgReq*)[[[AssignP2CLeaveMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AssignP2CLeaveMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (AssignP2CLeaveMsgReq*)[[[AssignP2CLeaveMsgReq builder] mergeFromInputStream:input] build];
}
+ (AssignP2CLeaveMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AssignP2CLeaveMsgReq*)[[[AssignP2CLeaveMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AssignP2CLeaveMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AssignP2CLeaveMsgReq*)[[[AssignP2CLeaveMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (AssignP2CLeaveMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AssignP2CLeaveMsgReq*)[[[AssignP2CLeaveMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AssignP2CLeaveMsgReqBuilder*) builder {
  return [[AssignP2CLeaveMsgReqBuilder alloc] init];
}
+ (AssignP2CLeaveMsgReqBuilder*) builderWithPrototype:(AssignP2CLeaveMsgReq*) prototype {
  return [[AssignP2CLeaveMsgReq builder] mergeFrom:prototype];
}
- (AssignP2CLeaveMsgReqBuilder*) builder {
  return [AssignP2CLeaveMsgReq builder];
}
- (AssignP2CLeaveMsgReqBuilder*) toBuilder {
  return [AssignP2CLeaveMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromid", self.fromid];
  }
  if (self.hasEntid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entid", self.entid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromid) {
    [dictionary setObject: self.fromid forKey: @"fromid"];
  }
  if (self.hasEntid) {
    [dictionary setObject: self.entid forKey: @"entid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AssignP2CLeaveMsgReq class]]) {
    return NO;
  }
  AssignP2CLeaveMsgReq *otherMessage = other;
  return
      self.hasFromid == otherMessage.hasFromid &&
      (!self.hasFromid || [self.fromid isEqual:otherMessage.fromid]) &&
      self.hasEntid == otherMessage.hasEntid &&
      (!self.hasEntid || [self.entid isEqual:otherMessage.entid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromid) {
    hashCode = hashCode * 31 + [self.fromid hash];
  }
  if (self.hasEntid) {
    hashCode = hashCode * 31 + [self.entid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AssignP2CLeaveMsgReqBuilder()
@property (strong) AssignP2CLeaveMsgReq* resultAssignP2CleaveMsgReq;
@end

@implementation AssignP2CLeaveMsgReqBuilder
@synthesize resultAssignP2CleaveMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAssignP2CleaveMsgReq = [[AssignP2CLeaveMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAssignP2CleaveMsgReq;
}
- (AssignP2CLeaveMsgReqBuilder*) clear {
  self.resultAssignP2CleaveMsgReq = [[AssignP2CLeaveMsgReq alloc] init];
  return self;
}
- (AssignP2CLeaveMsgReqBuilder*) clone {
  return [AssignP2CLeaveMsgReq builderWithPrototype:resultAssignP2CleaveMsgReq];
}
- (AssignP2CLeaveMsgReq*) defaultInstance {
  return [AssignP2CLeaveMsgReq defaultInstance];
}
- (AssignP2CLeaveMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AssignP2CLeaveMsgReq*) buildPartial {
  AssignP2CLeaveMsgReq* returnMe = resultAssignP2CleaveMsgReq;
  self.resultAssignP2CleaveMsgReq = nil;
  return returnMe;
}
- (AssignP2CLeaveMsgReqBuilder*) mergeFrom:(AssignP2CLeaveMsgReq*) other {
  if (other == [AssignP2CLeaveMsgReq defaultInstance]) {
    return self;
  }
  if (other.hasFromid) {
    [self setFromid:other.fromid];
  }
  if (other.hasEntid) {
    [self setEntid:other.entid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AssignP2CLeaveMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AssignP2CLeaveMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFromid:[input readString]];
        break;
      }
      case 18: {
        [self setEntid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFromid {
  return resultAssignP2CleaveMsgReq.hasFromid;
}
- (NSString*) fromid {
  return resultAssignP2CleaveMsgReq.fromid;
}
- (AssignP2CLeaveMsgReqBuilder*) setFromid:(NSString*) value {
  resultAssignP2CleaveMsgReq.hasFromid = YES;
  resultAssignP2CleaveMsgReq.fromid = value;
  return self;
}
- (AssignP2CLeaveMsgReqBuilder*) clearFromid {
  resultAssignP2CleaveMsgReq.hasFromid = NO;
  resultAssignP2CleaveMsgReq.fromid = @"";
  return self;
}
- (BOOL) hasEntid {
  return resultAssignP2CleaveMsgReq.hasEntid;
}
- (NSString*) entid {
  return resultAssignP2CleaveMsgReq.entid;
}
- (AssignP2CLeaveMsgReqBuilder*) setEntid:(NSString*) value {
  resultAssignP2CleaveMsgReq.hasEntid = YES;
  resultAssignP2CleaveMsgReq.entid = value;
  return self;
}
- (AssignP2CLeaveMsgReqBuilder*) clearEntid {
  resultAssignP2CleaveMsgReq.hasEntid = NO;
  resultAssignP2CleaveMsgReq.entid = @"";
  return self;
}
@end

@interface AssignP2CLeaveMsgRsp ()
@property (strong) NSString* userid;
@property ResultCode code;
@end

@implementation AssignP2CLeaveMsgRsp

- (BOOL) hasUserid {
  return !!hasUserid_;
}
- (void) setHasUserid:(BOOL) _value_ {
  hasUserid_ = !!_value_;
}
@synthesize userid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.userid = @"";
    self.code = ResultCodeNoError;
  }
  return self;
}
static AssignP2CLeaveMsgRsp* defaultAssignP2CLeaveMsgRspInstance = nil;
+ (void) initialize {
  if (self == [AssignP2CLeaveMsgRsp class]) {
    defaultAssignP2CLeaveMsgRspInstance = [[AssignP2CLeaveMsgRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAssignP2CLeaveMsgRspInstance;
}
- (instancetype) defaultInstance {
  return defaultAssignP2CLeaveMsgRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserid) {
    [output writeString:1 value:self.userid];
  }
  if (self.hasCode) {
    [output writeEnum:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserid) {
    size_ += computeStringSize(1, self.userid);
  }
  if (self.hasCode) {
    size_ += computeEnumSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AssignP2CLeaveMsgRsp*) parseFromData:(NSData*) data {
  return (AssignP2CLeaveMsgRsp*)[[[AssignP2CLeaveMsgRsp builder] mergeFromData:data] build];
}
+ (AssignP2CLeaveMsgRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AssignP2CLeaveMsgRsp*)[[[AssignP2CLeaveMsgRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AssignP2CLeaveMsgRsp*) parseFromInputStream:(NSInputStream*) input {
  return (AssignP2CLeaveMsgRsp*)[[[AssignP2CLeaveMsgRsp builder] mergeFromInputStream:input] build];
}
+ (AssignP2CLeaveMsgRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AssignP2CLeaveMsgRsp*)[[[AssignP2CLeaveMsgRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AssignP2CLeaveMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AssignP2CLeaveMsgRsp*)[[[AssignP2CLeaveMsgRsp builder] mergeFromCodedInputStream:input] build];
}
+ (AssignP2CLeaveMsgRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AssignP2CLeaveMsgRsp*)[[[AssignP2CLeaveMsgRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AssignP2CLeaveMsgRspBuilder*) builder {
  return [[AssignP2CLeaveMsgRspBuilder alloc] init];
}
+ (AssignP2CLeaveMsgRspBuilder*) builderWithPrototype:(AssignP2CLeaveMsgRsp*) prototype {
  return [[AssignP2CLeaveMsgRsp builder] mergeFrom:prototype];
}
- (AssignP2CLeaveMsgRspBuilder*) builder {
  return [AssignP2CLeaveMsgRsp builder];
}
- (AssignP2CLeaveMsgRspBuilder*) toBuilder {
  return [AssignP2CLeaveMsgRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userid", self.userid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", NSStringFromResultCode(self.code)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserid) {
    [dictionary setObject: self.userid forKey: @"userid"];
  }
  if (self.hasCode) {
    [dictionary setObject: @(self.code) forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AssignP2CLeaveMsgRsp class]]) {
    return NO;
  }
  AssignP2CLeaveMsgRsp *otherMessage = other;
  return
      self.hasUserid == otherMessage.hasUserid &&
      (!self.hasUserid || [self.userid isEqual:otherMessage.userid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserid) {
    hashCode = hashCode * 31 + [self.userid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + self.code;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AssignP2CLeaveMsgRspBuilder()
@property (strong) AssignP2CLeaveMsgRsp* resultAssignP2CleaveMsgRsp;
@end

@implementation AssignP2CLeaveMsgRspBuilder
@synthesize resultAssignP2CleaveMsgRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAssignP2CleaveMsgRsp = [[AssignP2CLeaveMsgRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAssignP2CleaveMsgRsp;
}
- (AssignP2CLeaveMsgRspBuilder*) clear {
  self.resultAssignP2CleaveMsgRsp = [[AssignP2CLeaveMsgRsp alloc] init];
  return self;
}
- (AssignP2CLeaveMsgRspBuilder*) clone {
  return [AssignP2CLeaveMsgRsp builderWithPrototype:resultAssignP2CleaveMsgRsp];
}
- (AssignP2CLeaveMsgRsp*) defaultInstance {
  return [AssignP2CLeaveMsgRsp defaultInstance];
}
- (AssignP2CLeaveMsgRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AssignP2CLeaveMsgRsp*) buildPartial {
  AssignP2CLeaveMsgRsp* returnMe = resultAssignP2CleaveMsgRsp;
  self.resultAssignP2CleaveMsgRsp = nil;
  return returnMe;
}
- (AssignP2CLeaveMsgRspBuilder*) mergeFrom:(AssignP2CLeaveMsgRsp*) other {
  if (other == [AssignP2CLeaveMsgRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserid) {
    [self setUserid:other.userid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AssignP2CLeaveMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AssignP2CLeaveMsgRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserid:[input readString]];
        break;
      }
      case 16: {
        ResultCode value = (ResultCode)[input readEnum];
        if (ResultCodeIsValidValue(value)) {
          [self setCode:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserid {
  return resultAssignP2CleaveMsgRsp.hasUserid;
}
- (NSString*) userid {
  return resultAssignP2CleaveMsgRsp.userid;
}
- (AssignP2CLeaveMsgRspBuilder*) setUserid:(NSString*) value {
  resultAssignP2CleaveMsgRsp.hasUserid = YES;
  resultAssignP2CleaveMsgRsp.userid = value;
  return self;
}
- (AssignP2CLeaveMsgRspBuilder*) clearUserid {
  resultAssignP2CleaveMsgRsp.hasUserid = NO;
  resultAssignP2CleaveMsgRsp.userid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultAssignP2CleaveMsgRsp.hasCode;
}
- (ResultCode) code {
  return resultAssignP2CleaveMsgRsp.code;
}
- (AssignP2CLeaveMsgRspBuilder*) setCode:(ResultCode) value {
  resultAssignP2CleaveMsgRsp.hasCode = YES;
  resultAssignP2CleaveMsgRsp.code = value;
  return self;
}
- (AssignP2CLeaveMsgRspBuilder*) clearCode {
  resultAssignP2CleaveMsgRsp.hasCode = NO;
  resultAssignP2CleaveMsgRsp.code = ResultCodeNoError;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
