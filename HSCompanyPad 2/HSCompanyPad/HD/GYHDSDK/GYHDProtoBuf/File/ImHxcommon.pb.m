// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ImHxcommon.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImHxcommonRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImHxcommonRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ResultCodeIsValidValue(ResultCode value) {
  switch (value) {
    case ResultCodeNoError:
    case ResultCodeErrorConnectDatabase:
    case ResultCodeErrorQueryDatabase:
    case ResultCodeErrorInsertDatabase:
    case ResultCodeErrorUpdateDatabase:
    case ResultCodeErrorDeleteDatabase:
    case ResultCodeErrorInvalidData:
    case ResultCodeErrorLoginForbidden:
    case ResultCodeErrorLoginAuth:
    case ResultCodeErrorRelogin:
    case ResultCodeErrorLogout:
    case ResultCodeErrorIllegalContent:
    case ResultCodeErrorCountTooMuch:
    case ResultCodeErrorFriendAlreadyExist:
    case ResultCodeErrorFriendCannotAddYourself:
    case ResultCodeErrorFriendRquToomuch:
    case ResultCodeErrorFriendStranger:
    case ResultCodeErrorFriendIToomuchFriends:
    case ResultCodeErrorFriendUToomuchFriends:
    case ResultCodeErrorFriendTeamToomuch:
    case ResultCodeErrorFriendTeamAlreadyExsit:
    case ResultCodeErrorFriendINull:
    case ResultCodeErrorFriendUNull:
    case ResultCodeErrorFriendYourself:
    case ResultCodeErrorFriendFriend:
    case ResultCodeErrorMsgFromid:
    case ResultCodeErrorMsgToid:
    case ResultCodeErrorMsgUserid:
    case ResultCodeErrorP2CKefuOffline:
    case ResultCodeErrorP2CUnclosed:
    case ResultCodeErrorP2CSessionNotExist:
    case ResultCodeErrorP2CSwitchNotNewkefu:
    case ResultCodeErrorP2CInvalidEntid:
    case ResultCodeErrorP2CWithoutKefuPermission:
    case ResultCodeErrorP2CInvalidSession:
    case ResultCodeErrorBpnDeviceversionError:
    case ResultCodeErrorBpnTokenError:
    case ResultCodeErrorBpnMsgidError:
    case ResultCodeErrorBpnToidError:
    case ResultCodeErrorMsgDeviceversionError:
    case ResultCodeErrorMsgTokenError:
    case ResultCodeErrorMsgMsgidError:
    case ResultCodeErrorMsgToidErrot:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromResultCode(ResultCode value) {
  switch (value) {
    case ResultCodeNoError:
      return @"ResultCodeNoError";
    case ResultCodeErrorConnectDatabase:
      return @"ResultCodeErrorConnectDatabase";
    case ResultCodeErrorQueryDatabase:
      return @"ResultCodeErrorQueryDatabase";
    case ResultCodeErrorInsertDatabase:
      return @"ResultCodeErrorInsertDatabase";
    case ResultCodeErrorUpdateDatabase:
      return @"ResultCodeErrorUpdateDatabase";
    case ResultCodeErrorDeleteDatabase:
      return @"ResultCodeErrorDeleteDatabase";
    case ResultCodeErrorInvalidData:
      return @"ResultCodeErrorInvalidData";
    case ResultCodeErrorLoginForbidden:
      return @"ResultCodeErrorLoginForbidden";
    case ResultCodeErrorLoginAuth:
      return @"ResultCodeErrorLoginAuth";
    case ResultCodeErrorRelogin:
      return @"ResultCodeErrorRelogin";
    case ResultCodeErrorLogout:
      return @"ResultCodeErrorLogout";
    case ResultCodeErrorIllegalContent:
      return @"ResultCodeErrorIllegalContent";
    case ResultCodeErrorCountTooMuch:
      return @"ResultCodeErrorCountTooMuch";
    case ResultCodeErrorFriendAlreadyExist:
      return @"ResultCodeErrorFriendAlreadyExist";
    case ResultCodeErrorFriendCannotAddYourself:
      return @"ResultCodeErrorFriendCannotAddYourself";
    case ResultCodeErrorFriendRquToomuch:
      return @"ResultCodeErrorFriendRquToomuch";
    case ResultCodeErrorFriendStranger:
      return @"ResultCodeErrorFriendStranger";
    case ResultCodeErrorFriendIToomuchFriends:
      return @"ResultCodeErrorFriendIToomuchFriends";
    case ResultCodeErrorFriendUToomuchFriends:
      return @"ResultCodeErrorFriendUToomuchFriends";
    case ResultCodeErrorFriendTeamToomuch:
      return @"ResultCodeErrorFriendTeamToomuch";
    case ResultCodeErrorFriendTeamAlreadyExsit:
      return @"ResultCodeErrorFriendTeamAlreadyExsit";
    case ResultCodeErrorFriendINull:
      return @"ResultCodeErrorFriendINull";
    case ResultCodeErrorFriendUNull:
      return @"ResultCodeErrorFriendUNull";
    case ResultCodeErrorFriendYourself:
      return @"ResultCodeErrorFriendYourself";
    case ResultCodeErrorFriendFriend:
      return @"ResultCodeErrorFriendFriend";
    case ResultCodeErrorMsgFromid:
      return @"ResultCodeErrorMsgFromid";
    case ResultCodeErrorMsgToid:
      return @"ResultCodeErrorMsgToid";
    case ResultCodeErrorMsgUserid:
      return @"ResultCodeErrorMsgUserid";
    case ResultCodeErrorP2CKefuOffline:
      return @"ResultCodeErrorP2CKefuOffline";
    case ResultCodeErrorP2CUnclosed:
      return @"ResultCodeErrorP2CUnclosed";
    case ResultCodeErrorP2CSessionNotExist:
      return @"ResultCodeErrorP2CSessionNotExist";
    case ResultCodeErrorP2CSwitchNotNewkefu:
      return @"ResultCodeErrorP2CSwitchNotNewkefu";
    case ResultCodeErrorP2CInvalidEntid:
      return @"ResultCodeErrorP2CInvalidEntid";
    case ResultCodeErrorP2CWithoutKefuPermission:
      return @"ResultCodeErrorP2CWithoutKefuPermission";
    case ResultCodeErrorP2CInvalidSession:
      return @"ResultCodeErrorP2CInvalidSession";
    case ResultCodeErrorBpnDeviceversionError:
      return @"ResultCodeErrorBpnDeviceversionError";
    case ResultCodeErrorBpnTokenError:
      return @"ResultCodeErrorBpnTokenError";
    case ResultCodeErrorBpnMsgidError:
      return @"ResultCodeErrorBpnMsgidError";
    case ResultCodeErrorBpnToidError:
      return @"ResultCodeErrorBpnToidError";
    case ResultCodeErrorMsgDeviceversionError:
      return @"ResultCodeErrorMsgDeviceversionError";
    case ResultCodeErrorMsgTokenError:
      return @"ResultCodeErrorMsgTokenError";
    case ResultCodeErrorMsgMsgidError:
      return @"ResultCodeErrorMsgMsgidError";
    case ResultCodeErrorMsgToidErrot:
      return @"ResultCodeErrorMsgToidErrot";
    default:
      return nil;
  }
}

BOOL CommandIDIsValidValue(CommandID value) {
  switch (value) {
    case CommandIDSrvAuth:
    case CommandIDSysHeartbeat:
    case CommandIDSysHeartbeatAck:
    case CommandIDSysClientTimeout:
    case CommandIDCmCustLogin:
    case CommandIDCmCustLoginAck:
    case CommandIDCmCustLogout:
    case CommandIDCmCustLogoutAck:
    case CommandIDCmCustKickout:
    case CommandIDMsgSessionMessage:
    case CommandIDMsgSessionMessageRsp:
    case CommandIDMsgSessionMessageAck:
    case CommandIDMsgSessionMessageAckRsp:
    case CommandIDMsgSessionMessageReaded:
    case CommandIDMsgSessionMessageReadedRsp:
    case CommandIDMsgSessionMessageForward:
    case CommandIDHistoryMessageSummary:
    case CommandIDHistoryMessageSummaryRsp:
    case CommandIDMsgHistoryMessageList:
    case CommandIDMsgHistoryMessageListRsp:
    case CommandIDMsgHistoryMessageListAck:
    case CommandIDMsgHistoryMessageListAckRsp:
    case CommandIDMsgHistoryMessageListReaded:
    case CommandIDMsgHistoryMessageListReadedRsp:
    case CommandIDHsPlatformHistoryMessageList:
    case CommandIDHsPlatformHistoryMessageListRsp:
    case CommandIDHsPlatformHistoryMessageListAck:
    case CommandIDHsPlatformHistoryMessageListAckRsp:
    case CommandIDHsPlatformHistoryMessageListReaded:
    case CommandIDHsPlatformHistoryMessageListReadedRsp:
    case CommandIDFriendHistoryMessageList:
    case CommandIDFriendHistoryMessageListRsp:
    case CommandIDFriendHistoryMessageListAck:
    case CommandIDFriendHistoryMessageListAckRsp:
    case CommandIDFriendHistoryMessageListReaded:
    case CommandIDFriendHistoryMessageListReadedRsp:
    case CommandIDP2CHistoryMessageList:
    case CommandIDP2CHistoryMessageListRsp:
    case CommandIDP2CHistoryMessageListAck:
    case CommandIDP2CHistoryMessageListAckRsp:
    case CommandIDP2CHistoryMessageListReaded:
    case CommandIDP2CHistoryMessageListReadedRsp:
    case CommandIDP2CAssignLeaveMessage:
    case CommandIDP2CAssignLeaveMessageRsp:
    case CommandIDMsgAddFriendReq:
    case CommandIDMsgAddFriendRsp:
    case CommandIDMsgVerifyFriendReq:
    case CommandIDMsgVerifyFriendRsp:
    case CommandIDMsgDelFriendReq:
    case CommandIDMsgDelFriendRsp:
    case CommandIDMsgModifyFriendReq:
    case CommandIDMsgModifyFriendRsp:
    case CommandIDMsgShieldFriendReq:
    case CommandIDMsgShieldFriendRsp:
    case CommandIDBpnMessagePush:
    case CommandIDBpnMessagePushRsp:
    case CommandIDBpnMessageAuthCm:
    case CommandIDBpnMessageAuthCmRsp:
    case CommandIDBpnMessageAuth:
    case CommandIDBpnMessageAuthRsp:
    case CommandIDP2CCreateReq:
    case CommandIDP2CCreateRsp:
    case CommandIDP2CCloseReq:
    case CommandIDP2CCloseRsp:
    case CommandIDP2CCloseForward:
    case CommandIDP2CMessage:
    case CommandIDP2CMessageRsp:
    case CommandIDP2CMessageForward:
    case CommandIDP2CMessageAckReq:
    case CommandIDP2CMessageAckRsp:
    case CommandIDP2CMessageReadedReq:
    case CommandIDP2CMessageReadedRsp:
    case CommandIDP2CSwitchReq:
    case CommandIDP2CSwitchRsp:
    case CommandIDP2CSwitchForward:
    case CommandIDP2CSwitchForwardRsp:
    case CommandIDP2CNotifySwitchC:
    case CommandIDP2CNotifySwitchRsp:
    case CommandIDP2CNotifySwitchP:
    case CommandIDP2CLeaveMsgReq:
    case CommandIDP2CLeaveMsgRsp:
    case CommandIDApnsBpnPushReq:
    case CommandIDApnsBpnPushRsp:
    case CommandIDApnsMsgPushReq:
    case CommandIDApnsMsgPushRsp:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCommandID(CommandID value) {
  switch (value) {
    case CommandIDSrvAuth:
      return @"CommandIDSrvAuth";
    case CommandIDSysHeartbeat:
      return @"CommandIDSysHeartbeat";
    case CommandIDSysHeartbeatAck:
      return @"CommandIDSysHeartbeatAck";
    case CommandIDSysClientTimeout:
      return @"CommandIDSysClientTimeout";
    case CommandIDCmCustLogin:
      return @"CommandIDCmCustLogin";
    case CommandIDCmCustLoginAck:
      return @"CommandIDCmCustLoginAck";
    case CommandIDCmCustLogout:
      return @"CommandIDCmCustLogout";
    case CommandIDCmCustLogoutAck:
      return @"CommandIDCmCustLogoutAck";
    case CommandIDCmCustKickout:
      return @"CommandIDCmCustKickout";
    case CommandIDMsgSessionMessage:
      return @"CommandIDMsgSessionMessage";
    case CommandIDMsgSessionMessageRsp:
      return @"CommandIDMsgSessionMessageRsp";
    case CommandIDMsgSessionMessageAck:
      return @"CommandIDMsgSessionMessageAck";
    case CommandIDMsgSessionMessageAckRsp:
      return @"CommandIDMsgSessionMessageAckRsp";
    case CommandIDMsgSessionMessageReaded:
      return @"CommandIDMsgSessionMessageReaded";
    case CommandIDMsgSessionMessageReadedRsp:
      return @"CommandIDMsgSessionMessageReadedRsp";
    case CommandIDMsgSessionMessageForward:
      return @"CommandIDMsgSessionMessageForward";
    case CommandIDHistoryMessageSummary:
      return @"CommandIDHistoryMessageSummary";
    case CommandIDHistoryMessageSummaryRsp:
      return @"CommandIDHistoryMessageSummaryRsp";
    case CommandIDMsgHistoryMessageList:
      return @"CommandIDMsgHistoryMessageList";
    case CommandIDMsgHistoryMessageListRsp:
      return @"CommandIDMsgHistoryMessageListRsp";
    case CommandIDMsgHistoryMessageListAck:
      return @"CommandIDMsgHistoryMessageListAck";
    case CommandIDMsgHistoryMessageListAckRsp:
      return @"CommandIDMsgHistoryMessageListAckRsp";
    case CommandIDMsgHistoryMessageListReaded:
      return @"CommandIDMsgHistoryMessageListReaded";
    case CommandIDMsgHistoryMessageListReadedRsp:
      return @"CommandIDMsgHistoryMessageListReadedRsp";
    case CommandIDHsPlatformHistoryMessageList:
      return @"CommandIDHsPlatformHistoryMessageList";
    case CommandIDHsPlatformHistoryMessageListRsp:
      return @"CommandIDHsPlatformHistoryMessageListRsp";
    case CommandIDHsPlatformHistoryMessageListAck:
      return @"CommandIDHsPlatformHistoryMessageListAck";
    case CommandIDHsPlatformHistoryMessageListAckRsp:
      return @"CommandIDHsPlatformHistoryMessageListAckRsp";
    case CommandIDHsPlatformHistoryMessageListReaded:
      return @"CommandIDHsPlatformHistoryMessageListReaded";
    case CommandIDHsPlatformHistoryMessageListReadedRsp:
      return @"CommandIDHsPlatformHistoryMessageListReadedRsp";
    case CommandIDFriendHistoryMessageList:
      return @"CommandIDFriendHistoryMessageList";
    case CommandIDFriendHistoryMessageListRsp:
      return @"CommandIDFriendHistoryMessageListRsp";
    case CommandIDFriendHistoryMessageListAck:
      return @"CommandIDFriendHistoryMessageListAck";
    case CommandIDFriendHistoryMessageListAckRsp:
      return @"CommandIDFriendHistoryMessageListAckRsp";
    case CommandIDFriendHistoryMessageListReaded:
      return @"CommandIDFriendHistoryMessageListReaded";
    case CommandIDFriendHistoryMessageListReadedRsp:
      return @"CommandIDFriendHistoryMessageListReadedRsp";
    case CommandIDP2CHistoryMessageList:
      return @"CommandIDP2CHistoryMessageList";
    case CommandIDP2CHistoryMessageListRsp:
      return @"CommandIDP2CHistoryMessageListRsp";
    case CommandIDP2CHistoryMessageListAck:
      return @"CommandIDP2CHistoryMessageListAck";
    case CommandIDP2CHistoryMessageListAckRsp:
      return @"CommandIDP2CHistoryMessageListAckRsp";
    case CommandIDP2CHistoryMessageListReaded:
      return @"CommandIDP2CHistoryMessageListReaded";
    case CommandIDP2CHistoryMessageListReadedRsp:
      return @"CommandIDP2CHistoryMessageListReadedRsp";
    case CommandIDP2CAssignLeaveMessage:
      return @"CommandIDP2CAssignLeaveMessage";
    case CommandIDP2CAssignLeaveMessageRsp:
      return @"CommandIDP2CAssignLeaveMessageRsp";
    case CommandIDMsgAddFriendReq:
      return @"CommandIDMsgAddFriendReq";
    case CommandIDMsgAddFriendRsp:
      return @"CommandIDMsgAddFriendRsp";
    case CommandIDMsgVerifyFriendReq:
      return @"CommandIDMsgVerifyFriendReq";
    case CommandIDMsgVerifyFriendRsp:
      return @"CommandIDMsgVerifyFriendRsp";
    case CommandIDMsgDelFriendReq:
      return @"CommandIDMsgDelFriendReq";
    case CommandIDMsgDelFriendRsp:
      return @"CommandIDMsgDelFriendRsp";
    case CommandIDMsgModifyFriendReq:
      return @"CommandIDMsgModifyFriendReq";
    case CommandIDMsgModifyFriendRsp:
      return @"CommandIDMsgModifyFriendRsp";
    case CommandIDMsgShieldFriendReq:
      return @"CommandIDMsgShieldFriendReq";
    case CommandIDMsgShieldFriendRsp:
      return @"CommandIDMsgShieldFriendRsp";
    case CommandIDBpnMessagePush:
      return @"CommandIDBpnMessagePush";
    case CommandIDBpnMessagePushRsp:
      return @"CommandIDBpnMessagePushRsp";
    case CommandIDBpnMessageAuthCm:
      return @"CommandIDBpnMessageAuthCm";
    case CommandIDBpnMessageAuthCmRsp:
      return @"CommandIDBpnMessageAuthCmRsp";
    case CommandIDBpnMessageAuth:
      return @"CommandIDBpnMessageAuth";
    case CommandIDBpnMessageAuthRsp:
      return @"CommandIDBpnMessageAuthRsp";
    case CommandIDP2CCreateReq:
      return @"CommandIDP2CCreateReq";
    case CommandIDP2CCreateRsp:
      return @"CommandIDP2CCreateRsp";
    case CommandIDP2CCloseReq:
      return @"CommandIDP2CCloseReq";
    case CommandIDP2CCloseRsp:
      return @"CommandIDP2CCloseRsp";
    case CommandIDP2CCloseForward:
      return @"CommandIDP2CCloseForward";
    case CommandIDP2CMessage:
      return @"CommandIDP2CMessage";
    case CommandIDP2CMessageRsp:
      return @"CommandIDP2CMessageRsp";
    case CommandIDP2CMessageForward:
      return @"CommandIDP2CMessageForward";
    case CommandIDP2CMessageAckReq:
      return @"CommandIDP2CMessageAckReq";
    case CommandIDP2CMessageAckRsp:
      return @"CommandIDP2CMessageAckRsp";
    case CommandIDP2CMessageReadedReq:
      return @"CommandIDP2CMessageReadedReq";
    case CommandIDP2CMessageReadedRsp:
      return @"CommandIDP2CMessageReadedRsp";
    case CommandIDP2CSwitchReq:
      return @"CommandIDP2CSwitchReq";
    case CommandIDP2CSwitchRsp:
      return @"CommandIDP2CSwitchRsp";
    case CommandIDP2CSwitchForward:
      return @"CommandIDP2CSwitchForward";
    case CommandIDP2CSwitchForwardRsp:
      return @"CommandIDP2CSwitchForwardRsp";
    case CommandIDP2CNotifySwitchC:
      return @"CommandIDP2CNotifySwitchC";
    case CommandIDP2CNotifySwitchRsp:
      return @"CommandIDP2CNotifySwitchRsp";
    case CommandIDP2CNotifySwitchP:
      return @"CommandIDP2CNotifySwitchP";
    case CommandIDP2CLeaveMsgReq:
      return @"CommandIDP2CLeaveMsgReq";
    case CommandIDP2CLeaveMsgRsp:
      return @"CommandIDP2CLeaveMsgRsp";
    case CommandIDApnsBpnPushReq:
      return @"CommandIDApnsBpnPushReq";
    case CommandIDApnsBpnPushRsp:
      return @"CommandIDApnsBpnPushRsp";
    case CommandIDApnsMsgPushReq:
      return @"CommandIDApnsMsgPushReq";
    case CommandIDApnsMsgPushRsp:
      return @"CommandIDApnsMsgPushRsp";
    default:
      return nil;
  }
}

BOOL PlatformDeviceIsValidValue(PlatformDevice value) {
  switch (value) {
    case PlatformDeviceUnkownDevice:
    case PlatformDeviceWeb:
    case PlatformDevicePhone:
    case PlatformDeviceIpad:
    case PlatformDeviceHspad:
    case PlatformDevicePc:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPlatformDevice(PlatformDevice value) {
  switch (value) {
    case PlatformDeviceUnkownDevice:
      return @"PlatformDeviceUnkownDevice";
    case PlatformDeviceWeb:
      return @"PlatformDeviceWeb";
    case PlatformDevicePhone:
      return @"PlatformDevicePhone";
    case PlatformDeviceIpad:
      return @"PlatformDeviceIpad";
    case PlatformDeviceHspad:
      return @"PlatformDeviceHspad";
    case PlatformDevicePc:
      return @"PlatformDevicePc";
    default:
      return nil;
  }
}


// @@protoc_insertion_point(global_scope)
