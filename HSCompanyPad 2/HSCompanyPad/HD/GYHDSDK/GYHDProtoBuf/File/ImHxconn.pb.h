// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import <ProtocolBuffers/ProtocolBuffers.h>

#import "ImHxcommon.pb.h"
// @@protoc_insertion_point(imports)

@class KickoutNotify;
@class KickoutNotifyBuilder;
@class LoginAck;
@class LoginAckBuilder;
@class LoginReq;
@class LoginReqBuilder;
@class LogoutAck;
@class LogoutAckBuilder;
@class LogoutReq;
@class LogoutReqBuilder;



@interface ImHxconnRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

#define LoginReq_sCustID @"sCustId"
#define LoginReq_sLoginToken @"sLoginToken"
#define LoginReq_nChannelType @"nChannelType"
#define LoginReq_sEntResNo @"sEntResNo"
#define LoginReq_bForceLogin @"bForceLogin"
#define LoginReq_nDeviceType @"nDeviceType"
#define LoginReq_sDeviceVersion @"sDeviceVersion"
#define LoginReq_sDeviceToken @"sDeviceToken"
@interface LoginReq : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasBForceLogin_:1;
  BOOL hasSCustId_:1;
  BOOL hasSLoginToken_:1;
  BOOL hasSEntResNo_:1;
  BOOL hasSDeviceVersion_:1;
  BOOL hasSDeviceToken_:1;
  BOOL hasNChannelType_:1;
  BOOL hasNDeviceType_:1;
  BOOL bForceLogin_:1;
  NSString* sCustId;
  NSString* sLoginToken;
  NSString* sEntResNo;
  NSString* sDeviceVersion;
  NSString* sDeviceToken;
  UInt32 nChannelType;
  UInt32 nDeviceType;
}
- (BOOL) hasSCustId;
- (BOOL) hasSLoginToken;
- (BOOL) hasNChannelType;
- (BOOL) hasSEntResNo;
- (BOOL) hasBForceLogin;
- (BOOL) hasNDeviceType;
- (BOOL) hasSDeviceVersion;
- (BOOL) hasSDeviceToken;
@property (readonly, strong) NSString* sCustId;
@property (readonly, strong) NSString* sLoginToken;
@property (readonly) UInt32 nChannelType;
@property (readonly, strong) NSString* sEntResNo;
- (BOOL) bForceLogin;
@property (readonly) UInt32 nDeviceType;
@property (readonly, strong) NSString* sDeviceVersion;
@property (readonly, strong) NSString* sDeviceToken;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (LoginReqBuilder*) builder;
+ (LoginReqBuilder*) builder;
+ (LoginReqBuilder*) builderWithPrototype:(LoginReq*) prototype;
- (LoginReqBuilder*) toBuilder;

+ (LoginReq*) parseFromData:(NSData*) data;
+ (LoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input;
+ (LoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (LoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface LoginReqBuilder : PBGeneratedMessageBuilder {
@private
  LoginReq* resultLoginReq;
}

- (LoginReq*) defaultInstance;

- (LoginReqBuilder*) clear;
- (LoginReqBuilder*) clone;

- (LoginReq*) build;
- (LoginReq*) buildPartial;

- (LoginReqBuilder*) mergeFrom:(LoginReq*) other;
- (LoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (LoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasSCustId;
- (NSString*) sCustId;
- (LoginReqBuilder*) setSCustId:(NSString*) value;
- (LoginReqBuilder*) clearSCustId;

- (BOOL) hasSLoginToken;
- (NSString*) sLoginToken;
- (LoginReqBuilder*) setSLoginToken:(NSString*) value;
- (LoginReqBuilder*) clearSLoginToken;

- (BOOL) hasNChannelType;
- (UInt32) nChannelType;
- (LoginReqBuilder*) setNChannelType:(UInt32) value;
- (LoginReqBuilder*) clearNChannelType;

- (BOOL) hasSEntResNo;
- (NSString*) sEntResNo;
- (LoginReqBuilder*) setSEntResNo:(NSString*) value;
- (LoginReqBuilder*) clearSEntResNo;

- (BOOL) hasBForceLogin;
- (BOOL) bForceLogin;
- (LoginReqBuilder*) setBForceLogin:(BOOL) value;
- (LoginReqBuilder*) clearBForceLogin;

- (BOOL) hasNDeviceType;
- (UInt32) nDeviceType;
- (LoginReqBuilder*) setNDeviceType:(UInt32) value;
- (LoginReqBuilder*) clearNDeviceType;

- (BOOL) hasSDeviceVersion;
- (NSString*) sDeviceVersion;
- (LoginReqBuilder*) setSDeviceVersion:(NSString*) value;
- (LoginReqBuilder*) clearSDeviceVersion;

- (BOOL) hasSDeviceToken;
- (NSString*) sDeviceToken;
- (LoginReqBuilder*) setSDeviceToken:(NSString*) value;
- (LoginReqBuilder*) clearSDeviceToken;
@end

#define LoginAck_scustID @"scustId"
#define LoginAck_nRet @"nRet"
@interface LoginAck : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasScustId_:1;
  BOOL hasNRet_:1;
  NSString* scustId;
  ResultCode nRet;
}
- (BOOL) hasScustId;
- (BOOL) hasNRet;
@property (readonly, strong) NSString* scustId;
@property (readonly) ResultCode nRet;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (LoginAckBuilder*) builder;
+ (LoginAckBuilder*) builder;
+ (LoginAckBuilder*) builderWithPrototype:(LoginAck*) prototype;
- (LoginAckBuilder*) toBuilder;

+ (LoginAck*) parseFromData:(NSData*) data;
+ (LoginAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LoginAck*) parseFromInputStream:(NSInputStream*) input;
+ (LoginAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LoginAck*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (LoginAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface LoginAckBuilder : PBGeneratedMessageBuilder {
@private
  LoginAck* resultLoginAck;
}

- (LoginAck*) defaultInstance;

- (LoginAckBuilder*) clear;
- (LoginAckBuilder*) clone;

- (LoginAck*) build;
- (LoginAck*) buildPartial;

- (LoginAckBuilder*) mergeFrom:(LoginAck*) other;
- (LoginAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (LoginAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasScustId;
- (NSString*) scustId;
- (LoginAckBuilder*) setScustId:(NSString*) value;
- (LoginAckBuilder*) clearScustId;

- (BOOL) hasNRet;
- (ResultCode) nRet;
- (LoginAckBuilder*) setNRet:(ResultCode) value;
- (LoginAckBuilder*) clearNRet;
@end

#define LogoutReq_sCustID @"sCustId"
#define LogoutReq_nDeviceType @"nDeviceType"
@interface LogoutReq : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasSCustId_:1;
  BOOL hasNDeviceType_:1;
  NSString* sCustId;
  UInt32 nDeviceType;
}
- (BOOL) hasSCustId;
- (BOOL) hasNDeviceType;
@property (readonly, strong) NSString* sCustId;
@property (readonly) UInt32 nDeviceType;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (LogoutReqBuilder*) builder;
+ (LogoutReqBuilder*) builder;
+ (LogoutReqBuilder*) builderWithPrototype:(LogoutReq*) prototype;
- (LogoutReqBuilder*) toBuilder;

+ (LogoutReq*) parseFromData:(NSData*) data;
+ (LogoutReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LogoutReq*) parseFromInputStream:(NSInputStream*) input;
+ (LogoutReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LogoutReq*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (LogoutReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface LogoutReqBuilder : PBGeneratedMessageBuilder {
@private
  LogoutReq* resultLogoutReq;
}

- (LogoutReq*) defaultInstance;

- (LogoutReqBuilder*) clear;
- (LogoutReqBuilder*) clone;

- (LogoutReq*) build;
- (LogoutReq*) buildPartial;

- (LogoutReqBuilder*) mergeFrom:(LogoutReq*) other;
- (LogoutReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (LogoutReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasSCustId;
- (NSString*) sCustId;
- (LogoutReqBuilder*) setSCustId:(NSString*) value;
- (LogoutReqBuilder*) clearSCustId;

- (BOOL) hasNDeviceType;
- (UInt32) nDeviceType;
- (LogoutReqBuilder*) setNDeviceType:(UInt32) value;
- (LogoutReqBuilder*) clearNDeviceType;
@end

#define LogoutAck_nRet @"nRet"
@interface LogoutAck : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasNRet_:1;
  ResultCode nRet;
}
- (BOOL) hasNRet;
@property (readonly) ResultCode nRet;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (LogoutAckBuilder*) builder;
+ (LogoutAckBuilder*) builder;
+ (LogoutAckBuilder*) builderWithPrototype:(LogoutAck*) prototype;
- (LogoutAckBuilder*) toBuilder;

+ (LogoutAck*) parseFromData:(NSData*) data;
+ (LogoutAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LogoutAck*) parseFromInputStream:(NSInputStream*) input;
+ (LogoutAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (LogoutAck*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (LogoutAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface LogoutAckBuilder : PBGeneratedMessageBuilder {
@private
  LogoutAck* resultLogoutAck;
}

- (LogoutAck*) defaultInstance;

- (LogoutAckBuilder*) clear;
- (LogoutAckBuilder*) clone;

- (LogoutAck*) build;
- (LogoutAck*) buildPartial;

- (LogoutAckBuilder*) mergeFrom:(LogoutAck*) other;
- (LogoutAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (LogoutAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasNRet;
- (ResultCode) nRet;
- (LogoutAckBuilder*) setNRet:(ResultCode) value;
- (LogoutAckBuilder*) clearNRet;
@end

#define KickoutNotify_sCustID @"sCustId"
#define KickoutNotify_nDeviceType @"nDeviceType"
#define KickoutNotify_ip @"ip"
#define KickoutNotify_port @"port"
@interface KickoutNotify : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasSCustId_:1;
  BOOL hasIp_:1;
  BOOL hasNDeviceType_:1;
  BOOL hasPort_:1;
  NSString* sCustId;
  NSString* ip;
  UInt32 nDeviceType;
  UInt32 port;
}
- (BOOL) hasSCustId;
- (BOOL) hasNDeviceType;
- (BOOL) hasIp;
- (BOOL) hasPort;
@property (readonly, strong) NSString* sCustId;
@property (readonly) UInt32 nDeviceType;
@property (readonly, strong) NSString* ip;
@property (readonly) UInt32 port;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (KickoutNotifyBuilder*) builder;
+ (KickoutNotifyBuilder*) builder;
+ (KickoutNotifyBuilder*) builderWithPrototype:(KickoutNotify*) prototype;
- (KickoutNotifyBuilder*) toBuilder;

+ (KickoutNotify*) parseFromData:(NSData*) data;
+ (KickoutNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (KickoutNotify*) parseFromInputStream:(NSInputStream*) input;
+ (KickoutNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (KickoutNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (KickoutNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface KickoutNotifyBuilder : PBGeneratedMessageBuilder {
@private
  KickoutNotify* resultKickoutNotify;
}

- (KickoutNotify*) defaultInstance;

- (KickoutNotifyBuilder*) clear;
- (KickoutNotifyBuilder*) clone;

- (KickoutNotify*) build;
- (KickoutNotify*) buildPartial;

- (KickoutNotifyBuilder*) mergeFrom:(KickoutNotify*) other;
- (KickoutNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (KickoutNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasSCustId;
- (NSString*) sCustId;
- (KickoutNotifyBuilder*) setSCustId:(NSString*) value;
- (KickoutNotifyBuilder*) clearSCustId;

- (BOOL) hasNDeviceType;
- (UInt32) nDeviceType;
- (KickoutNotifyBuilder*) setNDeviceType:(UInt32) value;
- (KickoutNotifyBuilder*) clearNDeviceType;

- (BOOL) hasIp;
- (NSString*) ip;
- (KickoutNotifyBuilder*) setIp:(NSString*) value;
- (KickoutNotifyBuilder*) clearIp;

- (BOOL) hasPort;
- (UInt32) port;
- (KickoutNotifyBuilder*) setPort:(UInt32) value;
- (KickoutNotifyBuilder*) clearPort;
@end


// @@protoc_insertion_point(global_scope)
